[
{
  "title": "부하량 제어",
  "url": "https://docs.whatap.io/java/agent-load-amount",
  "content": "부하량 제어. 자바(Java) 애플리케이션 서버의 트래픽 쓰로틀링 옵션을 설정하는 에이전트 옵션을 안내합니다. 애플리케이션의 최대 동시 요청 수를 제한하고, 특정 사용자나 URL을 기준으로 서비스 접근을 제어하는 기능을 포함합니다. 사용자 정의 메시지 전송, URL 리다이렉션 설정, 이벤트 알림 활성화 등 다양한 옵션을 제공하여 과부하 상황에서 애플리케이션의 안정성을 보장할 수 있습니다. 부하량 제어자바(Java) 애플리케이션 서버의 트래픽 쓰로틀링 옵션을 설정하는 에이전트 옵션을 안내합니다. 애플리케이션의 최대 동시 요청 수를 제한하고, 특정 사용자나 URL을 기준으로 서비스 접근을 제어하는 기능을 포함합니다. 사용자 정의 메시지 전송, URL 리다이렉션 설정, 이벤트 알림 활성화 등 다양한 옵션을 제공하여 과부하 상황에서 애플리케이션의 안정성을 보장할 수 있습니다. throttle_enabled Boolean 기본값 false 애플리케이션의 최대 동시 처리 수를 제한하는 쓰로틀링 기능을 활성화합니다. throttle_으로 시작하는 모든 옵션은 throttle_enabled=true 상태에서만 동작합니다. 쓰로틀링 제어 관련 정책의 우선 순위는 다음과 같습니다. Block: URL, 사용자 IP 주소 기준으로 서비스를 차단하며 가장 우선 적용합니다. Passing: Passing에 적용된 URL들은 Reject 정책보다 우선합니다. Reject: Block, Passing 정책 이후에 Reject 정책을 적용합니다. throttle_limit Int 기본값 10000 에이전트 별 동시 처리하는 요청(트랜잭션) 수가 설정한 값을 초과하면 추가로 도달하는 요청은 reject 합니다. throttle_rejected_message String 기본값 too many request!! 쓰로틀링을 제한할 경우 사용자에게 전달할 메시지를 설정합니다. throttle_rejected_forward String 사용자 요청이 limit 값을 초과해 reject 될 때 사용자에게 전달하는 안내 페이지 URL을 설정합니다. throttle_rejected_message를 동시 설정한 경우 throttle_rejected_forward를 우선 적용합니다. 주의안내 페이지를 동일한 컨테이너에서 서비스한다면, 이 역시 동시 처리 수로 산정하므로 재귀 호출로 인한 장애 요소가 될 수 있습니다. 그러므로 안내 페이지는 static html 페이지로 만들거나 외부에 있어야 합니다. reject_event_enabled Boolean 기본값 false 사용자 요청을 Reject할 경우 이벤트 알림 발생 여부를 설정합니다. reject_event_interval MiliSecond 기본값 30000 Reject에 대한 이벤트 알림 발생 후 설정한 시간 동안 중복 이벤트에 대한 알림은 발생하지 않습니다. throttle_blocking_url String throttle_limit을 초과하지 않는 경우라도 블록킹(처리 거부)할 URL을 설정합니다. 시스템 장애를 유발하는 URL을 긴급하게 블록킹하기 위해 사용할 수 있습니다. throttle_blocking_ip ip_address 사용자 IP 주소를 기준으로 블록킹하고자 할 때 설정합니다. 디도스 공격이나 잘못된 사용자를 IP 주소 기반으로 차단할 때 사용할 수 있습니다. 여러 개인 경우 쉼표(,)를 구분자로 사용하세요. throttle_target_urls String 등록한 URL을 대상으로 쓰로틀링 기능을 적용합니다. 여러 개인 경우 쉼표(,)를 구분자로 사용하세요. throttle_passing_url String throttle_limit을 초과하는 경우라도 처리해야 하는 URL을 설정합니다. 여러 개인 경우 쉼표(,)를 구분자로 사용하세요. throttle_passing_url_prefix String throttle_limit을 초과하는 경우라도 처리해야 하는 URL들을 prefix로 설정합니다. 여러 개인 경우 쉼표(,)를 구분자로 사용하세요. throttle_blocked_message String 기본값 request blocked!! 요청을 블록킹한 사용자에게 전달할 메시지를 설정합니다. throttle_blocked_forward String 요청을 블록킹한 사용자에게 전달할 URL을 설정합니다. throttle_blocked_message를 동시 설정한 경우 throttle_blocked_forward를 우선 적용합니다. ",
  "product": "JAVA 모니터링",
  "header": "부하량 제어"
},
{
  "title": "WebLogic",
  "url": "https://docs.whatap.io/java/add-jvm-opt/weblogic",
  "content": "WebLogic. 와탭 모니터링 솔루션을 웹로직(WebLogic) 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 웹로직(WebLogic) 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 웹로직(WebLogic)과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "WebLogic"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/weblogic",
  "title": "WebLogic",
  "content": "JVM 옵션 추가. WebLogic 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. 사용하는 운영체제를 확인 후 설정을 완료하세요. Linux Windows {WebLogic_Path}/user_projects/domains/{User_Domain}/bin/startWebLogic.sh ########## WHATAP START ############ WHATAP_HOME = /path/to/whatap WHATAP_JAR = ` ls $ { WHATAP_HOME } /whatap.agent-*.jar | sort -V | tail -1 ` JAVA_OPTIONS = \" ${JAVA_OPTIONS} -javaagent: ${WHATAP_JAR} \" ########## WHATAP END ############ {WebLogic_Path}/user_projects/domains/{User_Domain}/bin/startWebLogic.bat rem ########## WHATAP START ############ set WHATAP_HOME = \\path\\to\\whatap for /f %%f in ( ' dir /b /on \"%WHATAP_HOME%\\whatap.agent-*.jar\" ' ) do set last = %%f set WHATAP_JAR = %last% set WHATAP_OPTS = - javaagent: %WHATAP_HOME% \\ %WHATAP_JAR% if \"x%JAVA_OPTIONS%\" == \"x\" goto setWhatap set JAVA_OPTIONS_TMP = %JAVA_OPTIONS: \" = % if not \"x%JAVA_OPTIONS_TMP:whatap=%\" == \"x%JAVA_OPTIONS_TMP%\" goto endWhatap :setWhatap set JAVA_OPTIONS = %JAVA_OPTIONS% %WHATAP_OPTS% :endWhatap rem ########## WHATAP END ############ 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/weblogic",
  "title": "WebLogic",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/weblogic",
  "title": "WebLogic",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "Apdex",
  "url": "https://docs.whatap.io/java/agent-apdex",
  "content": "Apdex. 사용자 만족도를 측정하는 Apdex 점수를 설정하는 자바(Java) 에이전트 옵션을 안내합니다. Apdex 지표를 통해 애플리케이션의 성능을 객관적으로 평가하고 사용자 경험을 개선할 수 있습니다. Apdex사용자 만족도를 측정하는 Apdex 점수를 설정하는 자바(Java) 에이전트 옵션을 안내합니다. Apdex 지표를 통해 애플리케이션의 성능을 객관적으로 평가하고 사용자 경험을 개선할 수 있습니다. whatap.apdex_time millisecond 기본값 1200 만족 S 기본값은 에이전트 설정 메뉴에서 변경할 수 있습니다. Application Performance Index(Apdex)는 애플리케이션 성능 지표입니다. 웹 애플리케이션의 고객 만족도를 측정합니다. 사용자 만족도에 대한 지표로 활용할 수 있으며, 0 ~ 1 사이의 값을 갖습니다. (만족 횟수 + (허용 횟수 * 0.5)) / 전체 요청 수 만족 (Satisfied, S): 업무처리에 전혀 문제 없음 ≤ 1.2초 (만족 S 기본값) 허용 (Tolerating, T): 사용자가 지연을 느끼나 업무처리는 가능 ≤ 4.8초 (만족 S * 4) 불만 (Frustrated, F): 업무처리가 불가능 > 4.8초 (허용 T 초과 및 오류) 노트에이전트 2.0 버전 이상부터 지원합니다.",
  "product": "JAVA 모니터링",
  "header": "Apdex"
},
{
  "title": "DB, SQL",
  "url": "https://docs.whatap.io/java/agent-dbsql",
  "content": "DB, SQL. 데이터베이스 및 SQL 성능 데이터 수집을 위한 자바(Java) 에이전트의 다양한 옵션을 안내합니다. DBCP, Hikari, Tomcat 등 다양한 DB 연결 풀(Connection Pool) 정보 추적 및 SQL 실행 세부 사항을 기록할 수 있습니다. 또한, SQL 파라미터 정보 기록, DB 연결 누수 추적 등 성능 최적화에 필수적인 정보 수집 옵션을 제공합니다. DB, SQL데이터베이스 및 SQL 성능 데이터 수집을 위한 자바(Java) 에이전트의 다양한 옵션을 안내합니다. DBCP, Hikari, Tomcat 등 다양한 DB 연결 풀(Connection Pool) 정보 추적 및 SQL 실행 세부 사항을 기록할 수 있습니다. 또한, SQL 파라미터 정보 기록, DB 연결 누수 추적 등 성능 최적화에 필수적인 정보 수집 옵션을 제공합니다. dbcp_pool_enabled Boolean 기본값 true JMX를 사용하지 않고 DBCP의 DB Connection 정보를 추적하기 위해 사용합니다. hikari_pool_enabled Boolean 기본값 false JMX를 사용하지 않고 hikari pool의 DB Connection 정보를 추적하기 위해 사용합니다. tomcat_ds_enabled Boolean 기본값 false JMX를 사용해 Tomcat DB Connection Pool 정보를 추적하는 기능을 활성화합니다. tomcat_pool_enabled Boolean 기본값 true JMX를 사용하지 않고 Tomcat DB Connection Pool 정보를 추적하는 기능을 활성화합니다. weblogic_ds_enabled Boolean 기본값 false JMX를 사용해 Weblogic DB Connection Pool 정보를 추적하는 기능을 활성화합니다. weblogic_pool_enabled Boolean 기본값 true JMX를 사용하지 않고 Weblogic DB Connection Pool 정보를 추적하는 기능을 활성화합니다. jeus_pool_enabled Boolean 기본값 true JMX를 사용하지 않고 JEUS DB Connection Pool 정보를 추적하는 기능을 활성화합니다. profile_connection_open_enabled Boolean 기본값 true 트레이스 내역에 DBConnection 오픈 정보를 기록합니다. profile_dbc_close Boolean 기본값 false profile_connection_open_enabled의 값이 true인 경우에만 동작합니다. 트레이스 내역에 DBConnection 클로즈 정보를 기록합니다. profile_sql_param_enabled Boolean​ 기본값 false 트레이스 내역에 SQL 파라미터 정보를 기록할 때 사용합니다. 파라미터는 별도 보안 키를 입력해야 조회할 수 있습니다. 노트 Java 에이전트 2.2.2 버전 이전: 보안 키는 WAS 서버 ${WHATAP_AGENT_HOME}/paramkey.txt 파일 내에 6자리로 작성합니다. paramkey.txt 파일이 존재하지 않는 경우 랜덤 값으로 자동 생성합니다. Java 에이전트 2.2.2 버전 이후: 보안 키는 WAS 서버 ${WHATAP_AGENT_HOME}/security.conf 파일 내에 paramkey 키값을 확인하세요. security.conf 파일이 존재하지 않을 경우 paramkey 키값을 WHATAP으로 자동 생성합니다. 보안키 설정 파일에 대한 자세한 내용은 다음 문서를 참조하세요. profile_sql_resource_enabled Boolean 기본값 false 트레이스에서 SQL을 수집할 때 해당 스텝에서 사용한 CPU와 메모리 사용량을 추적합니다. profile_update_count Boolean 기본값 false executeUpdate() 메소드를 통해 SQL UPDATE 문을 수행한 경우 UPDATE 건수를 수집합니다. custom_pool_classes String pre-define되지 않는 별도의 Connection Pool을 사용하는 경우 해당 클래스 명을 설정합니다. ds_update_interval MiliSeconds 기본값 5000 DB Connection 정보 Count 간격을 설정합니다. profile_position_sql Boolean 기본값 false SQL을 수행하는 시점의 StackTrace를 기록합니다. profile_sql_param_length Int 기본값 40 SQL 파라미터의 길이를 설정합니다. 노트최대값은 128이며 그 이상의 값을 입력하더라도 파라미터는 128까지 저장합니다. trace_dbc_leak_enabled Boolean 기본값 false DBConnection Leak을 추적하는 기능을 활성화합니다. 주의Connection Wrapper를 사용해 Leak을 추적하기에 운영 서비스에 영향을 미칠 수 있으므로 반드시 테스트 후 적용하세요. trace_dbc_leak_fullstack_enabled Boolean 기본값 false DBConnection Leak이 감지되는 경우 해당 시점 StackTrace를 수집합니다. 주의피크 타임(Peak Time)에는 가급적 적용하지 마세요. 옵션을 적용하면 CPU 사용량이 다소 증가할 수 있습니다. 문제 해결 용도로만 한시적으로 적용할 것을 권고합니다. trace_sql_normalize_enabled Boolean 기본값 true SQL 문에서 리터럴 부분을 추출해 SQL 문을 정규화하는 기능을 활성화합니다. profile_error_jdbc_fetch_max Int 기본값 10000 SQL Fetch Count(ResultSet.next() 호출 건 수)가 설정한 값을 초과하면 TOO MANY Fetch 에러로 처리합니다. 0으로 설정하면 에러 처리하지 않습니다. profile_error_sql_time_max Int 기본값 30000 SQL 수행 시간이 설정한 값을 초과하면 TOO SLOW 에러로 처리합니다. 0으로 설정하는 경우 에러 처리를 하지 않습니다. hook_connection_open_patterns String DB Connection Open 시 호출하는 메소드를 등록합니다. 미리 설정하지 않은 Connection Pool의 getConnection을 등록하는 것이 일반적입니다. Examplehook_connection_open_patterns=mypool.ConPool.getConnection hook_jdbc_con_classes String 미등록한 JDBC Connection 클래스를 지정합니다. Examplehook_jdbc_con_classes=mypool.ConPool hook_jdbc_pstmt_classes String 미등록한 jdbc PreparedStatement 클래스를 설정합니다. 생성자 파라미터에 SQL 문자열이 전달되는 구조여야 한다는 것을 주의하세요. Examplehook_jdbc_pstmt_classes=org.apache.derby.impl.jdbc.EmbedPreparedStatement hook_jdbc_cstmt_classes String 미등록한 jdbc CallableStatement 클래스를 설정합니다. Examplehook_jdbc_cstmt_classes=org.apache.derby.impl.jdbc.EmbedCallableStatement hook_jdbc_stmt_classes String 미등록한 JDBC Statement 클래스를 설정합니다. Examplehook_jdbc_stmt_classes=org.apache.derby.impl.jdbc.EmbedStatement hook_jdbc_rs_classes String 미등록한 JDBC ResultSet 클래스를 설정합니다. Examplehook_jdbc_rs_classes=org.apache.derby.impl.jdbc.EmbedResultSet hook_jdbc_wrapping_driver_patterns String DB2 드라이버처럼 난독 처리한 JDBC 드라이버는 hook_jdbc_xxx 옵션으로 직접 BCI가 어렵습니다. 이런 경우 Wrapper 방식으로 SQL를 추적할 수 있습니다. 이때 Driver.connect를 설정해 추적합니다. debug_dbc_stack_enabled Boolean 기본값 false DB Connection 시점의 StackTrace를 트레이스에 저장합니다. 애플리케이션에서 사용하는 Connection Pool 정보를 얻기 위해 사용합니다. ignore_sql_hash_set String Java Agent v2.2.4 or later 해당 옵션에 입력한 SQL 해시값과 일치하는 SQL 문은 무시하도록 설정할 수 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "DB, SQL"
},
{
  "title": "부가 기능",
  "url": "https://docs.whatap.io/java/agent-additional-option",
  "content": "부가 기능. 자바(Java) 애플리케이션의 모니터링 수준을 사용자의 필요에 맞게 조정할 수 있는 추가적인 에이전트 설정 옵션을 안내합니다. SQL 파라미터 수집, HTTP 파라미터 및 헤더 정보 수집, 사용자 IP 정보 추출, 사용자 수 추적 방법 선택, SAP Function 추적 등을 포함합니다. 이 옵션들을 통해 보다 세밀한 데이터 수집 및 분석이 가능하며, 특히 보안이 중요한 환경에서 필요에 따라 옵션을 조정할 수 있습니다. 부가 기능자바(Java) 애플리케이션의 모니터링 수준을 사용자의 필요에 맞게 조정할 수 있는 추가적인 에이전트 설정 옵션을 안내합니다. SQL 파라미터 수집, HTTP 파라미터 및 헤더 정보 수집, 사용자 IP 정보 추출, 사용자 수 추적 방법 선택, SAP Function 추적 등을 포함합니다. 이 옵션들을 통해 보다 세밀한 데이터 수집 및 분석이 가능하며, 특히 보안이 중요한 환경에서 필요에 따라 옵션을 조정할 수 있습니다. 다음은 자주 사용하지만 보안 등의 이유로 에이전트 기본 설정에서 제외한 옵션입니다. 필요하다면 아래 옵션을 추가해 적용할 수 있습니다. profile_sql_param_enabled Boolean 기본값 true SQL 파라미터를 수집합니다. profile_http_parameter_enabled Boolean 기본값 true HTTP 파라미터를 수집합니다. profile_http_header_enabled Boolean 기본값 false HTTP 헤더 정보를 수집합니다. trace_http_client_ip_header_key String 기본값 X-Forwarded-For 사용자 IP 정보를 HTTP 헤더의 키에서 추출합니다. trace_user_method / wclient_cookie_limit Boolean 기본값 cookie 사용자 수 추적을 쿠키 기반으로 합니다. 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_trace_type 옵션을 이용하세요. hook_httpc_sap3_enabled Boolean 기본값 true SAP JCO을 사용하는 경우 SAP Function을 추적합니다. ",
  "product": "JAVA 모니터링",
  "header": "부가 기능"
},
{
  "title": "HTTPC, API Call",
  "url": "https://docs.whatap.io/java/agent-httpcapicall",
  "content": "HTTPC, API Call. HTTP 외부 호출과 API 호출 관련 데이터를 수집, 분석을 위한 자바(Java) 에이전트의 옵션 설정 방법을 안내합니다. TOO SLOW 에러 처리 및 CPU와 메모리 사용량 추적, 호출 시점의 스택 트레이스 기록, URL 정규화 등 세밀한 모니터링을 위한 다양한 옵션을 제공합니다. 이를 통해 개발자는 애플리케이션의 외부 의존성을 효율적으로 관리하고 성능 문제를 식별할 수 있습니다. HTTPC, API CallHTTP 외부 호출과 API 호출 관련 데이터를 수집, 분석을 위한 자바(Java) 에이전트의 옵션 설정 방법을 안내합니다. TOO SLOW 에러 처리 및 CPU와 메모리 사용량 추적, 호출 시점의 스택 트레이스 기록, URL 정규화 등 세밀한 모니터링을 위한 다양한 옵션을 제공합니다. 이를 통해 개발자는 애플리케이션의 외부 의존성을 효율적으로 관리하고 성능 문제를 식별할 수 있습니다. profile_error_httpc_time_max Int 기본값 10000 HTTPC 수행 시간이 지정한 값을 초과하면 TOO SLOW 에러로 처리합니다. 0으로 설정하면 에러 처리하지 않습니다. profile_httpc_resource_enabled Boolean 기본값 false 트레이스에서 HTTP Call 스텝을 수집할 때 해당 스텝에서 사용한 CPU와 메모리 사용량을 추적합니다. profile_position_httpc Boolean 기본값 false HTTPC가 수행하는 시점의 StackTrace를 기록합니다. trace_httpc_normalize_enabled Boolean 기본값 true 트랜잭션 내 HTTPC URL을 파싱해 정규화하는 기능을 활성화합니다. trace_httpc_normalize_urls String 정규화할 HTTPC URL 패턴을 설정합니다. 호출 URL 패턴을 파싱해 패스 파라미터를 제거합니다. 노트예시, /a/{v}/b라고 선언하면 a/123/b → a/{v}/b로 치환합니다. 여러 개를 등록할 때는 쉼표(,)를 구분자로 사용합니다. 치환 패턴 정리 후 보완이 필요합니다. hook_httpc_patterns String HTTP outbound 호출을 수행하는 full package 클래스명.메소드를 설정합니다. HTTP Call을 수행하는 메소드(method)의 전체 경로(full path)를 등록해 사용합니다. 등록 후 클래스 재정의(class redefine)를 하거나 에이전트를 재시작해야 합니다. whatap.confhook_httpc_patterns=io.home.test.baseapp.app.post.service.HookHttpcService.* 노트 클래스를 여러 개 등록하려면 쉼표(,)를 구분자로 사용하세요. 와일드 카드는 별표(*)만 사용할 수 있으며 정규식은 사용할 수 없습니다. ",
  "product": "JAVA 모니터링",
  "header": "HTTPC, API Call"
},
{
  "title": "Tomcat",
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "content": "Tomcat. 와탭 모니터링 솔루션을 톰캣(Tomcat) 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 톰캣(Tomcat) 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 톰캣(Tomcat)과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Tomcat"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "환경 변수 추가. Tomcat 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. 사용하는 운영체제에 맞게 설정하세요.",
  "product": "JAVA 모니터링",
  "header": "환경 변수 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "Linux. catalina.sh 파일 상단에 JAVA_OPTS 환경 변수를 추가하세요. {Tomcat_PATH}/bin/catalina.sh ########## WHATAP START ############ WHATAP_HOME = /whatap WHATAP_JAR = ` ls $ { WHATAP_HOME } /whatap.agent-*.jar | sort -V | tail -1 ` JAVA_OPTS = \" ${JAVA_OPTS} -javaagent: ${WHATAP_JAR} \" ########## WHATAP END ############ 노트 ls ${WHATAP_HOME}/whatap.agent-*.jar | sort -V | tail -1 항목은 향후 에이전트 업데이트를 진행할 경우 최신 와탭 에이전트를 적용하기 위해서입니다.",
  "product": "JAVA 모니터링",
  "header": "Linux"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "Windows. setup.bat 파일을 통해 실행하는 경우 catalina.bat 파일 상단에 JAVA_OPT 환경 변수를 추가하세요. {Tomcat_PATH}/bin/catalina.bat rem ########## WHATAP START ############ set WHATAP_HOME = C:\\whatap for /f %%f in ( ' dir /b /on \"%WHATAP_HOME%\\whatap.agent-*.jar\" ' ) do set last = %%f set WHATAP_JAR = %last% set WHATAP_OPTS = - javaagent: %WHATAP_HOME% \\ %WHATAP_JAR% if \"x%JAVA_OPTS%\" == \"x\" goto setWhatap set JAVA_OPTS_TMP = %JAVA_OPTS: \" = % if not \"x%JAVA_OPTS_TMP:whatap=%\" == \"x%JAVA_OPTS_TMP%\" goto endWhatap :setWhatap set JAVA_OPTS = %JAVA_OPTS% %WHATAP_OPTS% :endWhatap rem ########## WHATAP END ############ Tomcat을 Windows 인스톨러로 설치한 경우 시작 > Apache Tomcat X.Y.Z. > Configure Tomcat 을 선택하세요. Java 탭을 선택하세요. Java Options 텍스트 박스에 -javaagent 옵션을 추가하세요. -javaagent:{와탭 설치 경로}/whatap.agent-X.Y.Z.jar",
  "product": "JAVA 모니터링",
  "header": "Windows"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "Java 17 버전 이상. Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "Java 17 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/tomcat",
  "title": "Tomcat",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "에이전트 기능 제어",
  "url": "https://docs.whatap.io/java/agent-control-function",
  "content": "에이전트 기능 제어. 자바(Java) 애플리케이션 서버의 모니터링을 위한 에이전트 기능을 세밀하게 조정하는 방법을 안내합니다. 에이전트의 활성화/비활성화, 트랜잭션 및 성능 카운터 추적, OS 정보 수집 등의 기능을 포함하며, 각 기능을 제어하는 다양한 설정 옵션들에 대해 확인할 수 있습니다. 에이전트 기능 제어자바(Java) 애플리케이션 서버의 모니터링을 위한 에이전트 기능을 세밀하게 조정하는 방법을 안내합니다. 에이전트의 활성화/비활성화, 트랜잭션 및 성능 카운터 추적, OS 정보 수집 등의 기능을 포함하며, 각 기능을 제어하는 다양한 설정 옵션들에 대해 확인할 수 있습니다. shutdown Boolean 기본값 false true인 경우 에이전트의 모든 동작을 중지하고 서버와의 연결을 종료합니다. enabled Boolean 기본값 true 전체 기능을 활성화합니다. false인 경우에도 서버와 최소한의 통신을 유지하기 위한 정보는 전송됩니다. transaction_enabled Boolean 기본값 true 트랜잭션 추적 기능을 활성화합니다. 히트맵에 기록되는 트랜잭션 정보가 해당합니다. enabled 옵션이 false인 경우 비활성화합니다. counter_enabled Boolean 기본값 true 성능 카운터 추적 기능을 활성화합니다. 액티브 트랜잭션 수 및 사용자 수, JVM 자원 사용량, Process CPU 사용량, DB Pool 사용량 정보 등이 해당합니다. enabled 옵션이 false인 경우 비활성화합니다. stat_enabled Boolean 기본값 true 통계 정보 추적 기능을 활성화합니다. 5분 단위로 수집하는 트랜잭션, SQL, HTTPCALL, UserAgent, Client IP 등의 통계 데이터 등이 해당합니다. enabled 옵션이 false인 경우 비활성화합니다. sigar_enabled Boolean 기본값 true sigar 라이브러리를 통한 OS 정보 수집을 활성화합니다. sigar 라이브러리를 통해 5초 단위로 수집하는 CPU, Memory, Disk 등의 OS 자원 데이터가 해당합니다. enabled 옵션이 false인 경우 비활성화합니다. active_stack_enabled Boolean 기본값 true 액티브 스택 추적을 활성화합니다. 스택 메뉴의 탑 스택 및 유니크 스택, 액티브 스택이 해당합니다. enabled 또는 counter_enabled 옵션이 false인 경우 비활성화합니다. license String 에이전트 설치 시 서버로부터 부여받은 액세스 키를 입력합니다. 액세스 키에는 에이전트가 속한 프로젝트와 보안 통신을 위한 암호 키를 포함합니다. cypher_level aes_bit [128, 256] 기본값 128 AES 보안 알고리즘에 대한 암호 레벨을 설정합니다. 256 비트까지 확장할 수 있습니다. AES 256 암호화 설정에 대한 자세한 내용은 다음 문서를 참조하세요. encrypt_level encrypt_level [1, 2, 3] 기본값 2 와탭 에이전트는 서버로 데이터를 전송할 때 데이터 속성에 따라 선택적으로 암호화합니다. 높은 보안을 유지하면서도 성능상 이점을 가지고 있습니다. 데이터 유형에 상관 없이 일괄적인 암호화 정책을 적용하려면 다음 옵션을 참조하세요. 1: 암호화 전송 기능 사용 안함 2: SQL 파라미터, Plain Text와 같은 민감한 속성에 대한 암호화 전송 3: 모든 항목에 대한 암호화 전송 stat_ip_enabled Boolean 기본값 true 와탭 모니터링 서비스의 프로젝트 메뉴에서 통계/보고서 > 통계 > 클라이언트 IP 항목의 IP 통계 사용 여부를 활성화합니다. realtime_user_enabled Boolean 기본값 true 와탭 모니터링 서비스의 대시보드 > 애플리케이션 대시보드 메뉴에서 확인할 수 있는 지표 중 동시접속 사용자 지표 수집 여부를 설정합니다. hook_direct_patch_classes ClassFile_FullPath 직접적으로 특정 클래스를 로딩 타임에 바꿔치기할 때 사용합니다. 클래스를 컴파일한 후에 별도 파일을 만들고 그 파일의 전체 경로를 설정합니다. active_stack_second Seconds 기본값 10 액티브 스택을 추적하는 간격을 설정합니다. 주의주어진 기본값을 변경하지 않을 것을 권장합니다. boot_redefine_size Int 기본값 100 에이전트를 Attach 방식 또는 Watcher 방식으로 설치했을 경우 이미 로딩된 클래스의 추적을 위해 BCI를 새로 수행합니다. 이때 동시 redefine하는 클래스의 개수를 설정합니다. trace_component_enabled Boolean 기본값 true 와탭 모니터링 서비스의 프로젝트 메뉴에서 애플리케이션 > 인스턴스 성능 분석 메뉴에서 라이브러리 버전 기능을 활성화합니다. realtime_user_thinktime_max / wclient_thinktime_max MiliSeconds 기본값 300000 실시간 브라우저 사용자 수를 측정할 경우 동일 사용자로 인정되는 최대 호출 간격을 설정합니다. 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_thinktime_max 옵션을 이용하세요. time_sync_interval_ms MiliSeconds 기본값 300000 에이전트와 서버 간 동기화하는 시간 간격을 설정합니다. 동기화하지 않을 경우 0으로 설정하세요. detect_deadlock_enabled Boolean 기본값 false Java 스레드의 교착 상태(DeadLock) 여부를 체크해 감지할 경우 이벤트를 발생합니다. 발생 간격은 5초 단위입니다. 같은 DeadLock 건에 대한 이벤트는 한 시간에 한 번만 발생합니다. text_reset Int 기본값 0 와탭 에이전트는 한번 보낸 텍스트 유형 데이터를 hash 처리하므로 다음 날까지 다시 전송하지 않습니다. 이전 설정 값과 다른 값을 입력하는 경우 다시 전송합니다. 노트트랜잭션 URL, SQL String 등이 텍스트 유형 데이터에 해당합니다. ",
  "product": "JAVA 모니터링",
  "header": "에이전트 기능 제어"
},
{
  "title": "WebSphere",
  "url": "https://docs.whatap.io/java/add-jvm-opt/websphere",
  "content": "WebSphere. 와탭 모니터링 솔루션을 WebSphere 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 WebSphere 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 WebSphere과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "WebSphere"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/websphere",
  "title": "WebSphere",
  "content": "JVM 옵션 추가. WebSphere 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. JVM 옵션을 추가하려면 관리 콘솔(Admin console)로 접속하세요. 웹브라우저에서 관리 콘솔에 로그인하세요. Environment > Virtual Hosts > default host > Host Aliases 항목을 선택한 다음 에이전트를 설치할 서버의 포트 번호를 확인하세요. Servers > Server Types > Websphere application servers 항목으로 이동한 다음 에이전트를 설치할 서버를 선택하세요. 선택한 서버 화면에서 Configuration 탭을 선택하고 Server Infrastructure 섹션의 Java and Process Management > Process definition 메뉴를 선택하세요. 오른쪽 메뉴에서 Additional Properties > Java Virtual Machine 메뉴를 선택하세요. Configuration 탭에서 Generic JVM arguments 텍스트 박스에 -javaagent 와 -Dwhatap.port 를 추가하세요. -javaagent:/whatap/whatap.agent-X.Y.Z.jar -Dwhatap.port = { 포트번호 } ## 2번 항목 포트 번호 ## 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/websphere",
  "title": "WebSphere",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/websphere",
  "title": "WebSphere",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "Play2",
  "url": "https://docs.whatap.io/java/add-jvm-opt/play2",
  "content": "Play2. 와탭 모니터링 솔루션을 Play2 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Play2 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Play2와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Play2"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/play2",
  "title": "Play2",
  "content": "JVM 옵션 추가. Play2 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. $PLAY_HOME/framework/build 파일에 에이전트 옵션을 설정하세. 별도로 이용하는 시작 또는 중지 스크립트가 있다면 해당 파일에 적용하세요. #! /usr/bin/env sh ########## WHATAP START ############ WHATAP_HOME = /apps/whatap WHATAP_JAR = ` ls $ { WHATAP_HOME } /whatap.agent-*.jar | sort -V | tail -1 ` JAVA_OPTS = \" ${JAVA_OPTS} -Dwhatap.play2=2.2.6 -javaagent: ${WHATAP_JAR} \" ########## WHATAP END ############ if [ -z \" ${PLAY_VERSION} \" ] ; then PLAY_VERSION = \"2.2.6\" .. . 노트 Play는 기본 설정 외 -Dwhatap.play2=2.2.6 옵션을 추가해야 합니다. 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/play2",
  "title": "Play2",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/play2",
  "title": "Play2",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "Spring Boot",
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "content": "Spring Boot. 와탭 모니터링 솔루션을 Spring Boot 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Spring Boot 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Spring Boot와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Spring Boot를 사용하는 애플리케이션 서버 환경에서 JVM 옵션을 추가하는 방법을 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "Spring Boot"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "JVM 옵션 추가. Java 17 버전 이상의 경우 reflection 관련 JVM 옵션 추가로 애플리케이션을 기동할 수 있습니다. # Java 17 이상만 지원 java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Dwhatap.oname = { Agent_Name } --add-opens = java.base/java.lang = ALL-UNNAMED -jar { application.jar } 시작 스크립트에 JVM 옵션으로 -javaagent 를 추가하세요. java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -jar { application.jar } JVM 옵션을 추가한 다음 사용하는 Spring Boot의 버전과 에이전트 버전에 맞춰 적합한 에이전트 설정을 진행하세요.",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "Spring Boot 3.0.0 버전 이상. Java 에이전트 v2.2.9 버전 이상( whatap.agent-2.2.9.jar ) whatap.conf weaving = spring-boot-3.0 Java 에이전트 v2.2.5 버전 이상( whatap.agent-2.2.5.jar ) whatap.conf weaving = spring-boot-3.0,tomcat10 Java 에이전트 v2.2.4 버전 이하( whatap.agent-2.2.4.jar ) jakarta.servlet.http.HttpServlet 추적(동기 방식) whatap.conf weaving = tomcat10 WebClient 추적(비동기 방식) whatap.conf weaving = webflux-6.0",
  "product": "JAVA 모니터링",
  "header": "Spring Boot 3.0.0 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "Spring Boot 2.7.0 버전 이상. Java 에이전트 v2.2.9 버전 이상( whatap.agent-2.2.9.jar ) whatap.conf weaving = spring-boot-2.7 Java 에이전트 v2.2.5 버전 이상( whatap.agent-2.2.5.jar ) whatap.conf weaving = spring-boot-2.7,tomcat9 Java 에이전트 v2.2.4 버전 이하( whatap.agent-2.2.4.jar ) WebClient 추적(비동기 방식) whatap.conf weaving = webflux-5.3",
  "product": "JAVA 모니터링",
  "header": "Spring Boot 2.7.0 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "Spring Boot 2.5.0 버전 이상. Java 에이전트 v2.2.9 버전 이상( whatap.agent-2.2.9.jar ) whatap.conf weaving = spring-boot-2.5 Java 에이전트 v2.2.5 버전 이상( whatap.agent-2.2.5.jar ) whatap.conf weaving = spring-boot-2.5,tomcat9 Java 에이전트 v2.2.4 버전 이하( whatap.agent-2.2.4.jar ) WebClient 추적(비동기 방식) whatap.conf weaving = webflux-5.3",
  "product": "JAVA 모니터링",
  "header": "Spring Boot 2.5.0 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/spring-boot",
  "title": "Spring Boot",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "이벤트 설정",
  "url": "https://docs.whatap.io/java/warning-notice-v2",
  "content": "이벤트 설정. 애플리케이션의 자원 사용량 및, 진행 중 트랜잭션, 에러 상황의 이벤트 조건을 통해 경고 알림을 보냅니다. 홈 화면 > 프로젝트 선택 >  사이트맵 > 경고 알림 > 이벤트 설정 New 새로운 이벤트 설정 메뉴는 카테고리(Category)가 아닌 필드(Field) 중심의 사용자 경험을 강화한 메뉴입니다. 메트릭스 이벤트 설정과 같은 강력한 기능을 모두 필요치 않거나 단순한 알림 조건을 반복해서 사용하는 사용자에게 빠르게 경고 알림을 적용할 수 있는 이벤트 기능입니다. 생성한 프로젝트의 상품에 적합한 기본 이벤트 템플릿을 제공하여 빠르고 쉽게 원하는 경고 알림 이벤트를 설정할 수 있습니다. 카테고리가 아니라 필드를 먼저 선택해 사용자가 인지하는 지표와 이벤트 설정의 불일치를 해소합니다. 시뮬레이션이 주는 시각적 직관성을 결합하여 빠르고 정확하게 이벤트설정을 완료할 수 있습니다. 노트 신규 프로젝트는 별도의 설정없이 이 기능을 이용할 수 있으나 이미 생성된 프로젝트에서는 이벤트 템플릿 생성 버튼을 선택하세요. 새로운 기능에 최적화된 이벤트 목록을 자동으로 생성합니다. 상품에 따라 제공하는 이벤트 템플릿은 다를 수 있습니다. 이 기능은 알림 설정 권한이 있는 멤버만 이용할 수 있습니다. 멤버 권한에 대한 자세한 설명은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "이벤트 설정"
},
{
  "url": "https://docs.whatap.io/java/warning-notice-v2",
  "title": "이벤트 설정",
  "content": "기본 이벤트 템플릿. 생성한 프로젝트의 상품에 따라 기본 이벤트 템플릿을 제공합니다. 이벤트 목록의 가장 왼쪽에 활성화 버튼을 선택해 원하는 이벤트를 활성화할 수 있습니다. 제공하는 이벤트 템플릿은 다음과 같습니다. 지표 항목에 설정된 기본값은 사용자가 원하는 값으로 수정할 수 있습니다. Active Transaction 카테고리: app_counter 액티브 트랜잭션 발생 건수( active_tx_count )가 100개를 초과한 상태하면 경고( Warning ) 수준의 알림을 보냅니다. Server CPU 카테고리: app_host_resource 호스트의 CPU 사용률( cpu )이 70%를 초과하면 경고( Warning ) 수준의 알림을, 90%를 초과하면 위험( Critical ) 수준의 알림을 보냅니다. Server Disk 카테고리: app_host_resource 호스트의 디스크 사용률( disk )이 70%를 초과하면 경고( Warning ) 수준의 알림을, 90%를 초과하면 위험( Critical ) 수준의 알림을 보냅니다. Server Memory 카테고리: app_host_resource 호스트의 메모리 사용률( mem )이 70%를 초과하면 경고( Warning ) 수준의 알림을, 90%를 초과하면 위험( Critical ) 수준의 알림을 보냅니다. Transaction Error Count 카테고리: app_counter 트랜잭션 에러 건수( tx_error )가 10개를 초과하면 경고( Warning ) 수준의 알림을 보냅니다. Transaction Response Time 카테고리: app_counter 트랜잭션의 평균 응답 시간( resp_time )이 10회 연속, 2,000ms(2초)를 초과한 상태로 지속되면 경고( Warning ) 수준의 알림을 보냅니다. 노트 기본 이벤트 템플릿에 적용된 필드에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "기본 이벤트 템플릿"
},
{
  "url": "https://docs.whatap.io/java/warning-notice-v2",
  "title": "이벤트 설정",
  "content": "이벤트 수정하기. 기본 이벤트 템플릿에 적용된 지표값을 수정해 경고 알림이 발생 기준을 변경할 수 있습니다. 그 외에도 다양한 옵션 설정을 통해 알림 발생 기준을 변경할 수 있습니다. 수정하려는 이벤트 항목에서 버튼을 선택하면 이벤트 수정 화면으로 이동합니다. 다음의 항목을 차례로 수정한 다음 저장 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "이벤트 수정하기"
},
{
  "title": "Liberty",
  "url": "https://docs.whatap.io/java/add-jvm-opt/liberty",
  "content": "Liberty. 와탭 모니터링 솔루션을 Liberty 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Liberty 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Liberty와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Liberty"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/liberty",
  "title": "Liberty",
  "content": "JVM 옵션 추가. Liberty 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. jvm.options 파일에 에이전트 옵션을 추가하세요. 파일이 없는 경우 신규로 생성하세요. -javaagent:/app/whatap/whatap.agent-2.1.1.jar -Dorg.osgi.framework.bootdelegation = whatap.* ## OSGI 프레임워크 설정을 위한 추가 옵션 ## 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/liberty",
  "title": "Liberty",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/liberty",
  "title": "Liberty",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "JEUS",
  "url": "https://docs.whatap.io/java/add-jvm-opt/jeus",
  "content": "JEUS. 와탭 모니터링 솔루션을 JEUS 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 JEUS 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 JEUS와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "JEUS"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jeus",
  "title": "JEUS",
  "content": "JVM 옵션 추가. JEUS 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. JEUS 버전에 따른 시작 옵션의 설정 파일의 경로를 참고해 -javaagent 옵션을 추가하세요. JEUS 7 JEUS 6 $JEUS_HOME/domains/jeus_domain/config.xml < domain > < servers > < server > < name > server1 </ name > < jvm-config > < jvm-option > -Xmx1024m -XX:MaxPermSize=128m -javaagent:/whatap/whatap.agent-X.Y.Z.jar </ jvm-option > </ jvm-config > </ server > </ servers > ... </ domain > $JEUS_HOME/config/$hostname/JEUSMain.xml < node > < name > node01 </ name > < engine-container1 > < name > container1 </ name > ... < command-option > -Xmx1024m -XX:MaxPermSize=128m -javaagent:/whatap/whatap.agent-#.#.#.jar </ command-option > ... </ engine-container1 > </ node > 애플리케이션 서버를 다시 시작하세요. jdown && jboot 애플리케이션 서버 로그 파일과 에이전트 로그 파일을 통해 에이전트가 정상 작동하는지, 에러가 발생하지 않았는지 확인하세요. 로그 파일의 위치는 다음을 참고하세요. 에이전트: $WHATAP_HOME/logs/whatap- {SERVER_NAME} - {DATE} .log JEUS 7: $JEUS_HOME/domains/$HOST_NAME/servers/$NODE_NAME/logs/JeusServer.log JEUS 6: $JEUS_HOME/logs/$NODE_NAME/JeusServer.log 에이전트가 애플리케이션 서버의 종류와 서비스 컨테이너 명을 인식했는지 확인하세요. 노트 와탭 모니터링 서비스 에 로그인한 다음 프로젝트를 선택하세요. 애플리케이션 > 인스턴스 성능 분석 메뉴를 선택한 다음 실행 환경 변수 탭을 선택하세요. whatap.name 과 whatap.type 항목을 확인하세요. whatap.name 항목의 마지막 요소가 컨테이너 이름이어야 합니다. whatap.type 항목에는 애플리케이션 서버의 종류가 명시되어야 합니다. 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jeus",
  "title": "JEUS",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "title": "Jetty",
  "url": "https://docs.whatap.io/java/add-jvm-opt/jetty",
  "content": "Jetty. 와탭 모니터링 솔루션을 Jetty 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Jetty 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Jetty와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Jetty"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jetty",
  "title": "Jetty",
  "content": "JVM 옵션 추가. Jetty 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. jetty.sh 파일에 JVM 옵션 추가 $JETTY_HOME/bin/jetty.sh .. . JAVA_OPTIONS += ( \"-javaagent:/home/vagrant/whatap/whatap.agent-X.Y.Z.jar -Dwhatap.port=8080\" ) usage ( ) { echo \"Usage: ${0 ## * / } [-d] {start|stop|run|restart|check|supervise} [ CONFIGS ... ] \" exit 1 } [ $# -gt 0 ] || usage .. . 쉘 스크립트 없이 Jetty 시작하기 $ java -javaagent:/home/vagrant/whatap/whatap.agent-X.Y.Z.jar -Dwhatap.port = 8080 -jar start.jar & 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jetty",
  "title": "Jetty",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jetty",
  "title": "Jetty",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "Resin",
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "content": "Resin. 와탭 모니터링 솔루션을 Resin 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Resin 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Resin과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Resin"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "JVM 옵션 추가. Resin을 사용하는 애플리케이션 서버 환경에서 JVM 옵션을 추가하는 방법을 확인하세요. Java 버전에 따라 적용해야할 JVM 옵션이 다를 수 있습니다. 사용자의 환경에 맞는 JVM 옵션을 적용하세요. 옵션을 적용한 다음 애플리케이션 서버를 다시 시작하세요. 옵션 1: resin.properties 파일에 jvm_args 속성을 사용해 javaagent 인수를 추가하세요. 옵션 2: conf/resin.conf 또는 conf/resin.xml 파일에 <jvm-args> 섹션을 추가해 -javaagent 인수를 설정하세요. 노트 애플리케이션 서버 로그 파일과 에이전트 로그 파일을 통해 에이전트가 정상 작동하는지, 에러가 발생하지 않았는지 확인하세요. 로그 파일의 위치는 다음을 확인하세요. 에이전트: $WHATAP_HOME/logs/whatap- {SERVER_NAME} - {DATE} .log RESIN 4.x: $RESIN_HOME/log/jvm-app-#.log 에이전트가 정상 작동하지 않거나 에러가 발생한다면 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "Java 6 ~ 8 버전. resin.properties jvm_args : -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar resin.conf | resin.xml < jvmarg > -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar </ jvm-arg >",
  "product": "JAVA 모니터링",
  "header": "Java 6 ~ 8 버전"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "Java 9 ~ 15 버전. resin.properties jvm_args : -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf=true resin.conf | resin.xml < jvmarg > -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar </ jvm-arg > < jvmarg > -Djdk.attach.allowAttachSelf=true </ jvm-arg >",
  "product": "JAVA 모니터링",
  "header": "Java 9 ~ 15 버전"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "Java 16 버전 이상. resin.properties jvm_args : -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf=true --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=jdk.attach/sun.tools.attach=ALL-UNNAMED resin.conf | resin.xml < jvmarg > -javaagent:{WHATAP_HOME}/whatap.agent-X.Y.Z.jar </ jvm-arg > < jvmarg > -Djdk.attach.allowAttachSelf=true </ jvm-arg > < jvmarg > --add-opens=java.base/java.lang=ALL-UNNAMED </ jvm-arg > <!-- Java 17 or later --> < jvmarg > --add-opens=jdk.attach/sun.tools.attach=ALL-UNNAMED </ jvm-arg >",
  "product": "JAVA 모니터링",
  "header": "Java 16 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/resin",
  "title": "Resin",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "AES 256 암호화",
  "url": "https://docs.whatap.io/java/aes-256-encryption",
  "content": "AES 256 암호화. 자바(Java) 에이전트가 수집한 데이터를 서버로 전송할 때 사용하는 암호화 방법을 안내합니다. XOR 연산 및 AES 암호화를 사용하여 데이터 보안을 강화하며, 128비트를 기본 지원하지만, AES 256비트 암호화를 적용하기 위해서는 Java Cryptography Extension(JCE)을 업데이트해야 합니다. AES 256 암호화와탭 애플리케이션 에이전트는 수집한 데이터를 암호화해 서버로 전송합니다. 이를 위해 XOR(Exclusive-OR) 연산과 고급 암호화 표준(Advanced Encryption Standard, 이하 AES) 암호화를 사용하며, 평문을 128비트 단위로 나누어 암복호화를 수행합니다. 256비트까지 확장해 보안을 강화할 수 있습니다. 기본적으로 Java Cryptography Extension(이하 JCE)은 128비트를 지원합니다. AES 256비트를 적용하려면 JCE를 업데이트해야 합니다. 기본 환경에서 AES 256 적용 시 다음과 같이 오류가 발생합니다. Unsupported keysize or algorithm parameters.##혹은,Illegal key size or default parameters. 다음 링크에서 버전에 맞는 파일을 다운로드하세요. 노트자바 버전 별 JCE 다운로드 링크 JAVA 8 JAVA 7 JAVA 6 JAVA 5 JAVA 1.42 $JAVA_HOME/jre/lib/security 경로에 파일을 덮어쓰기하세요. JCE를 적용했다면 ${WHATAP_HOME}/whatap.conf 파일에 다음 설정을 추가하세요. whatap.confcypher_level=256 애플리케이션 서버를 다시 시작하면 ASE 256 암호화를 적용합니다. ",
  "product": "JAVA 모니터링",
  "header": "AES 256 암호화"
},
{
  "title": "애플리케이션 경고 알림",
  "url": "https://docs.whatap.io/java/warning-notice",
  "content": "애플리케이션 경고 알림. 애플리케이션의 자원 사용량 및, 진행 중 트랜잭션, 에러 상황의 이벤트 조건을 통해 경고 알림을 보냅니다. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 애플리케이션 탭 선택 애플리케이션의 자원 사용량과 진행 중 트랜잭션, 에러 상황의 이벤트 조건을 통해 경고 알림을 보냅니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 경고 알림"
},
{
  "url": "https://docs.whatap.io/java/warning-notice",
  "title": "애플리케이션 경고 알림",
  "content": "기본 옵션. 다음은 각 항목별 설정할 수 있는 기본 옵션입니다. 에이전트 비활성화 경고 설정한 시간 동안 에이전트로부터 데이터를 수신할 수 없을 경우 경고 알림을 보냅니다. 토글 버튼을 선택해 기능을 켜거나 끌 수 있습니다. 이벤트 상태가 해결되면 추가 알림 애플리케이션 이벤트 항목 중 발생한 이벤트 상태가 해결되면 추가 알림 송신 여부를 선택할 수 있습니다. 토글 버튼을 선택해 기능을 켜거나 끌 수 있습니다. 에이전트 중복 알림 모니터링 중인 에이전트 가운데 동일한 ID를 설정한 에이전트가 2개 이상일 때 지표를 중복으로 수집하면서 발생하는 경고 알림입니다. 에이전트 이름을 중복으로 설정하지 않았는지 에이전트 설정에서 관련 옵션을 확인하세요. 블루/그린과 같은 배포 상황에서 에이전트가 중복되어 경고 알림이 발생할 경우 이 기능을 이용하길 권장합니다. 같은 이름의 에이전트가 동시에 2개 이상 기동된 경우 선택한 시간 동안 알림을 받지 않습니다. 조건 조건은 경고(Warning) 레벨, 조건은 위험(Critical) 레벨입니다. 지속 선택한 시간 동안 이벤트 조건이 지속될 경우 알림을 보냅니다. 무음 알림을 보낸 후 선택한 시간 동안 같은 알림을 보내지 않습니다. On / Off 토글 버튼을 선택해 발생하는 이벤트를 켜거나 끌 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "기본 옵션"
},
{
  "url": "https://docs.whatap.io/java/warning-notice",
  "title": "애플리케이션 경고 알림",
  "content": "항목별 이벤트 설정. 다음의 이벤트 항목을 설정할 수 있습니다. 서버 CPU , 서버 메모리 , 서버 디스크 각 항목의 사용량이 설정한 조건 (%) 에 설정한 기준치를 도달하면 알림을 보냅니다. 액티브 트랜잭션 액티브 트랜잭션 발생 건수가 조건 ( 건수 ) 에 설정한 기준치를 넘은 상태를 지속하면 알림을 보냅니다. 발생 건수 기본값은 100개 기준입니다. 트랜잭션 에러 정상적으로 수행하지 않은 트랜잭션을 의미합니다. 에러 건수가 조건 ( 건수 ) 에 설정한 기준치를 넘은 상태를 지속하면 알림을 보냅니다. 수집 주기는 5초입니다. 트랜잭션 응답시간 트랜잭션이 끝난 시간으로 확인합니다. 예를 들어 10 초의 응답시간 기준을 넘는 트랜잭션의 건수 가 10 개를 초과하고, 이 상태가 5 초간 지속 되면 알림을 보냅니다.",
  "product": "JAVA 모니터링",
  "header": "항목별 이벤트 설정"
},
{
  "title": "멀티 트랜잭션",
  "url": "https://docs.whatap.io/java/trs-multi-trace",
  "content": "멀티 트랜잭션. 멀티 트랜잭션 추적을 안내합니다. 멀티 트랜잭션은 다른 에이전트나 프로젝트와 연관된 트랜잭션을 의미합니다. 와탭 프로젝트에 등록된 애플리케이션 서비스 간의 호출을 추적하는 것이 멀티 트랜잭션 추적입니다. 정보Java 에이전트는 세 개의 HTTP 헤더 키값(x-wtap-po, x-wtap-mst, x-wtap-sp1)으로 멀티 트랜잭션을 추적합니다. 게이트웨이를 통과하는 HTTP 트랜잭션이 연계 추적이 안 된다면 HTTP 헤더 조건을 확인하세요. 노트멀티 트랜잭션 활성화멀티 트랜잭션을 추적하려면 관리 > 에이전트 설정 메뉴에서 mtrace_enabled 옵션을 true로 설정하세요. 에이전트 설정에 대한 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/trs-multi-trace",
  "title": "멀티 트랜잭션",
  "content": "멀티 트랜잭션 추적. 홈 화면 > 프로젝트 선택 > 분석 > 히트맵 메뉴에서 차트 영역을 드래그하세요. 드래그한 차트 영역의 트랜잭션 정보가 다음과 같이 하단 TX 트레이스 목록에 나타납니다. 목록에서 멀티 트랜잭션을 포함한 트랜잭션은 아이콘이 표시됩니다. 해당 트레이스를 선택하면 트랜잭션 정보 창이 나타납니다. 멀티 트랜잭션이 추적되는 경우 레코드 요약 탭에서 멀티 트랜잭션 ID 값을 확인할 수 있습니다. 트랜잭션에서 외부 호출을 하는 경우에도 동일한 멀티 트랜잭션 ID 가 생성됩니다. 서비스별로 프로젝트가 분리되어 있더라도 처음 발급한 멀티 트랜잭션 ID 를 통해 애플리케이션 간의 모든 트랜잭션을 확인할 수 있습니다. 트랜잭션 정보 창을 활용한 TX 트레이스 상세 분석에 관한 자세한 내용은 다음 문서 를 참조하세요. 멀티 트랜잭션 ID 를 선택하면 멀티 트랜잭션 탭으로 이동합니다. 시스템 내 또는 시스템 간에 발생하는 다양한 호출 관계를 한 눈에 파악하고 어느 부분에서 문제가 발생했는지 식별하여 개선할 수 있도록 트랜잭션과 트레이스 정보를 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션 추적"
},
{
  "url": "https://docs.whatap.io/java/trs-multi-trace",
  "title": "멀티 트랜잭션",
  "content": "차트. 멀티 트랜잭션 추적 메뉴의 기본 화면은 차트 입니다. 차트 는 각 트랜잭션의 호출 관계를 빠르고 명확하게 사용자에게 제공합니다. 동일한 멀티 트랜잭션 ID 를 갖는 트랜잭션 서비스들의 개별 수행 시간을 확인할 수 있습니다. 트랜잭션 노드의 배경색으로 표현되어 있는 소요 시간( 타임바 )를 통해 트랜잭션 간 호출 관계를 확인할 수 있습니다. 차트 에서는 마우스를 이용해 원하는 위치로 이동하거나 스크롤을 통해서 확대, 축소할 수 있습니다. 프로젝트 선택 : 차트에 표시될 프로젝트를 선택하거나 해제할 수 있습니다. 차트 뷰 설정 : 차트에 표시할 요소를 표시하거나 숨길 수 있습니다. 타임바 : 각 노드에 소요 시간( 타임바 )를 표시하거나 숨길 수 있습니다. 애플리케이션명 : 각 노드에 에이전트 이름(oname)을 표시하거나 숨길 수 있습니다. 프로젝트 : 각 노드에 프로젝트 이름을 표시하거나 숨길 수 있습니다. 데이터베이스 / 외부 호출 / 내부 호출 : 해당 트랜잭션에서 발생한 다른 데이터베이스 커넥션 요청이나 HTTP Call의 정보 또한 차트의 노드로 확인할 수 있습니다. 트랜잭션 노드를 선택하면 다음과 같이 트랜잭션 정보 창이 추가로 나타납니다. 트랜잭션 트레이스를 통해 해당 트랜잭션의 상세 내역을 확인할 수 있습니다. 트랜잭션 정보 창을 활용한 트랜잭션 트레이스 상세 분석에 관한 자세한 내용은 다음 문서 를 참조하세요",
  "product": "JAVA 모니터링",
  "header": "차트"
},
{
  "url": "https://docs.whatap.io/java/trs-multi-trace",
  "title": "멀티 트랜잭션",
  "content": "테이블. 테이블 버튼을 선택하면 테이블 형식으로 멀티 트랜잭션 내에 포함된 각 트랜잭션 별 정보를 확인할 수 있습니다. 프로젝트 선택 : 차트에 표시될 프로젝트를 선택하거나 해제할 수 있습니다. 컬럼 설정 : 테이블 내 컬럼을 편집할 수 있습니다. 각 트랜잭션 항목을 선택하면 차트 노드 선택과 마찬가지로 선택한 트랜잭션에 대한 트랜잭션 정보 창이 나타납니다. 트랜잭션 트레이스를 통해 해당 트랜잭션의 상세 내역을 확인할 수 있습니다. 트랜잭션 정보 창을 활용한 트랜잭션 트레이스 상세 분석에 관한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "테이블"
},
{
  "url": "https://docs.whatap.io/java/trs-multi-trace",
  "title": "멀티 트랜잭션",
  "content": "트리. 트리 버튼을 선택하면 각 트랜잭션과 그에 속해 있는 트레이스의 세부 정보를 확인할 수 있습니다. 전체 트랜잭션 소요 시간 내의 각 하위 트랜잭션이나 트레이스의 시작 및 소요 시간을 시각화해 트랜잭션 호출 관계를 트리 형식으로 제공합니다. 프로젝트 선택 : 차트에 표시될 프로젝트를 선택하거나 해제할 수 있습니다. 한 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 한 줄로 표시해 트리 형식을 간격하게 정리할 수 있습니다. 여러 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 줄바꿈해 모두 표시합니다. 최장 경로 : 가장 긴 경로로 이동할 수 있습니다. 시간바 표시 : 경과 시간을 막대 형식의 차트로 표시합니다. 시간 표시 : 각 구간별 타임 스탬프, 갭, 경과 시간을 텍스트 형식으로 표시합니다. 8초 이상: 초과 지연 상태로 빨간색 으로 표현합니다. 3초 이상 8초 미만: 지연 상태로 주황색 으로 표현합니다. 3초 미만: 정상 상태로 파란색 으로 표현합니다. 노트 시작 및 소요 시간의 경우 트랜잭션 호출 환경에 따라 발생하는 시차를 상위 트랜잭션 내 트레이스와 매핑을 통해 보정하여 표현하기 때문에 실제 수집된 시간 데이터와 차이가 발생할 수 있습니다. 시간 숨기기 : 시간 정보를 숨깁니다. 노트 해당 트레이스의 버튼 또는 버튼을 선택하면 HTTP 호출 통계 , 액티브 스택 등의 요약 창을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트리"
},
{
  "title": "트랜잭션 분석하기",
  "url": "https://docs.whatap.io/java/trs-view",
  "content": "트랜잭션 분석하기. 트랜잭션 관련 메뉴 화면을 안내합니다. ",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 분석하기"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "히트맵. 홈 화면 > 프로젝트 선택 > 분석 > 히트맵 와탭 모니터링 서비스 초기 화면에서 프로젝트를 선택한 다음 프로젝트 메뉴 하위에 분석 > 히트맵 메뉴를 선택하세요. 노트 히트맵 은 대시보드 > 애플리케이션 대시보드 의 히트맵 위젯을 통해 접근할 수도 있습니다.",
  "product": "JAVA 모니터링",
  "header": "히트맵"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": " 에이전트 영역. 현재 프로젝트와 연결된 에이전트를 선택해 필터링할 수 있습니다. 돋보기 아이콘을 선택하면 영역에서 히트맵 트랜잭션 차트를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": " 에이전트 영역"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": " 히트맵 트랜잭션 차트. 지연 문제가 있는 트랜잭션이 포함된 경우 히트맵 트랜잭션 차트에서 주황색 이나 붉은색 으로 표시됩니다. 정상 트랜잭션만 포함된 경우 파란색 으로 표시됩니다.",
  "product": "JAVA 모니터링",
  "header": " 히트맵 트랜잭션 차트"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": " 선택 영역. 실시간 히트맵 차트를 드래그하면 선택 영역의 에이전트 목록 과 트랜잭션 정보를 확인할 수 있는 TX 트레이스 목록이 나타납니다.",
  "product": "JAVA 모니터링",
  "header": " 선택 영역"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": " 에이전트 목록. 차트에서 선택된 영역에 포함되는 트랜잭션 수와 에러 수를 확인할 수 있습니다. 목록 중에서 원하는 애플리케이션을 선택하면 그 애플리케이션의 TX 트레이스 목록에 세부 정보가 나타납니다.",
  "product": "JAVA 모니터링",
  "header": " 에이전트 목록"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": " TX 트레이스 목록. TX 트레이스 목록은 세부 정보를 가지고 있습니다. 목록에서 원하는 트랜잭션을 선택하면 통계 정보 창이 나타납니다. 통계 창에서 해당 트랜잭션의 트레이스 상세 분석을 확인할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": " TX 트레이스 목록"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "히트맵 패턴의 이해. 히트맵은 트랜잭션의 종료시간은 X축, 응답시간은 Y축으로 한 분포 차트입니다. 정상적인 웹 애플리케이션이라면 수 초 이하 구간에 집중된 분포를 보입니다.",
  "product": "JAVA 모니터링",
  "header": "히트맵 패턴의 이해"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "히트맵 라인 분석하기. 세로줄(LOCK 현상) 패턴 트랜잭션 처리 중 일시적인 락(Not only DB Lock)이 발생하면 이로 인해 처리를 대기합니다. 락이 해소되면 처리 대기 중 트랜잭션들은 비슷한 시간대에 함께 종료됩니다. 그러면 다음과 같이 세로로 줄이 만들어집니다. 세로줄 패턴으로 락을 감지하는 것은 매우 강력한 개념입니다. 특히 마이크로 서비스 아키텍처에서는 백엔드 시스템에서 발생하는 LOCK도 동일하게 감지될 수 있습니다. Front 애플리케이션의 응답 패턴 세로줄은 Back-End 시스템이 사용하는 DB에서 락이 발생한 경우에도 감지됩니다. 가로줄(타임아웃) 패턴 10초 타임아웃 조건에서 해당 자원이 부족하면 트랜잭션들은 10초 대기 후 타임아웃 에러가 발생합니다. 이때 히트맵 10초 부근에 다음과 같이 가로줄이 생깁니다. 타임아웃 이후 재시도하는 로직이 있다면 그림처럼 가로라인이 10초 단위로 반복됩니다. 다음은 실제 장애 상황 의 히트맵입니다. (1) 구간에서 응답시간이 급증했고 (2) 구간의 빨간 라인은 전형적인 가로 라인 패턴 입니다. (1) 구간 부하 발생으로 ConnectionPool이 소진되고 (2) 구간은 ConnectionPool 부족으로 2차 타임아웃 장애가 발생한 상황입니다.",
  "product": "JAVA 모니터링",
  "header": "히트맵 라인 분석하기"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "패턴 분석 활용. 트랜잭션 응답분포에 줄이 보인다는 것은 병목이 있다는 것입니다. 일시적인 락킹이면 세로줄이 그 병목이 타임아웃으로 빠지면 가로 줄이 만들어집니다. 문제를 분석할 때 라인에 포함된 트랜잭션만을 선택적으로 분석해서 문제를 빠르게 찾아낼 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "패턴 분석 활용"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "머신러닝 기반 응답 패턴 분석. 머신러닝 기술을 통해 히트맵 패턴을 분석 후 비정상 여부를 자동 감지해 경고를 발행하는 기능입니다.",
  "product": "JAVA 모니터링",
  "header": "머신러닝 기반 응답 패턴 분석"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "비정상 패턴 예시. 월 수백 TB의 성능 데이터로부터 비정상 패턴을 학습하고 학습된 비정상 패턴과 유사한 패턴이 발생하는 경우 이에 대한 알람을 발행합니다. 세로줄 패턴 가로줄 패턴 복합 패턴 히트맵 알람 노트 히트맵 트랜잭션 차트를 분석하는 방법에 대한 자세한 설명은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "비정상 패턴 예시"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "Java 에이전트의 예외 처리(. Java 언어를 사용하는 애플리케이션 환경에서 발생하는 에러를 Java 에이전트가 예외 처리하는 기준에 대해서 안내합니다. 다음 내용은 Java 에이전트 v2.2.27 기준으로 작성되었습니다.",
  "product": "JAVA 모니터링",
  "header": "Java 에이전트의 예외 처리("
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "서비스 화면에서 에러 표시. 히트맵 위젯, 트레이스 분석 창을 통해서 확인할 수 있는 에러 단계 는 대부분 WARNING 수준에 해당합니다.",
  "product": "JAVA 모니터링",
  "header": "서비스 화면에서 에러 표시"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "Spring ExceptionHandler 통과 시 에러 처리. Spring 프레임워크에서는 org.springframework.web.servlet.DispatcherServlet.processHandlerException 메소드를 통과하는 경우 에러로 처리합니다. 다만 개발자가 Try-Catch 문을 사용하는 경우 ExceptionHandler 를 통과하지 않으므로 와탭에서는 에러 처리하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "Spring ExceptionHandler 통과 시 에러 처리"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "Status Code 400 이상 에러 처리. HTTP 응답 코드가 400 이상인 경우에는 예외 클래스(Exception Class)가 발생하지 않더라도 에러로 처리합니다.",
  "product": "JAVA 모니터링",
  "header": "Status Code 400 이상 에러 처리"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "JDBC driver 호출 시 에러 처리. JDBC 연결 호출이나 SQL 실행 호출 시에 발생하는 에러는 에러로 처리됩니다.",
  "product": "JAVA 모니터링",
  "header": "JDBC driver 호출 시 에러 처리"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "HTTP call 에러 처리. HTTP 호출 중 발생하는 에러는 SLOW_HTTPC , httpc error 등의 형태로 표시됩니다.",
  "product": "JAVA 모니터링",
  "header": "HTTP call 에러 처리"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "와탭 에러 처리. 와탭 모니터링 서비스에서는 특정한 조건에 따라 에러로 처리합니다. TOO_MANY_RECORDS : fetch 건수 10000건 이상 SLOW_SQL : SQL 시간 30000ms 이상 SLOW_HTTPC : HTTP call 경과 시간이 10000ms 이상 httpc error : HTTP call status code 400 이상인 경우 status error : 트랜잭션 status code 400 이상인 경우",
  "product": "JAVA 모니터링",
  "header": "와탭 에러 처리"
},
{
  "url": "https://docs.whatap.io/java/trs-view",
  "title": "트랜잭션 분석하기",
  "content": "트랜잭션 에러 단계 INFO 처리. 에이전트 설정을 통해서 일부 에러를 정상 상태로 표시하거나 무시할 수 있습니다. 히트맵 위젯에서 표시되는 레벨은 INFO (파란색)입니다. 노트 에이전트 설정은 whatap.conf 파일을 편집하거나 관리 > 에이전트 설정 메뉴에서 확인할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요. biz_exceptions : 레코드 에러 표시 whatap.conf biz_exceptions = io.home.test.baseapp.base.exception.custom.CustomParameterizedException ignore_exceptions : 레코드 에러 미표시 whatap.conf ignore_exceptions = org.springframework.web.util.NestedServletException status_ignore whatap.conf status_ignore = 408,500,200 httpc_status_ignore whatap.conf httpc_status_ignore = 403,401 status_ignore_set whatap.conf status_ignore_set = /api/posts/test/timeout:200,/error:500 httpc_status_url_ignore_set whatap.conf httpc_status_url_ignore_set = /api/posts/test/timeout:408,/api/apache/httpclient/posts/timeout:500",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 에러 단계 INFO 처리"
},
{
  "title": "트랜잭션 엔드포인트 설정",
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "content": "트랜잭션 엔드포인트 설정. 트랜잭션 엔드포인트 설정을 안내합니다. 트랜잭션 엔드포인트는 트랜잭션의 시작 메소드입니다. HTTP 트랜잭션의 경우에는 HttpServlet.service() 혹은 Filter.doFilter()가 트랜잭션의 시작점이고 이곳을 트랜잭션 엔드 포인트라고 부릅니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 엔드포인트 설정"
},
{
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "title": "트랜잭션 엔드포인트 설정",
  "content": "NON HTTP 추적. 트랜잭션 엔드포인트로 지정된 메소드가 시작해서 종료될 때까지의 성능을 트랜잭션 성능이라고 합니다. Non http 트랜잭션을 추적하기 위해서는 엔드포인트 를 지정해야 합니다. 노트 엔드포인트 찾기 트랜잭션이 호출될 것으로 추정되는 모든 메소드에 대해 트레이스 추적을 설정하세요. 다시 시작 후 트랜잭션을 발생시켜 모니터링하세요. back stack 옵션을 켜서 진입 메소드를 정확히 파악하세요.",
  "product": "JAVA 모니터링",
  "header": "NON HTTP 추적"
},
{
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "title": "트랜잭션 엔드포인트 설정",
  "content": "대상 선정. 메소드 트레이스 설정 메소드 트레이스를 설정하세요. 확실하게 트랜잭션에서 호출되는 클래스를 지정하세요. DB를 사용하는 프로그램에서는 JDBC 드라이버 가 유용합니다. whatap.conf hook_method_patterns = jdbc.*.* hook_method_access_public_enabled = true hook_method_access_protected_enabled = true hook_method_access_none_enabled = true 트랜잭션 시작 옵션 설정 메소드가 호출되면 트랜잭션을 시작하세요. 트랜잭션 시작 옵션과 트랜잭션 시작 시 스택을 덤프하는 옵션을 켜세요. whatap.conf trace_auto_transaction_enabled = true trace_auto_transaction_backstack_enabled = true 재시작 후 트레이스 분석 다시 시작하세요. 이후 서비스를 호출하면 트랜잭션이 추적되는 것을 볼 수 있습니다. 트랜잭션을 조회하면 jdbc.* 로 시작하는 모든 클래스의 메소드가 이 트랜잭션으로 나타나는 것을 알 수 있습니다. 트랜잭션 트레이스를 조회하면 TRANSACTION BACKSTACK 라는 메시지 스텝을 확인할 수 있습니다. TRANSACTION BACKSTACK jdbc.FakePreparedStatement.executeQuery ( FakePreparedStatement.java ) , com.virtual.dao.SelectDAO.execute2 ( SelectDAO.java:29 ) , com.virtual.web.SimulaNonHttp.execute ( SimulaNonHttp.java:147 ) , com.virtual.web.SimulaNonHttp.process ( SimulaNonHttp.java:76 ) , com.virtual.web.SimulaNonHttp.run ( SimulaNonHttp.java:100 ) 스택 내용 확인 스택 내용을 확인하면 어떤 메소드로부터 출발하고 있는지 추정할 수 있습니다. Example com.virtual.web.SimulaNonHttp.execute ( SimulaNonHttp.java:147 ) , com.virtual.web.SimulaNonHttp.process ( SimulaNonHttp.java:76 ) , com.virtual.web.SimulaNonHttp.run ( SimulaNonHttp.java:100 ) 위 3개의 메소드 중에 하나를 트랜잭션 시작점으로 판단할 수 있습니다. 이 상황에서는 역 컴파일을 수행해서 적절한 트랜잭션 엔드포인트 를 결정해야 합니다. 로직을 보면 SimulaNonHttp.run 내에서 while() 가 돌면서 SimulaNonHttp.process() 을 호출하고 SimulaNonHttp.execute() 가 수행됩니다. process() 가 적당하다는 것을 알 수 있습니다. 이 부분은 소스를 보고 판단해야 합니다. 팁 엔드포인트 의 가장 중요한 기준은 종료되어야 한다는 것 입니다. 정상적인 상황에서 지연되지 않고 곧바로 종료되어야 성능적인 판단을 할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "대상 선정"
},
{
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "title": "트랜잭션 엔드포인트 설정",
  "content": "트랜잭션 엔드포인트 지정. 트랜잭션 시작 지점을 다음과 같이 설정하세요. whatap.conf hook_service_patterns = com.virtual.web.SimulaNonHttp.process 애플리케이션을 다시 시작하세요. process() 메소드가 새로운 트랜잭션의 엔드포인트 가 됩니다. 노트 hook_service_patterns 옵션은 와일드카드 문자를 사용할 수 없으며, 2개 이상의 값을 설정하려면 쉼표(,)를 구분자로 이용하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 엔드포인트 지정"
},
{
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "title": "트랜잭션 엔드포인트 설정",
  "content": "트랜잭션 이름 정의. 일반적으로 메소드 명칭으로 트랜잭션을 구분할 수 있습니다. whatap.conf service_name_mode = [full,class,method,string,arg] service_name_index = 0 service_name_mode full , class , method , string , arg 5가지 옵션을 지정할 수 있습니다. full : Full Class 이름을 서비스 명으로 사용합니다. class : Class 이름을 서비스 명으로 사용합니다. method : Method 이름을 서비스명으로 사용합니다. string : 문자열 중에서 첫 번째 파라미터를 서비스 명으로 사용합니다. arg : 파라미터 중에서 service_name_index 옵션에 지정한 인덱스에 파라미터를 서비스 명으로 사용합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 이름 정의"
},
{
  "url": "https://docs.whatap.io/java/trs-endpoint-setting",
  "title": "트랜잭션 엔드포인트 설정",
  "content": "플러그인 사용. 주의 플러그인은 충분히 이해한 경우에만 사용하길 권장합니다. WHATAP_HOME 경로 아래에 plugin 폴더를 만드세요. 그리고 vi를 통해 AppServiceStart.x 파일을 만드세요. println(\"test\"); 라고 타이핑하고 저장하면 화면에 \"test\"라는 문자열이 출력되는 것을 확인할 수 있습니다. 확인 후 파라미터에서 정보를 추출하세요. 예시에서는 파라미터가 HashMap에 전달되고 거기에 url 파라미터가 전달되고 있습니다. Object url = ( ( java . util . HashMap ) $point . getArgs ( ) [ 0 ] ) . get ( \"url\" ) ; $ctx . service ( ( String ) url ) ; //println(\"url=\"+url); 이렇게 플러그인을 만들면 트랜잭션 이름이 변경됩니다.",
  "product": "JAVA 모니터링",
  "header": "플러그인 사용"
},
{
  "title": "에이전트 업데이트",
  "url": "https://docs.whatap.io/java/update-agent",
  "content": "에이전트 업데이트. 자바(Java) 에이전트를 최신 버전으로 업데이트하는 과정을 안내합니다. 최신 에이전트를 다운로드하고 애플리케이션 서버를 재시작하여 업데이트를 적용하는 방법을 포함합니다. 또한, 안정적인 시스템 종료를 위해 앱 종료, 에이전트 JAR 파일 변경, 앱 시작 순서에 따라 업데이트하는 절차를 확인할 수 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "에이전트 업데이트"
},
{
  "url": "https://docs.whatap.io/java/update-agent",
  "title": "에이전트 업데이트",
  "content": "최신 버전 에이전트 다운로드. 와탭 모니터링 서비스 로 이동해 로그인하세요. 에이전트를 업데이트할 프로젝트를 선택하세요. 왼쪽 메뉴에서 관리 > 에이전트 업데이트 를 선택하세요. 최신 버전 또는 최신 버전으로 모든 에이전트에 다운로드 버튼을 클릭하세요. 에이전트를 다운로드한 다음 애플리케이션 서버를 다시 시작하세요. 업데이트를 자동 적용합니다.",
  "product": "JAVA 모니터링",
  "header": "최신 버전 에이전트 다운로드"
},
{
  "url": "https://docs.whatap.io/java/update-agent",
  "title": "에이전트 업데이트",
  "content": "에이전트 업데이트 자동 설정. 자바 에이전트를 업데이트하려면 서버를 재시작해야 합니다. 재시작 이전에 whatap.agent.jar 파일이 변경되면 애플리케이션 서버가 재시작되는 과정에서 안정적인 시스템 종료(shutdown)를 실패할 수 있습니다. 원칙적으로 자바 에이전트를 업데이트 하기 위해서는 다음의 순서로 진행해야 합니다. app shutdown agent jar 변경 app start 위 과정을 보다 쉽게 처리하기 위해 와탭의 에이전트 jar 파일명에는 버전 번호를 포함합니다. 업데이트 과정에서 최신 버전을 자동 적용하도록 설정하는 것이 중요합니다. ########## WHATAP ############ WHATAP_HOME = /whatap WHATAP_JAR = ` ls $ { WHATAP_HOME } /whatap.agent-*.jar | sort -V | tail -1 ` JAVA_OPTS = \" ${JAVA_OPTS} -javaagent: ${WHATAP_JAR} \" ########## WHATAP ############",
  "product": "JAVA 모니터링",
  "header": "에이전트 업데이트 자동 설정"
},
{
  "title": "에이전트 삭제 및 롤백",
  "url": "https://docs.whatap.io/java/uninstall-agent",
  "content": "에이전트 삭제 및 롤백. 자바(Java) 에이전트를 제거하거나 이전 버전으로 되돌리는 과정을 안내합니다. 에이전트를 삭제할 때는 -javaagent JVM 옵션을 제거하고 서버를 재시작하는 단계, 환경 변수를 정리하는 과정을 포함합니다. ",
  "product": "JAVA 모니터링",
  "header": "에이전트 삭제 및 롤백"
},
{
  "url": "https://docs.whatap.io/java/uninstall-agent",
  "title": "에이전트 삭제 및 롤백",
  "content": "에이전트 삭제. 애플리케이션 서버에서 JVM 옵션의 -javaagent 설정을 삭제한 다음 서버를 다시 시작하세요. 이후 $WHATAP_HOME 환경 변수를 삭제하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 삭제"
},
{
  "url": "https://docs.whatap.io/java/uninstall-agent",
  "title": "에이전트 삭제 및 롤백",
  "content": "에이전트 롤백. 와탭 모니터링 서비스 에서 롤백을 원하는 프로젝트를 선택하세요. 왼쪽 메뉴에서 관리 > 에이전트 업데이트 를 선택하세요. 다른 버전들 버튼을 선택하세요. 롤백을 원하는 버전을 선택한 다음 선택된 버전 또는 선택된 버전으로 모든 에이전트에 다운로드 버튼을 클릭하세요. 에이전트를 설치할 때 수정한 스크립트에서 WHATAP_JAR 환경 변수를 롤백하려는 버전으로 변경하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 롤백"
},
{
  "title": "트랜잭션 검색",
  "url": "https://docs.whatap.io/java/tx-profile",
  "content": "트랜잭션 검색. 개별 트랜잭션의 성능 속성을 기반으로 원하는 트랜잭션을 검색할 수 있습니다. 홈 화면 > 프로젝트 선택 > 분석 > 트랜잭션 검색 특정 기간 동안 각 트랜잭션의 성능 속성에 대한 통계와 실행 상태를 검색할 수 있습니다. 모든 트랜잭션을 확인하고 정상 및 에러 상태를 빠르게 확인할 수 있습니다. 제공되는 정보를 통해 어떤 트랜잭션의 사용량이 많고 리소스를 많이 소비하는지 알 수 있습니다. 트랜잭션의 속성에 따라 다양하게 필터링할 수 있어 특정 조건의 트랜잭션을 찾는데 유용합니다.  조회 시간을 설정한 다음 애플리케이션 옵션에서 조회 대상을 선택하세요.  버튼을 선택하면 검색 결과가 테이블에 표시됩니다. 결과 목록에서 원하는 항목을 선택하면 트랜잭션 정보 창이 나타납니다. 트랜잭션 정보 창을 활용한 트랜잭션 트레이스 상세 분석에 관한 자세한 내용은 다음 문서를 참조하세요. 노트 에러 상태의 트랜잭션만 검색하려면 에러만 보기를 클릭한 다음  버튼을 선택하세요. 검색 조건에 따라 응답 지연이 발생할 수 있기 때문에 검색 시간을 가급적 짧게 설정할 것을 권고합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 검색"
},
{
  "url": "https://docs.whatap.io/java/tx-profile",
  "title": "트랜잭션 검색",
  "content": "컬럼 편집하기. 결과 조회 시 컬럼 선택 버튼을 클릭하면 확인이 필요한 컬럼을 적절하게 선택할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "컬럼 편집하기"
},
{
  "url": "https://docs.whatap.io/java/tx-profile",
  "title": "트랜잭션 검색",
  "content": "필터 적용하기. 상세 검색을 위해 필터를 이용하세요. 여러 개의 검색 조건에 의한 데이터 탐색 방식을 지원합니다. 필터를 설정한 다음 버튼을 선택하세요. 노트 일부 필터 항목은 상품에 따라 지원하지 않을 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "필터 적용하기"
},
{
  "title": "트랜잭션 트레이싱",
  "url": "https://docs.whatap.io/java/trs-profile",
  "content": "트랜잭션 트레이싱. 트랜잭션 트레이싱을 안내합니다. ",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 트레이싱"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "트랜잭션 트레이싱이란?. 트랜잭션 성능이 트랜잭션 시작과 종료 사이의 요약 지표들이나 속성들을 의미한다면 트랜잭션 트레이스는 트랜잭션이 수행되는 과정 중인 스텝들을 추적하는 것입니다. 트랜잭션이 느리거나 오류가 있다면 그 원인을 추적하기 위해서 수행 이력을 스텝별로 추적해야 합니다. 이것을 트랜잭션 트레이싱 이라고 합니다. 트랜잭션 성능 추적을 위해 수집하는 스텝의 종류는 다음과 같습니다. DB 연결 스텝 START-END RDB에 대한 연결에 대한 성능을 포함합니다. 스텝 정보에는 이름, 응답시간, 에러를 포함합니다. SQL 스텝 START-END JDBC SQL에 대한 성능을 포함합니다. 스텝 정보에는 연결 정보, SQL문, 에러가 포함되어 있습니다. HTTP Call 스텝 START-END 외부 http 서비스 호출에 대한 성능을 포함합니다. 스텝 정보에는 url, host, port, 응답시간, 에러가 포함됩니다. Message 스텝 ADD 트레이스를 수집하는 과정에서 비정형적인 모든 구간에 대한 이력을 수집할 때 메시지 스텝을 사용합니다. SOCKET 스텝 ADD Socket 오픈을 표현하는 스텝입니다. METHOD 스텝 START-END 메소드 응답시간을 추적합니다. ACTIVE STACK 스텝 START-END 액티브 스택에 대한 정보를 포함합니다. 별도 스레드가 생성하여 트레이스에 추가하는 방식으로 수집합니다. 노트 와탭 모니터링 서비스에서 스텝 ( Step )은 스팬 ( Span )과 같은 뜻으로 사용됩니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 트레이싱이란?"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "상세 분석. 홈 화면 > 프로젝트 선택 > 분석 > 히트맵 시간 선택 에서 히트맵을 조회할 기간을 선택하세요. 구분 , 애플리케이션 에서 조회 대상을 선택하세요. 버튼을 선택하세요. 히트맵 트랜잭션 에서 원하는 영역을 과 같이 드래그하세요. TX 트레이스 에 목록이 나타나면 분석하기 원하는 트랜잭션 항목을 선택하세요. 트랜잭션의 성능 분석을 위한 클라이언트 정보 등의 속성, 트랜잭션의 처리 성능, 각 구간별 상세 수행 이력 등을 확인할 수 있는 트랜잭션 정보 창이 나타납니다. 노트 히트맵 메뉴의 기능에 대한 자세한 내용은 다음 문서 를 참조하세요. 애플리케이션 대시보드의 히트맵 위젯에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "상세 분석"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "트랜잭션 정보 창 안내. 영역에서는 스텝 정보를 다양한 형식으로 확인할 수 있습니다. 원하는 형식의 탭을 선택하세요. 영역에서는 트랜잭션에 대한 기본 정보를 확인할 수 있습니다. : 해당 URL 또는 각 수행 구간의 통계 데이터 창이 나타납니다. 통계 데이터 창에서 상세 > 버튼을 선택하면 통계/보고서 > 통계 메뉴로 이동합니다. 노트 통계 메뉴에 대한 자세한 내용은 다음 문서 를 참조하세요. SQL 스텝을 선택하면 SQL 변수와 HTTP 쿼리를 조회할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 정보 창 안내"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "테이블 뷰. 테이블 뷰 탭에서는 트랜잭션의 수행 과정을 시간의 순서대로 확인할 수 있습니다. 트랜잭션을 수행 구간별로 분류해 다이어그램을 통해 확인할 수 있습니다. 전체 경과 시간 중 각 구간별 소요된 시간, 가장 오래 소요된 구간을 빠르게 파악할 수 있습니다. 다이어그램의 각 구간을 선택하면 해당 스텝이 위치한 테이블 목록으로 이동합니다. 빨간색 원( )이 위치한 영역은 액티브 스택이 수집된 순간입니다. 빨간색 원을 선택하면 액티브 스택 버튼이 위치한 테이블 목록으로 이동할 수 있습니다. 액티브 스택 버튼을 선택하면 해당 구간 동안 수행된 스텝 정보를 확인할 수 있습니다. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 액티브 스택에 대한 자세한 내용은 다음 문서 를 참조하세요. 컬럼 선택 : 테이블 목록에 컬럼으로 메모리 누적 정보 및 CPU 누적 정보를 추가하거나 감출 수 있습니다. 컬럼 정보는 다음과 같습니다. No : 스텝의 발생 순서 시간 : 각 스텝의 시작 시각 갭 : 해당 스텝의 시작 시각부터 다음 스텝으로 넘어가기까지 대기 시간, 외부 요인으로 지연될 경우 경과 시간과 차이가 있을 수 있습니다. 경과 : 각 메소드 시작부터 종료까지 총 소요 시간 내용 : 해당 스텝의 세부 수행 내용 TXT : 트랜잭션 기본 정보 및 구간별 수행 정보를 txt 형식의 파일로 다운로드할 수 있습니다. SQL : 트랜잭션 기본 정보 및 SQL 수행 정보를 txt 형식의 파일로 다운로드할 수 있습니다. : 트랜잭션 요약 정보와 다이어그램을 감추고 테이블 목록만 확인할 수 있습니다. 버튼을 선택하면 감춰진 정보를 다시 표시합니다. 테이블 목록이 긴 경우 이 기능을 이용하면 유용합니다. SQL 스텝을 선택하면 파라미터를 조회할 수 있는 SQL 창이 나타납니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "테이블 뷰"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "레코드 요약. 트랜잭션의 기본 정보를 확인하려면 레코드 요약 탭을 선택하세요. 트랜잭션의 기본 정보 및 해당 트랜잭션이 수행된 에이전트 관련 정보, 메모리 할당 사용량, 클라이언트 관련 정보를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "레코드 요약"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "트랜잭션 속성. 분류 속성 설명 에이전트 에이전트 명 ( oname ) 에이전트 오브젝트 이름 에이전트 ID (oid) 에이전트 오브젝트 아이디 에이전트 그룹 명 okind 옵션으로 설정된 에이전트 그룹 이름 에이전트 그룹 ID 에이전트 그룹 아이디 에이전트 서버 명 ondoe 옵션으로 설정한 에이전트 서버 이름 에이전트 서버 ID 에이전트 서버 아이디 프로젝트 코드 와탭 모니터링 서비스에 등록한 프로젝트의 식별 코드 트랜잭션 트랜잭션 ID 트랜잭션 아이디 시작 시간 트랜잭션 시작 시각 종료 시간 트랜잭션 종료 시각 경과 시간 트랜잭션 수행 시간 HTTP 메소드 HTTP 메소드 - GET, POST, PUT, HEAD 등 HTTP 호출 시간 외부 Http Call 시간 HTTP 호출 건수 외부 HTTP Call 건수 DB 연결 시간 DB와 연결된 시간 SQL 시간 SQL 수행 시간 SQL 건수 SQL 수행 건수 SQL 패치 시간 레코드를 조회하는 데 걸린 시간 (중첩이 발생하거나 타 로직이 포함될 수 있음) SQL 패치 건수 SQL에서 데이터를 조회한 레코드 건수 멀티 트랜잭션 CallerUrl 부모 트랜잭션의 트랜잭션 주소 CallerPcode 부모 트랜잭션이 수집된 프로젝트 코드 CallerOid 부모 트랜잭션의 에이전트 오브젝트 아이디 CallerOName 부모 트랜잭션의 에이전트 이름 CallerOkind 부모 트랜잭션의 에이전트 그룹 ID CallerOkindName 부모 트랜잭션의 에이전트 그룹 이름 자원 CPU 사용 시간 트랜잭션이 사용한 CPU 사용량 메모리 할당량 트랜잭션이 사용한 메모리 사용량 클라이언트 클라이언트 IP 클라이언트의 IP 주소 도메인 클라이언트가 접속한 IP 주소에 지정된 인터넷 주소 WClientID 클라이언트의 ID 국가 클라이언트의 국가 정보 도시 클라이언트의 국가 내 도시 정보 운영체제 브라우저가 실행되는 운영 체제 환경 클라이언트 타입 클라이언트가 이용한 브라우저 종류 클라이언트 명 클라이언트가 이용한 기기 이름 상태 클라이언트의 요청에 대한 HTTP 상태 코드 Referer 클라이언트가 브라우저에서 이전에 이용한 페이지 주소 또는 유입 경로 원본 URL/트랜잭션 트랜잭션 이름과 원본 URL의 조합 데이터 원본 URL이 있을 경우 원본 URL 표시, 원본 URL이 없을 경우 트랜잭션 표시 유저 에이전트 클라이언트 관련 정보를 추출하는데 이용하는 브라우저 정보 노트 애플리케이션 종류나 설정, 스텝의 종류에 따라 수집하는 정보는 달라질 수 있습니다. 와탭은 클라이언트와 관련한 정보를 기본 저장합니다. 사용자 데이터 수집과 관련한 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 속성"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "트리 뷰. 트랜잭션 수행 과정을 트리 형식으로 확인하려면 트리뷰 탭을 선택하세요. 각 트랜잭션과 그에 속한 트레이스의 세부 정보, 트레이스의 시작 시간 및 소요 시간, 호출 관계를 확인할 수 있습니다. 다이어그램의 각 구간을 선택하면 해당 스텝이 위치한 트리뷰로 이동합니다. 한 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 한 줄로 표시해 트리 형식을 간격하게 정리할 수 있습니다. 여러 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 줄바꿈해 모두 표시합니다. 최장 경로 : 가장 긴 경로로 이동할 수 있습니다. 시간바 표시 : 경과 시간을 막대 형식의 차트로 표시합니다. 시간 표시 : 각 구간별 타임 스탬프, 갭, 경과 시간을 텍스트 형식으로 표시합니다. 8초 이상: 초과 지연 상태로 빨간색 으로 표현합니다. 3초 이상 8초 미만: 지연 상태로 주황색 으로 표현합니다. 3초 미만: 정상 상태로 파란색 으로 표현합니다. 시간 숨기기 : 시간 정보를 숨깁니다. : 트랜잭션 요약 정보와 다이어그램을 감추고 트리뷰만 확인할 수 있습니다. 버튼을 선택하면 감춰진 정보를 다시 표시합니다. 트리뷰 목록이 긴 경우 이 기능을 이용하면 유용합니다. : SQL 변수와 HTTP 쿼리를 조회할 수 있는 창이 나타납니다. 자세한 내용은 다음 문서 를 참조하세요. 노트 시작 및 소요 시간의 경우 트랜잭션 호출 환경에 따라 발생하는 시차를 상위 트랜잭션 내 트레이스와 매핑을 통해 보정하여 표현하기 때문에 실제 수집된 시간 데이터와 차이가 발생할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트리 뷰"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "액티브 스택. 액티브 스택을 수집한 구간과 시간, 관련한 클래스, 메소드 정보를 확인하려면 액티브 스택 탭을 선택하세요. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 액티브 스택에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "액티브 스택"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "멀티 트랜잭션. 멀티 트랜잭션은 다른 에이전트나 프로젝트와의 연관된 트랜잭션을 의미합니다. 멀티 트랜잭션 탭에서는 와탭 모니터링 서비스에 등록한 애플리케이션 간의 호출 관계를 확인할 수 있습니다. 팁 멀티 트랜잭션을 추적하려면 관리 > 에이전트 설정 메뉴에서 mtrace_enabled 옵션을 true 로 설정하세요. 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요. 차트 : 각 트랜잭션의 호출 관계를 플로우 차트 형식으로 제공합니다. 트랜잭션 노드를 선택하면 해당 트랜잭션 노드에 대한 트레이스 분석 정보를 확인할 수 있습니다. 차트 모드에서는 마우스를 이용해 원하는 위치로 이동하거나 스크롤을 통해서 확대, 축소할 수 있습니다. 차트 뷰 설정 : 차트에 표시할 요소를 표시하거나 숨길 수 있습니다. 테이블 : 테이블 형식으로 멀티 트랜잭션 내에 포함된 각 트랜잭션 별 정보를 확인할 수 있습니다. 컬럼 선택 아이콘을 선택해 테이블 헤더 컬럼을 편집할 수 있습니다. 각 트랜잭션 항목을 선택하면 트레이스 분석 정보를 확인할 수 있습니다. 트리 : 트리 형식으로 트랜잭션 간의 호출 관계를 파악할 수 있습니다. 관련한 부가 기능은 트리뷰 탭의 기능과 같습니다. 프로젝트 선택 : 차트에 표시될 프로젝트를 선택하거나 해제할 수 있습니다. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 멀티 트랜잭션에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "메소드 요약. 메소드 정보만을 확인하려면 메소드 요약 탭을 선택하세요. 에이전트에 추적이 설정된 메소드 이름과 소요 시간을 표시합니다. 불필요한 로직이 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 메소드 로직 개선을 위한 분석 정보로 활용할 수 있습니다. 노트 메소드(method)와 관련한 에이전트 설정 옵션에 대한 자세한 내용은 다음 문서 를 참조하세요. 이용 중인 상품에 따라 메소드 추적 지원 여부는 다를 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "메소드 요약"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "SQL 요약. SQL문에 대한 정보를 확인하려면 SQL 요약 탭을 선택하세요. 불필요하게 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 쿼리 성능 개선을 위한 분석 정보로 활용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "SQL 요약"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "HTTP Call 요약. HTTP 호출의 호출 건수, 합계 시간, 평균 시간 등을 확인하려면 HTTP Call 요약 탭을 선택하세요. 불필요한 외부 호출이 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 트랜잭션 지연 요인이 외부인지 내부인지를 파악하는 분석 정보로 활용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "HTTP Call 요약"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "트랜잭션 로그. 트랜잭션과 관련한 로그 정보를 확인하려면 트랜잭션 로그 탭을 선택하세요. 키워드 검색 : 키워드 검색란에 검색하려는 텍스트를 입력한 다음 엔터 키를 입력하거나 버튼을 선택하세요. 입력한 텍스트와 일치하는 키워드를 하이라이트 표시합니다. 키워드 하이라이트 : 키워드와 색상을 설정하면 자동으로 로그 목록에서 키워드와 일치하는 텍스트를 하이라이트 표시합니다. 테이블 설정 : 로그 목록 테이블의 헤더 컬럼을 설정할 수 있습니다. 노트 트랜잭션 로그 탭을 활성화하려면 로그와 관련한 에이전트 설정 옵션을 적용해야 합니다. 로그 설정에 대한 자세한 내용은 다음 문서 를 참조하세요. 트랜잭션 로그 탭은 로그 조회 권한이 가진 멤버만 진입할 수 있습니다. 멤버 권한에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 로그"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "키워드 하이라이트 설정하기. 하이라이트 표시할 키워드를 추가하려면 버튼을 선택하세요. 원하는 키워드를 입력하세요. 색상 아이콘을 선택한 다음 원하는 색상을 선택하세요. 엔터를 입력하세요. 추가한 키워드가 목록에 생성됩니다.",
  "product": "JAVA 모니터링",
  "header": "키워드 하이라이트 설정하기"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "키워드 하이라이트 삭제하기. 하이라이트 목록에서 이용하지 않는 항목을 삭제하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "키워드 하이라이트 삭제하기"
},
{
  "title": "트랜잭션",
  "url": "https://docs.whatap.io/java/track-transactions-intro",
  "content": "트랜잭션. 트랜잭션의 개요를 안내합니다. ",
  "product": "JAVA 모니터링",
  "header": "트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/track-transactions-intro",
  "title": "트랜잭션",
  "content": "트랜잭션이란?. 사용자 브라우저의 요청을 처리하기 위한 서버 사이드의 LUW(Logical Unit of Work)를 말합니다. 개별 웹서비스(URL) 요청에 대한 처리 과정이 바로 트랜잭션입니다. 웹 애플리케이션에서 트랜잭션은 웹서비스(URL)에 대한 HTTP Request를 받아 Response를 반환하는 과정입니다. 애플리케이션의 성능은 이 트랜잭션들의 성능으로 요약할 수 있습니다. 트랜잭션 성능은 트랜잭션 시작에서부터 종료 시점, 응답시간 및 자원 사용량 혹은 트랜잭션 호출자 속성 등의 정보를 포함합니다. 기본적으로 트랜잭션 응답 분포와 트랜잭션 통계를 통해서 트랜잭션 성능을 분석할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션이란?"
},
{
  "url": "https://docs.whatap.io/java/track-transactions-intro",
  "title": "트랜잭션",
  "content": "트랜잭션의 이름. 트랜잭션의 이름은 URL입니다. 단 Get 파라미터(Query String)는 제외됩니다. 브라우저 요청 http://www.whatap.io/hr/apply.do?name = 'kim' 트랜잭션 이름 /hr/apply.do 노트 와탭에서는 웹서비스 이름 과 트랜잭션 이름 을 혼용하고 있습니다. 서비스 특정 URL과 그에 대한 요청을 처리하기 위한 모듈로 볼 수 있습니다. 트랜잭션 요청에 대한 처리 하나를 의미하기 때문에 둘의 이름은 동일하게 URL이라고 할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션의 이름"
},
{
  "url": "https://docs.whatap.io/java/track-transactions-intro",
  "title": "트랜잭션",
  "content": "트랜잭션 이름 정규화. MSA 기반의 시스템이 발전하면서 URL + ? 인자 파라미터 형식보다 URL 패스에 파라미터를 넣는 방식을 많이 사용하게 됩니다. http://www.whatap.io/hr/kim/apply.do 이렇게 패스 파라미터를 그대로 트랜잭션 이름으로 사용하게 되면 통계적 관점의 성능 분석이 어렵습니다. 이를 정규화할 필요가 있습니다. 와탭은 정규화를 위한 옵션과 기능을 제공합니다. whtap.conf trace_normalize_urls = /hr/ { name } /apply.do 위와 같이 설정하면 트랜잭션 이름이 /hr/kim/apply.do → /hello/ :name /apply.do 로 치환되어 수집됩니다. 만약 대상 URL 설정은 그대로 두고 기능만 off 하고자 한다면 다음과 같이 옵션을 지정할 수 있습니다. 기본값은 true 입니다. whatap.conf trace_normalize_enabled = false",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 이름 정규화"
},
{
  "title": "에이전트 옵션 설정",
  "url": "https://docs.whatap.io/java/topology-settings",
  "content": "에이전트 옵션 설정. 토폴로지 기능을 이용하기 위해 에이전트에 옵션을 적용하는 방법을 제공합니다. 토폴로지 기능을 이용하기 위해 에이전트에 옵션을 적용하는 방법을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 옵션 설정"
},
{
  "url": "https://docs.whatap.io/java/topology-settings",
  "title": "에이전트 옵션 설정",
  "content": "적용 가능 에이전트 및 버전. Java 에이전트 1.7.1 버전 이상 그룹 및 통합 토폴로지 사용을 위해 다음과 같이 옵션을 추가하세요. Java: add JVM option -Dwhatap.okind = { 그룹 식별자 }",
  "product": "JAVA 모니터링",
  "header": "적용 가능 에이전트 및 버전"
},
{
  "url": "https://docs.whatap.io/java/topology-settings",
  "title": "에이전트 옵션 설정",
  "content": "whatap.conf 설정. 다음은 토폴로지 표현을 위해 whatap.conf 파일에 설정할 수 있는 정보 수집 옵션입니다. tx_caller_meter_enabled Boolean 기본값 false 트랜잭션 정보로 토폴로지 통계를 생성합니다. mtrace_enabled 옵션의 값이 true 이면 동작합니다. sql_dbc_meter_enabled Boolean 기본값 false 데이터 베이스 연결 정보로 토폴로지 통계를 생성합니다. httpc_host_meter_enabled Boolean 기본값 false 토폴로지 맵에서 httpc outbound 정보를 표현합니다. actx_meter_enabled Boolean 기본값 false 토폴로지 맵에서 액티브 트랜잭션 상태를 표현합니다.",
  "product": "JAVA 모니터링",
  "header": "whatap.conf 설정"
},
{
  "title": "유형별 토폴로지",
  "url": "https://docs.whatap.io/java/topology-type",
  "content": "유형별 토폴로지. 유형별 토폴로지에서 제공하는 기능을 알아봅니다. 유형별 토폴로지에 대해 알아보고 각 토폴로지에서 제공하는 기능을 설명합니다.",
  "product": "JAVA 모니터링",
  "header": "유형별 토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology-type",
  "title": "유형별 토폴로지",
  "content": "애플리케이션 토폴로지. 홈 화면 > 프로젝트 선택 > 대시보드 > 애플리케이션 토폴로지 프로젝트 범위에 포함된 모든 애플리케이션의 호출 연관 정보를 표현합니다. 노트 애플리케이션 노드를 더블 클릭하면 해당 애플리케이션의 인스턴스 토플로지 화면으로 전환합니다. 선택한 애플리케이션 중심의 토폴로지를 표현합니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology-type",
  "title": "유형별 토폴로지",
  "content": "그룹 토폴로지. 홈 화면 > 프로젝트 선택 > 사이트맵 > 그룹 통계 토폴로지 데이터베이스 호출 내역을 포함한 토폴로지의 경우 다음과 같이 데이터베이스 노드를 포함합니다. 타 프로젝트로부터 호출 내역이 존재하는 경우 타 프로젝트의 그룹 노드를 포함합니다. 타 프로젝트 그룹 노드를 클릭하면 타 프로젝트의 토폴로지 정보를 함께 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "그룹 토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology-type",
  "title": "유형별 토폴로지",
  "content": "통합 토폴로지. 사용자가 복수 프로젝트에 대한 권한을 보유한다면 프로젝트 단위 토폴로지로 전체 상황을 조망하기 어려운 제약이 존재합니다. 이와 같은 경우 복수의 프로젝트를 일괄 선택해 단일 토폴로지로 보기 위한 요구 사항을 총족하기 위한 기능입니다. 와탭 모니터링 서비스 홈 화면에서 통합 APP.그룹 토폴로지 메뉴를 선택하세요. 왼쪽 위에 프로젝트 를 선택하세요. 토폴로지에 표현할 그룹 또는 프로젝트를 선택하세요. 토폴로지 화면의 중앙을 기준으로 프로젝트 단위의 클러스터를 형성하고 각 프로젝트에 포함된 그룹을 인접 위치에 군집시켜 표현합니다. 인접한 노드 사이의 간격을 조정하려면 상단의 노드 간격 관련 확대/축소( ) 버튼을 이용해 노드 간격을 조정할 수 있습니다. 노트 대규모 환경의 경우 일반적으로 멀티 프로젝트로 구성합니다. 이를 토폴로지로 표현할 경우 개별 노드를 화면 전체에 균등 분포시키기 보다는 프로젝트 단위로 모아서 배치하는 것이 전체 규모를 파악하는데 용이합니다. 따라서 군집 단위를 선택하여 화면에 자동 배치합니다. 프로젝트, 데이터베이스, 외부 호스트, 애플리케이션 및 그룹을 호출하는 외부 모듈을 군집 단위로 합니다. 클러스터 구성은 프로젝트, 외부 모듈, 외부 호출, DB 호출 단위로 구성합니다.",
  "product": "JAVA 모니터링",
  "header": "통합 토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology-type",
  "title": "유형별 토폴로지",
  "content": "인스턴스 토폴로지. 홈 화면 > 프로젝트 선택 > 사이트맵 > 인스턴스 토폴로지 인스턴스 토폴로지 는 애플리케이션 토폴로지와 동일한 데이터를 표현합니다. 인스턴스 토폴로지 는 단일 애플리케이션을 대상으로 연관성을 지닌 애플리케이션, 외부 모듈, DB 및 외부 호출 노드와의 연관성을 표현합니다. 반면, 애플리케이션 토폴로지 는 프로젝트에 포함된 전체 애플리케이션을 대상으로 합니다. 애플리케이션 토폴로지 에 표현되는 정보가 너무 많아 애플리케이션 단위로 확인할 경우 인스턴스 토폴로지 를 이용하세요.",
  "product": "JAVA 모니터링",
  "header": "인스턴스 토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology-type",
  "title": "유형별 토폴로지",
  "content": "Netstat 토폴로지. 홈 화면 > 프로젝트 선택 > 사이트맵 > Netstat 토폴로지 프로젝트에 포함된 애플리케이션과 애플리케이션의 리스닝 정보, 아웃바운드 호출 정보를 노드로 표현합니다. 리스닝 포트와의 관계는 직선으로 아웃바운드 호출 정보와의 관계는 곡선으로 표현합니다. 노트 Netstat 토폴로지를 취득하는 과정은 에이전트의 부하를 유발하므로 자동 갱신 기능을 제공하지 않습니다. 버튼을 통해 사용자의 요청이 있는 경우 데이터를 조회합니다.",
  "product": "JAVA 모니터링",
  "header": "Netstat 토폴로지"
},
{
  "title": "기본 사용법",
  "url": "https://docs.whatap.io/java/topology-basic",
  "content": "기본 사용법. 토폴로지 메뉴에서 기본 동작 방법을 알아봅니다. 기본 사용법토폴로지 메뉴의 기본 동작 방법에 대해 알아보세요. 토폴로지 화면의 기본 동작은 사용자 편의성을 위해 다음과 같은 기능을 제공합니다. 자동 갱신: 기본 30초 간격의 자동 갱신을 통해 토폴로지의 변경 사항을 자동으로 업데이트합니다. 노트갱신 간격을 변경하려면 오른쪽 위에 을 선택한 다음 원하는 시간을 입력하세요. 5초에서 5분까지 설정할 수 있습니다. 브라우저에서 새로 고침하면 최신 정보로 업데이트할 수 있습니다. 줌인/줌아웃: 마우스 휠을 통해 토폴로지를 확대 또는 축소할 수 있습니다. 노드 수가 많은 경우 원하는 사이로 토폴로지를 표현할 수 있습니다. 줌인/줌아웃 레벨은 내부 설정에 유지됩니다. 노드 드래그: 노드를 마우스 왼쪽 버튼으로 클릭한 상태에서 드래그하여 원하는 위치에 고정할 수 있습니다. 프로젝트 노드 클릭 대시보드 > 애플리케이션 토폴로지 메뉴에서 노드를 클릭하면 해당 프로젝트의 애플리케이션 토폴로지(인스턴스 토폴로지)로 이동합니다. 홈 화면 > 통합 APP.그룹 토폴로지 메뉴에서 노드를 클릭하면 해당 프로젝트의 토폴로지 정보를 취득하고 현재 토폴로지에 표현합니다. 하이라이트 필터링: 노드 및 노드와 인정한 링크를 필터링해 하이라이트할 수 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "기본 사용법"
},
{
  "title": "부가 기능",
  "url": "https://docs.whatap.io/java/topology-add-function",
  "content": "부가 기능. 토폴로지 메뉴에서 이용할 수 있는 부가 기능에 대한 설명을 제공합니다. 토폴로지 메뉴에서 이용할 수 있는 부가 기능에 대한 설명을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "부가 기능"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "하이라이트 필터. 특정 노드를 선택해 연관 관계를 가진 노드를 강조하여 보여주기 위한 기능을 제공합니다. 대량 노드 간의 복잡한 연관 관계를 토폴로지로 용이하게 확인할 수 있습니다. 특정 노드에 마우스 오버하여 해당 노드 및 연관 노드, 링크 정보를 하이라이트로 표시합니다. 키워드 입력을 통해 원하는 노드의 선택을 유지할 수 있습니다. 토폴로지 갱신 시에도 하이라이트 상태는 유지합니다.",
  "product": "JAVA 모니터링",
  "header": "하이라이트 필터"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "노드 선택 기능 이용하기. 노드 선택 버튼을 선택하세요. 화면 오른쪽에 프로젝트, DB 호출, 외부 호출 노드를 그룹핑하여 다이어그램으로 제공합니다. 오른쪽 다이어그램에서 하위 노드를 선택하면 해당 노드를 왼쪽 토폴로지 화면에서 하이라이트 필터 적용합니다. 오른쪽 화면에서는 다음 기능을 이용할 수 있습니다. 줌인/줌아웃 드래그 하위 노드 클릭 시 하이라이트 필터 적용 상위 노드 클릭 시 하위 노드 숨김 또는 표시 하이라이트 필터 기능을 취소하려면 키워드 입력란에 에이전트 이름을 삭제하세요. 노트 그룹 통계 토폴로지 메뉴에서는 화면 오른쪽 아래에 노드선택 ( 더블 클릭 ) 버튼으로 해당 기능을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "노드 선택 기능 이용하기"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "컨텍스트 메뉴. 토폴로지의 노드에서 마우스 오른쪽 버튼을 클릭하면 컨텍스트 메뉴가 나타납니다. 컨텍스트 메뉴에는 애플리케이션 모니터링 대시보드로 이동하기 위한 링크 등의 메뉴를 제공합니다. 노트 컨테이너 맵 , 노드 자원 , 컨테이너 자원 메뉴는 컨테이너 모니터링에서만 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "컨텍스트 메뉴"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "노드 위치 저장 및 복원. 토폴로지 화면에서 차트의 노드 위치는 마우스 왼쪽 버튼을 클릭한 상태에서 드래그해 변경할 수 있습니다. 변경한 노드의 위치는 다른 메뉴로 진입한 후 토폴로지 화면으로 다시 돌아와도 유지됩니다. 위치 저장 : 사용자가 변경한 노드의 위치 정보를 저장할 수 있습니다. 위치 복원 : 사용자가 위치 저장을 실행한 시점으로 노드의 위치를 복원합니다. 위치 초기화 : 노드의 위치를 초기화합니다. 노트 노드 위치 메뉴는 사용자가 진입한 토폴로지 메뉴에 따라 지원하지 않을 수 있습니다. 변경한 노드의 위치 정보는 웹 브라우저의 로컬 스토리지에 저장됩니다. 다른 사용자의 화면에서는 변경된 노드 위치가 반영되지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "노드 위치 저장 및 복원"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "별칭 부여 및 제거. 노드선택 버튼을 선택하세요. 화면 오른쪽에서 별칭을 설정할 노드로 이동해 마우스 오른쪽 버튼을 클릭하세요. 별칭 입력 창이 나타나면 별칭을 입력 후 엔터를 입력하세요. 별칭 정보를 저장합니다. 차트의 데이터를 새로 조회하는 시점에서 저장한 별칭을 토폴로지 화면의 노드에 적용합니다. 노트 노드 별칭 정보는 웹 브라우저의 로컬 스토리지에 저장됩니다.",
  "product": "JAVA 모니터링",
  "header": "별칭 부여 및 제거"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "/. 인바운드 / 시스템호출 버튼을 이용해 토폴로지 화면에 외부 모듈 및 외부 호출 노드의 표시 여부를 변경할 수 있습니다. 인바운드 / 시스템호출 표시 상태 인바운드 / 시스템호출 숨김 상태",
  "product": "JAVA 모니터링",
  "header": "/"
},
{
  "url": "https://docs.whatap.io/java/topology-add-function",
  "title": "부가 기능",
  "content": "임계치 초과 정보 강조. 노드 사이의 호출 응답 시간 및 에러 건수 임계치 설정 시 임계치를 초과한 노드 및 호출 관계를 강조해 표시합니다. 토폴로지 화면에서 경고 표시 버튼을 선택하세요. 응답 시간(ms) 과 에러 건수 텍스트 입력 상자에 원하는 설정값을 입력하세요. 노트 애플리케이션 토폴로지 메뉴에서는 경고 표시 를 선택한 다음 설정값을 입력할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "임계치 초과 정보 강조"
},
{
  "title": "토폴로지",
  "url": "https://docs.whatap.io/java/topology",
  "content": "토폴로지. 모니터링 대상 서버로부터 수집하는 실시간 정보를 통해 애플리케이션 서버 간의 연관 관계를 용이하게 파악할 수 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "토폴로지"
},
{
  "url": "https://docs.whatap.io/java/topology",
  "title": "토폴로지",
  "content": "토롤로지란?. 모니터링 대상 서버로부터 수집하는 실시간 정보를 통해 애플리케이션 서버 간의 연관 관계를 용이하게 파악할 수 있습니다. 다음 동영상을 통해 토폴로지에 대해 알아보세요. 노트 일반적인 토폴로지 정의에서 링크 정보를 가지지 않은 노드를 포함하지 않습니다. 모니터링 관점에서의 토폴로지는 고립된 노드의 정보도 필요합니다.",
  "product": "JAVA 모니터링",
  "header": "토롤로지란?"
},
{
  "url": "https://docs.whatap.io/java/topology",
  "title": "토폴로지",
  "content": "토폴로지 기본 요소. 토폴로지 화면에서 표현하는 정보는 노드와 링크, 각각이 포함하는 부가 정보로 구분합니다. 노드 프로젝트, 애플리케이션 그룹, 애플리케이션, 데이터베이스, HTTP 호출 대상 외부 호스트, 외부 모듈(애플리케이션 호출자)을 표현합니다. 노트 노드 로부터 호출 정보가 존재하는 경우 노드 외곽에 에러 비중을 표현합니다. 링크 애플리케이션 또는 애플리케이션 그룹 간의 호출 정보, 데이터베이스 호출 정보, 외부 호스트 호출 정보, 외부 모듈로부터의 호출 정보를 표현합니다. 평균 응답시간 : 5초간 노드 사이에서 트랜잭션 또는 호출 내역의 응답 시간 합계를 총건수로 나눈 정보 건수 : 5초간 노드 사이에서 트랜잭션 또는 호출 내역의 (에러 건수를 포함한) 총건수 에러 : 5초간 노드 사이에서 트랜잭션 또는 호출 내역 중 총 에러 건수 액티브 TX : 노드 사이에서 트랜잭션 또는 호출 중 현재 진행 상태의 건수 패치 시간 : 5초간 DB 호출 내역의 레코드 취득 시간 총합 패치 건수 : 5초간 DB 호출 내역의 레코드 취득 건수 총합",
  "product": "JAVA 모니터링",
  "header": "토폴로지 기본 요소"
},
{
  "title": "지원 환경",
  "url": "https://docs.whatap.io/java/supported-spec",
  "content": "지원 환경. 와탭 자바(Java) 에이전트의 지원 환경에 대한 상세 정보를 제공합니다. Java 6 이상에서 20 이하의 모든 운영체제에서 JVM으로 구동되는 애플리케이션에 대한 지원 정보, Java 1.5 이하 버전에 대한 제한적 지원, 지원되는 운영체제, 애플리케이션 서버, 프레임워크/라이브러리 및 데이터베이스의 목록을 포함합니다. ",
  "product": "JAVA 모니터링",
  "header": "지원 환경"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "Java 에이전트 지원 환경. 에이전트를 설치하기 전에 JVM 애플리케이션 서버가 다음의 사양을 충족하는지 확인하세요. Web Application Server (WAS) 뿐 아니라 데몬 및 배치 애플리케이션 등 JVM에서 동작하는 모든 애플리케이션에 적용할 수 있습니다. Java 1.6 미만은 support@whatap.io 로 문의하거나 다음 문서 를 참조하세요. 지원 버전 지원범위 환경 OS JVM 버전 Fully support Java JVM으로 구동하는 모든 OS Java 6 이상, Java 20 이하 Limited support Java JVM으로 구동하는 모든 OS Java 1.5 이하 운영체제 HP-UX 11.x 32bit, 64bit Itanium 64bit Oracle Solaris 2.8, 2.9, 10, 11 32bit, 64bit x86 Intel Linux 32bit Red Hat Itanium 64bit Microsoft Windows 2000, XP, 2003, 2008, 7, 8 노트 JDK 6를 설치할 수 있는 모든 운영체제를 지원합니다. 애플리케이션 서버 BEA WebLogic 9.x, 10.x, 11.x, 12.x Tmaxsoft JEUS 6.x, 7.x SUN Application Server 8.x, 9.x Fujitsu Interstage 5.x, 6.x, 7.x Hitachi Cosminexus 7.x, 8.x, 9.x Apache Jakarta Tomcat 6.x, 7.x, 8.x, 9.x, 10.x Caucho Technology Resin 3.x, 4.x Red Hat JBoss Application Server 6.x, 7.x GlassFish 3.x, 4.x, 5.x 노트 이외 Java EE Spec을 준수하는 모든 애플리케이션 서버를 지원합니다. 다음 링크 를 참조하세요. 프레임워크 / 라이브러리 Spring Boot Project Netty, Akka HTTP 및 Play Framework 등 비동기 Framework Quarkus, Quarkus-reactive Mule Framework 3.9.5, Mule Framework 4.5 노트 이외 Java EE Spec을 준수하는 Application Server에서 동작하는 모든 라이브러리를 지원합니다. 데이터베이스 Generic JDBC (any JDBC compliant driver) DB2 JDBC Derby JDBC H2 JDBC jTDS JDBC MariaDB JDBC Microsoft SQL Server JDBC MySQL mysql-connector-java Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc14 Postgres JDBC Tibero Jedis Redis driver",
  "product": "JAVA 모니터링",
  "header": "Java 에이전트 지원 환경"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "호환성. WAS Ver. Java SE 6 (jdk1.6.0) Java SE 7 (jdk1.7.0_80) Java SE 8 (jdk1.8.0_91) Tomcat 6 ✅ ✅ ✅ Tomcat 7 ✅ ✅ ✅ Tomcat 8 ❌ ✅ ✅ Tomcat 9 ❌ ❌ ✅ WAS Ver. OpenJDK 6 (1.6.0_45) OpenJDK 7 (1.7.0_80) OpenJDK 8 (1.8.0_91) Tomcat 6 ✅ ✅ ✅ Tomcat 7 ✅ ✅ ✅ Tomcat 8 ❌ ✅ ✅ Tomcat 9 ❌ ❌ ✅ WAS Ver. ibm-java-x86_64-60 ibm-java-x86_64-71 ibm-java-x86_64-80 Tomcat 6 ✅ ✅ ✅ Tomcat 7 ✅ ✅ ✅ Tomcat 8 ❌ ✅ ✅ Tomcat 9 ❌ ❌ ✅",
  "product": "JAVA 모니터링",
  "header": "호환성"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "DataSource. DB JDBC Driver 파일명 JDBC Ver. JDK Ver. 호환성 MySQL mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ MariaDB mariadb-java-client-1.4.6.jar 1.4.6 JDK 1.7.0_80 ✅ PostgreSQL postgresql-9.4.1209.jre7.jar 9.4.1209 JDK 1.7.0_80 ✅ Amazon Aurora mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ Oracle ojdbc6-11.2.0.2.0.jar 11.2.0.2.0 JDK 1.7.0_80 ✅ DB2 db2jcc.jar, db2jcc_license_cu.jar 1.4.2 JDK 1.7.0_80 ✅",
  "product": "JAVA 모니터링",
  "header": "DataSource"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "호환성. WAS Ver. Java SE 6 (jdk1.6.0) Java SE 7 (jdk1.7.0_80) Java SE 8 (jdk1.8.0_91) JBOSS EAP 7.0 (standalone) ❌ ❌ ✅ JBOSS EAP 6.1.1 (standalone) ❌ ✅ ❌ JBOSS EAP 6.2 (standalone) ❌ ✅ ✅ JBOSS EAP 6.3 (standalone) ❌ ✅ ✅ JBOSS EAP 6.4 (standalone) ❌ ✅ ✅ JBOSS EAP 7.0 (domain) ❌ ❌ ✅ JBOSS AS 5.1.0 (default) ✅ ✅ ✅ WAS Ver. OpenJDK 6 (1.6.0_45) OpenJDK 7 (1.7.0_80) OpenJDK 8 (1.8.0_91) JBOSS EAP 7.0 (standalone) ❌ ❌ ✅ JBOSS EAP 6.1.1 (standalone) ❌ ✅ ❌ JBOSS EAP 6.2 (standalone) ❌ ✅ ✅ JBOSS EAP 6.3 (standalone) ❌ ✅ ✅ JBOSS EAP 6.4 (standalone) ❌ ✅ ✅ JBOSS EAP 7.0 (domain) ❌ ❌ ✅ JBOSS AS 5.1.0 (default) ✅ ✅ ✅ WAS Ver. ibm-java-x86_64-60 ibm-java-x86_64-71 ibm-java-x86_64-80 JBOSS EAP 7.0 (standalone) ❌ ❌ ✅ JBOSS EAP 6.1.1 (standalone) ❌ ✅ ❌ JBOSS EAP 6.2 (standalone) ❌ ✅ ✅ JBOSS EAP 6.3 (standalone) ❌ ✅ ✅ JBOSS EAP 6.4 (standalone) ❌ ✅ ✅ JBOSS EAP 7.0 (domain) - - - JBOSS AS 5.1.0 (default) ✅ ✅ ✅",
  "product": "JAVA 모니터링",
  "header": "호환성"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "DataSource. DB JDBC Driver 파일명 JDBC Ver. JDK Ver. 호환성 MySQL mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ MariaDB mariadb-java-client-1.4.6.jar 1.4.6 JDK 1.7.0_80 ✅ PostgreSQL postgresql-9.4.1209.jre7.jar 9.4.1209 JDK 1.7.0_80 ✅ Amazon Aurora mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ Oracle ojdbc6-11.2.0.2.0.jar 11.2.0.2.0 JDK 1.7.0_80 ✅ DB2 db2jcc.jar, db2jcc_license_cu.jar 1.4.2 JDK 1.7.0_80 ✅",
  "product": "JAVA 모니터링",
  "header": "DataSource"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "호환성. WAS Ver. Java SE 6 (jdk1.6.0) Java SE 7 (jdk1.7.0_80) Java SE 8 (jdk1.8.0_91) JEUS 7 ✅ ✅ ✅ JEUS 6 ✅ ✅ ✅ WAS Ver. OpenJDK 6 (1.6.0_45) OpenJDK 7 (1.7.0_80) OpenJDK 8 (1.8.0_91) JEUS 7 ✅ ✅ ✅ JEUS 6 ✅ ✅ ✅ WAS Ver. ibm-java-x86_64-60 ibm-java-x86_64-71 ibm-java-x86_64-80 JEUS 7 ✅ ✅ ✅ JEUS 6 ✅ ✅ ❌",
  "product": "JAVA 모니터링",
  "header": "호환성"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "DataSource. DB JDBC Driver 파일명 JDBC Ver. JDK Ver. 호환성 MySQL mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ MariaDB mariadb-java-client-1.4.6.jar 1.4.6 JDK 1.7.0_80 ✅ PostgreSQL postgresql-9.4.1209.jre7.jar 9.4.1209 JDK 1.7.0_80 ✅ Amazon Aurora mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ Oracle ojdbc6-11.2.0.2.0.jar 11.2.0.2.0 JDK 1.7.0_80 ✅ DB2 db2jcc.jar, db2jcc_license_cu.jar 1.4.2 JDK 1.7.0_80 ✅",
  "product": "JAVA 모니터링",
  "header": "DataSource"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "호환성. WAS Ver. ibm-java-x86_64-60 8.5.5.10 ✅",
  "product": "JAVA 모니터링",
  "header": "호환성"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "DataSource. DB JDBC Driver 파일명 JDBC Ver. JDK Ver. 호환성 Mysql mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ Oracle ojdbc6-11.2.0.2.0.jar 11.2.0.2.0 JDK 1.7.0_80 ✅",
  "product": "JAVA 모니터링",
  "header": "DataSource"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "호환성. WAS Ver. Java SE 6 (jdk1.6.0) Java SE 7 (jdk1.7.0_80) Java SE 8 (jdk1.8.0_91) Jetty 8.1.21 ❌ ✅ ✅ Jetty 9.2.18 ❌ ✅ ✅ Jetty 9.3.12 ❌ ❌ ✅ WAS Ver. ibm-java-x86_64-60 ibm-java-x86_64-71 ibm-java-x86_64-80 Jetty 8.1.21 ❌ ✅ ✅ Jetty 9.2.18 ❌ ✅ ✅ Jetty 9.3.12 ❌ ❌ ✅",
  "product": "JAVA 모니터링",
  "header": "호환성"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "DataSource. DB JDBC Driver 파일명 JDBC Ver. JDK Ver. 호환성 MySQL mysql-connector-java-5.1.39-bin.jar 5.1.39 JDK 1.7.0_80 ✅ Oracle ojdbc6-11.2.0.2.0.jar 11.2.0.2.0 JDK 1.7.0_80 ✅",
  "product": "JAVA 모니터링",
  "header": "DataSource"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "브라우저 지원. 와탭 모니터링 서비스는 웹브라우저와 모바일 앱에서 이용할 수 있습니다. 브라우저 권장여부 지원버전 Google Chrome ✅ 84 이상 Mozilla FireFox ❌ 최신 버전 Edge ❌ 최신 버전 Safari ❌ 최신 버전 노트 브라우저 호환성과 성능을 이유로 Chrome 최신 버전 사용을 권장합니다. 사용자 인터페이스(User Interface, UI)는 HTML5 표준 기술로 구현하여 Internet Explorer는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "브라우저 지원"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "방화벽. 와탭 에이전트는 수집 서버 TCP 6600 포트로 접속 가능해야 합니다. 모니터링 대상과 가까운 수집 서버 주소를 허용하세요. 출발지: 와탭 에이전트 목적지 목적지 IP 포트 와탭 서울 수집 서버 13.124.11.223 / 13.209.172.35 TCP 6600 와탭 도쿄 수집 서버 52.68.36.166 / 52.193.60.176 TCP 6600 와탭 싱가포르 수집 서버 18.138.0.93 / 18.139.67.236 TCP 6600 와탭 뭄바이 수집 서버 13.127.125.69 / 13.235.15.118 TCP 6600 와탭 캘리포니아 수집 서버 52.8.223.130 / 52.8.239.99 TCP 6600 와탭 프랑크프루트 수집 서버 3.125.142.162 / 3.127.76.140 TCP 6600 에이전트에서 수집 서버로 직접 접속할 수 없다면 제공하는 Proxy 모듈을 이용해 경유하세요.",
  "product": "JAVA 모니터링",
  "header": "방화벽"
},
{
  "url": "https://docs.whatap.io/java/supported-spec",
  "title": "지원 환경",
  "content": "모바일 앱. 와탭 모바일 앱은 안드로이드와 iOS 환경을 지원합니다. 다음 링크로 이동하거나 QR 코드를 스캔해 앱을 설치할 수 있습니다. 모바일 앱에 대한 자세한 설명은 다음 문서 를 참조하세요. iOS Android iOS 12 버전 이상 Android 5.0 버전 이상",
  "product": "JAVA 모니터링",
  "header": "모바일 앱"
},
{
  "title": "경고 알림 수신 설정",
  "url": "https://docs.whatap.io/java/set-receive-event",
  "content": "경고 알림 수신 설정. 프로젝트에 포함하는 멤버들의 경고 알림 수신과 관련한 다양한 기능을 설정할 수 있습니다. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 수신 설정 프로젝트 멤버들의 경고 알림 수신과 관련한 다양한 기능을 설정할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "경고 알림 수신 설정"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "수신 수단 선택하기. 이메일 알림 이외에 SMS, 모바일 알림을 선택할 수 있습니다. 원하는 알림 수신 수단의 체크 박스를 체크하면 경고 알림을 받을 수 있습니다. 알림 수신 수단의 체크 박스를 해제하면 경고 알림을 보내지 않습니다. 노트 이메일 알림은 회원 가입 시 입력한 이메일 주소로 알림을 보냅니다. 프로젝트 최고 관리자를 제외한 모든 사용자는 자신의 수신 설정만 변경할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "수신 수단 선택하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "SMS 알림 수신 추가하기. SMS 알림 수신이 필요한 경우 계정 관리 에서 사용자 전화번호를 설정하세요. 화면 오른쪽 위에 프로필 아이콘을 선택하세요. 팝업 메뉴가 나타나면 계정 관리 버튼을 선택하세요. 사용자 전화번호 섹션에서 일반 휴대전화 버튼을 선택하세요. 전화번호 에 인증번호를 수신할 전화번호를 입력하세요. 인증번호 전송 버튼을 선택하세요. 사용자의 휴대전화로 전송된 인증 번호를 입력하세요. 인증하기 버튼을 선택하세요. 노트 등록한 전화번호를 변경하려면 번호 변경하기 버튼을 선택한 다음 위의 과정을 반복하세요. SMS를 알림으로 수신할 수 있는 전화번호는 한국 휴대전화 번호 만 등록할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "SMS 알림 수신 추가하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "WhatsApp 알림 수신 추가하기. WhatsApp을 통해 알림을 수신할 수 있습니다. 화면 오른쪽 위에 프로필 아이콘을 선택하세요. 팝업 메뉴가 나타나면 계정 관리 버튼을 선택하세요. 사용자 전화번호 섹션에서 WhatsApp 버튼을 선택하세요. 전화번호 에 인증번호를 수신할 전화번호를 입력하세요. 인증번호 전송 버튼을 선택하세요. WhatsApp 애플리케이션으로 전송된 인증번호 6자리를 입력하세요. 인증하기 버튼을 선택하세요. 노트 등록한 전화번호를 변경하려면 번호 변경하기 버튼을 선택한 다음 위의 과정을 반복하세요.",
  "product": "JAVA 모니터링",
  "header": "WhatsApp 알림 수신 추가하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "수신 레벨 선택하기. 경고 알림 레벨에 따라 알림 수신 여부를 선택할 수 있습니다. 사용자별 이벤트 수신 설정 섹션의 사용자 목록에서 수신 레벨 을 전체 또는 위험 을 선택하세요. 전체 : 모든 경고 알림을 수신할 수 있습니다. 위험 : 위험 레벨의 경고 알림만 수신할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "수신 레벨 선택하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "요일 및 시간별 알람 설정하기. 요일별, 시간별 알림 수신 여부를 선택할 수 있습니다. 사용자별 이벤트 수신 설정 섹션의 사용자 목록에서 가장 왼쪽에 버튼을 선택하세요. 경고 알림 수신을 원하는 요일을 선택하거나 시간을 입력하세요. 알림 수신 수단별로 설정할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "요일 및 시간별 알람 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "경고 알림 반복 설정하기. 경고 알림 발생 시간으로부터 알림 발생 상황이 해소되지 않을 경우 최초 알림 발생 시각으로부터의 알림 반복 간격을 설정할 수 있습니다. 예를 들어, 경고 알림 발생 시간으로부터 0분(즉시), 1시간 후, 1일 후에 경고 알림을 반복하려면 '0,1H,1D'를 반복 알림 (에스컬레이션) 컬럼 항목에 입력하세요. 노트 이 기능은 Critical (또는 위험 ) 등급의 모든 이벤트를 대상으로 합니다. 이벤트 추가 시 설정한 레벨 항목을 참조하세요. M : 분, H : 시간, D : 일, 단위를 생략하면 분 단위로 시간을 설정합니다. 저장 버튼을 선택하지 않으면 설정을 완료할 수 없습니다. 숫자 또는 숫자+단위( M , H , D )로 입력하세요. 입력이 올바르지 않으면 메시지가 표시됩니다.",
  "product": "JAVA 모니터링",
  "header": "경고 알림 반복 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "팀별, 사용자별 알림 설정하기. 프로젝트의 멤버 중 특정 멤버 또는 팀을 대상으로 알림 수신 여부를 설정합니다. 메트릭스 및 이상치 탐지 , 로그 이벤트 설정의 이벤트 수신 태그 항목에서 태그를 추가하세요. 이벤트별로 경고 알림을 수신하는 멤버 또는 팀을 선택할 수 있습니다. 반대로 이벤트 수신 태그를 설정하지 않으면 전체 멤버에게 경고 알림을 보낼 수 있습니다. 이벤트 수신 태그 사용 예시 이벤트 수신 태그에 대한 사용 예시를 통해 팀별 또는 사용자별로 경고 알림을 전송하는 설정 방법에 대해 알아봅니다. 다음과 같이 팀 별로 서로 다른 경고 알림을 전송하도록 설정합니다. 알림 종류 서버팀 수신 여부 데브옵스팀 수신 여부 메트릭스 경고 알림 ✅ ❌ 이상치 탐지 경고 알림 ✅ ✅ 로그 실시간 경고 알림 ❌ ✅ 이벤트 수신 설정하기 ( 경고 알림 > 이벤트 수신 설정 ) 프로젝트에 속한 멤버들 중 서버팀 소속은 서버팀 , 데브옵스팀 소속은 데브옵스팀 으로 이벤트 수신 태그를 설정하세요. 메트릭스 경고 알림 설정하기 ( 경고 알림 > 이벤트 설정 > 메트릭스 > 이벤트 추가 > 이벤트 수신 설정 ) 태그 추가 또는 버튼을 클릭하세요. 태그 목록에서 원하는 태그를 선택하거나 새 태그를 생성하세요. 메트릭스 이벤트에 대한 알림을 서버팀 으로 설정한 경우입니다. 로그 실시간 경고 알림 설정 ( 경고 알림 > 이벤트 설정 > 로그 > 이벤트 추가 > 이벤트 수신 태그 ) 태그 추가 또는 버튼을 클릭하세요. 태그 목록에서 원하는 태그를 선택하거나 새 태그를 생성하세요. 로그 실시간 이벤트에 대한 알림을 데브옵스팀 으로 설정한 경우입니다. 이상치 탐지 이벤트는 전체 멤버에게 경고 알림을 전송하므로 이벤트 수신 태그를 설정하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "팀별, 사용자별 알림 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "이벤트 수신 태그 추가하기. 사용자별 이벤트 수신 설정 섹션의 사용자 목록에서 태그 추가 또는 버튼을 선택하세요. 이벤트 수신 태그 팝업 창이 나타나면 태그 입력 란에 태그 이름을 입력한 다음 엔터를 입력하거나 새 태그 생성 을 선택하세요. 태그 색상을 선택하세요. 태그 생성 버튼을 선택하세요. 태그 목록 에서 생성한 태그를 확인할 수 있습니다. 생성한 태그를 적용하려면 해당 태그를 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "이벤트 수신 태그 추가하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "이벤트 수신 태그 해제하기. 사용자별 이벤트 수신 설정 섹션의 사용자 목록에서 버튼을 선택하세요. 이벤트 수신 태그 팝업 창이 나타나면 적용된 태그 옆에 버튼을 선택하세요. 이벤트 수신 태그 팝업 창을 닫으세요. 이벤트 수신 태그를 해제합니다.",
  "product": "JAVA 모니터링",
  "header": "이벤트 수신 태그 해제하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "이벤트 수신 태그 수정 및 삭제하기. 사용자별 이벤트 수신 설정 섹션의 사용자 목록에서 태그 추가 또는 버튼을 선택하세요. 이벤트 수신 태그 팝업 창이 나타나면 태그 목록 에서 수정 또는 삭제할 항목의 버튼을 선택하세요. 태그 이름을 수정하거나 색상을 변경한 다음 적용 버튼을 선택하세요. 태그를 삭제하려면 태그 삭제 버튼을 선택하세요. 노트 이벤트에 적용 중인 이벤트 수신 태그 항목은 삭제할 수 없습니다.",
  "product": "JAVA 모니터링",
  "header": "이벤트 수신 태그 수정 및 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "수신 태그 미설정 알림. 이벤트 수신 태그 가 설정되지 않은 경고 알림을 받으려면 수신 태그 미설정 알림 받기 옵션을 선택하세요. 이벤트 수신 태그 가 설정된 경고 알림만 받고 싶다면 선택을 해제하세요. 노트 모든 경고 알림을 받지 않으려면 해당 옵션을 해제하고 선택한 이벤트 수신 태그 가 없어야 합니다.",
  "product": "JAVA 모니터링",
  "header": "수신 태그 미설정 알림"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "3rd 파티 플러그인 알림 추가하기. Slack, Telegram, Teams, Jandi, Webhook 등의 외부 애플리케이션을 통해 경고 알림을 받을 수 있습니다. 경고 알림 > 이벤트 수신 설정 메뉴에서 3rd 파티 플러그인 섹션의 추가하기 버튼을 선택하세요. 원하는 서비스를 선택하세요. 선택한 서비스의 화면 안내에 따라 설정을 진행하세요. 모든 과정을 완료했다면 추가 버튼을 선택하세요. 노트 와탭랩스의 지원 범위에 포함하지 않는 사내 메신저는 표준 Webhook, webhook json을 통해 연동할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "3rd 파티 플러그인 알림 추가하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "대량 알림 발생 방지. 알림이 대량으로 발생하면 설정한 시간 동안 경고 알림을 일시적으로 중단합니다. 경고 알림 > 이벤트 수신 설정 메뉴에서 대량 알림 발생 방지 섹션으로 이동하세요. 활성화 토글 버튼을 선택해 기능을 켜거나 끌 수 있습니다. 탐지 시간 동안 탐지 횟수 이상의 이벤트가 발생하면 정지 시간 동안 경고 알림을 중지합니다. 예를 들어, 5분 동안 20회의 이벤트가 발생하면 5분 동안 경고 알림을 중지합니다. 설정한 정지 시간 시간이 지나면 대량 알림 발생 방지 기능은 해제됩니다. 주의 문자 메시지 알림이 하루 200건 이상 발생하면 일시 중지하며 다음 메시지를 표시합니다. 문자 알림 중단 기능을 해제하려면 문자알림 중단 해제 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "대량 알림 발생 방지"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "경고 알림 사용자 설정하기. 계정 관리 메뉴에서 사용자 개인의 알림 수신 레벨, 수신 수단, 요일 및 시간 등을 설정할 수 있습니다. 화면의 오른쪽 위에 프로필 아이콘을 선택하세요. 팝업 메뉴가 나타나면 계정 관리 버튼을 선택하세요. 화면을 아래로 스크롤해 알림 수신 설정 섹션으로 이동하세요. 수신 레벨, 수신 수단, 요일 및 시간을 설정한 다음 저장 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "경고 알림 사용자 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-receive-event",
  "title": "경고 알림 수신 설정",
  "content": "경고 알림 언어 설정. 프로젝트에서 발생하는 경고 알림 메시지의 언어를 변경할 수 있습니다. 홈 화면에서 경고 알림 메시지의 언어를 변경할 프로젝트를 선택하세요. 화면 왼쪽 메뉴에서 관리 > 프로젝트 관리 를 선택하세요. 알림 언어 관리 섹션에서 원하는 언어를 선택하세요. 화면 오른쪽 아래에 저장 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "경고 알림 언어 설정"
},
{
  "title": "알림 메시지 사용자 정의",
  "url": "https://docs.whatap.io/java/set-notification-message",
  "content": "알림 메시지 사용자 정의. 프로젝트 멤버에게 전달되는 경고 알림 메시지를 수정할 수 있는 사용자 정의 기능을 제공합니다. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 메트릭스 탭 선택 프로젝트 멤버에게 메일 또는 서드 파티 플러그인을 통해 전달하는 경고 알림 메시지를 수정할 수 있는 사용자 정의 기능을 제공합니다. 화면 오른쪽 위에 알림 메시지 설정 버튼을 선택하세요. 수신할 메시지에서 불필요하다고 생각되는 항목을 감추거나 사용자가 원하는 특별한 내용을 추가할 수 있습니다.  노트 이 기능은 메트릭스, 복합 메트릭스 경고 알림에만 적용할 수 있습니다. 이 기능은 프로젝트 선택 > 실험실 > 알림 메시지 설정 메뉴 경로로도 진입할 수 있습니다. 이 기능은 알림 설정 권한을 가진 멤버가 설정할 수 있습니다. 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "알림 메시지 사용자 정의"
},
{
  "url": "https://docs.whatap.io/java/set-notification-message",
  "title": "알림 메시지 사용자 정의",
  "content": "기본 화면 안내. 알림 메시지의 종류는 발생 과 해결 로 분류할 수 있습니다. 발생 은 이벤트가 발생했을 때 전달되는 알림이며, 해결 은 이벤트가 해소되었을 때 전달되는 알림입니다. 영역은 수신할 메시지의 상세 항목입니다. 영역은 수신할 메시지의 상세 항목에 대한 내용입니다. 미리보기 버튼을 선택하면 수신할 메시지의 내용을 미리 확인할 수 있습니다. 수신한 메시지의 내용을 수정하려면 수정 버튼을 선택하세요. 수신한 메시지의 상세 항목을 감추려면 토글 버튼을 선택해 비활성화하세요.",
  "product": "JAVA 모니터링",
  "header": "기본 화면 안내"
},
{
  "url": "https://docs.whatap.io/java/set-notification-message",
  "title": "알림 메시지 사용자 정의",
  "content": "수신 메시지 상세 항목 감추기. 수신 메시지의 내용 중 불필요하다고 생각되는 항목을 감출 수 있습니다. 각 상세 항목의 가장 오른쪽의 토글 버튼을 선택해 해당 항목을 수신 메시지에서 감추거나 보이도록 설정할 수 있습니다. 미리보기 버튼을 선택해 수신할 메시지의 내용을 미리 확인할 수 있습니다. 상세 항목 활성화 예시 상세 항목 비활성화 예시 변경 사항을 반영하려면 저장 버튼을 선택하세요. 다른 카테고리의 변경 사항을 한번에 모두 반영하려면 화면 오른쪽 위에 전체 저장 버튼을 선택하세요. 노트 감춘 상세 항목을 수신 메시지에 다시 추가하려면 해당 항목의 토글 버튼을 선택해 활성화하세요. 모든 상세 항목을 수신 메시지에 추가하려면 전체 활성화 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "수신 메시지 상세 항목 감추기"
},
{
  "url": "https://docs.whatap.io/java/set-notification-message",
  "title": "알림 메시지 사용자 정의",
  "content": "상세 항목 내용 수정하기. 상세 항목의 내용에 사용자가 원하는 특별한 내용을 추가할 수 있습니다. 각 상세 항목 가장 오른쪽에 수정 버튼을 선택하세요. 메시지 편집 창이 나타나면 추가할 내용을 입력하세요. 확인 버튼을 선택하세요. 미리보기 버튼을 선택해 수신할 메시지의 내용을 미리 확인하세요. 변경 사항을 반영하려면 저장 버튼을 선택하세요. 다른 카테고리의 변경 사항을 한번에 모두 반영하려면 화면 오른쪽 위에 전체 저장 버튼을 선택하세요. 노트 메시지 편집 창에서 텍스트 블록은 알림 발생 상황에 따라 변경되어 출력되는 변수입니다. 텍스트 블록을 드래그해서 위치를 변경할 수 있습니다. 텍스트 블록을 삭제했다면 창 아래에 텍스트 블록 버튼을 선택해 다시 추가할 수 있습니다. 주의 사용자에 의해 내용을 수정하기 전의 메시지는 사용자의 언어 상태에 따라 번역되어 전송되나, 내용 수정 이후에는 언어 상태와 관계 없이 사용자 정의된 포맷으로만 알림을 전송합니다.",
  "product": "JAVA 모니터링",
  "header": "상세 항목 내용 수정하기"
},
{
  "url": "https://docs.whatap.io/java/set-notification-message",
  "title": "알림 메시지 사용자 정의",
  "content": "다른 프로젝트에 설정 복사하기. 사용자가 설정한 내용을 다른 프로젝트에 복사할 수 있습니다. 화면 오른쪽 위에 다른 프로젝트에 복사 버튼을 선택하세요. 프로젝트 적용 창이 나타면 설정 내용을 복사할 프로젝트를 선택하세요. 모든 프로젝트를 선택하려면 전체 선택 을 선택하세요. 적용 버튼을 선택하세요. 정보 현재 프로젝트와 동일한 제품 타입만 선택할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "다른 프로젝트에 설정 복사하기"
},
{
  "url": "https://docs.whatap.io/java/set-notification-message",
  "title": "알림 메시지 사용자 정의",
  "content": "초기화하기. 사용자가 설정한 모든 변경 사항을 초기화하려면 초기화 버튼을 선택하세요. 모든 카테고리의 변경 사항을 초기화하려면 화면 오른쪽 위에 전체 초기화 버튼을 선택하세요. 확인 메시지 창이 나타나면 확인 버튼을 선택하세요. 주의 초기화된 설정은 복구할 수 없습니다.",
  "product": "JAVA 모니터링",
  "header": "초기화하기"
},
{
  "title": "로그 경고 알림",
  "url": "https://docs.whatap.io/java/set-event-log",
  "content": "로그 경고 알림. 로그 메시지를 필터링해 경고 알림을 설정할 수 있습니다. 노트이 기능은 로그 모니터링을 활성화해야 이용할 수 있습니다. 로그 모니터링 활성화에 대한 자세한 내용은 다음 문서를 참조하세요.로그 모니터링의 주요 메뉴에 대한 자세한 내용은 다음 문서를 참조하세요. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 로그 탭 수집한 로그 데이터를 조건에 맞춰 필터링해 경고 알림을 설정할 수 있습니다. + 이벤트 추가 버튼을 선택해 로그 이벤트 경고 알림을 설정하세요. 모든 설정을 완료한 다음 저장 버튼을 선택하세요.  추가할 수 있는 로그 이벤트 다음과 같습니다.  실시간 로그 이벤트 : 실시간으로 수집한 로그에서 검색 값이 등장하면 경고 알림을 보냅니다. 복합 로그 이벤트 : 최근에 수집한 로그 중 일정 조건을 만족하는 로그가 일정 개수 이상 수집한 경우에 경고 알림을 보냅니다.  노트 이벤트를 추가하거나 설정하려면 알림 설정 권한이 있어야합니다. 사용자별 권한에 대한 자세한 내용은 다음 문서를 참조하세요. 경고 알림과 관련해 모니터링 플랫폼별 지원되는 이벤트 종류를 확인하려면 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "로그 경고 알림"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "이벤트 추가 공통 옵션. 다음은 이벤트 추가 시 공통으로 설정할 수 있는 옵션입니다. 이벤트 이름 : 추가하려는 이벤트 이름을 입력하세요. 이벤트 활성화 : 토글 버튼을 클릭해 경고 알림 활성화 여부를 선택할 수 있습니다. 레벨 : 위험 , 경고 , 정보 중 하나의 레벨을 선택하세요. 메시지 : 이벤트 발생 시 출력하는 알림 메시지를 입력합니다. ${태그 또는 필드키} 입력으로 메시지에 변수를 적용할 수 있습니다. 변수에 입력할 키는 선택한 메트릭스 데이터 카테고리 에 포함된 값이여야 합니다. 카테고리 : 로그 구분 명칭(로그 폴더명)을 목록에서 선택하거나 직접 입력할 수 있습니다. 이벤트 발생 일시 중지 : 과도한 경고 알림 발생을 방지할 수 있는 옵션입니다. 첫 번째 경고 알림 이후 선택한 시간 동안 경고 알림을 보내지 않습니다. 또한 이벤트 기록 메뉴에 기록되지 않습니다. 이벤트 수신 태그 : 이벤트 수신 태그를 선택하면 해당 태그를 가진 프로젝트 멤버와 3rd-party 플러그인에 알림을 전송할 수 있습니다. 이벤트 수신 태그를 선택하지 않으면 프로젝트 전체 멤버에게 경고 알림을 보냅니다. 태그를 추가하지 않으면 전체 멤버에게 경고 알림을 보냅니다. + 태그 추가 를 클릭한 다음 태그 목록 에서 경고 알림 수신 대상을 선택하세요. + 새 태그 생성 을 선택해 태그를 추가할 수도 있습니다. 노트 경고 알림 > 이벤트 수신 설정 메뉴에서 프로젝트 멤버와 3rd-party 플러그인에 태그를 설정할 수 있습니다. 이벤트 수신 설정 메뉴에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "이벤트 추가 공통 옵션"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "실시간 로그 이벤트 추가. 검색 키 : 로그 데이터 내에서 특정 값에 접근하기 위한 식별자를 의미합니다. 목록에서 선택하거나 직접 입력할 수 있습니다. 예시, HTTP 응답 상태 코드를 나타내는 값에 접근하고자 할 경우 검색 키 status 검색 값 : 검색 키 에 해당하는 실제 데이터를 의미합니다. 로그에서 입력한 단어를 포함할 경우 경고 알림을 보냅니다. 목록에서 선택하거나 직접 입력할 수 있습니다. 예시, 검색 키 status 검색 값 200 을 설정한 경우 HTTP 응답 상태 코드 200을 포함하는 로그 데이터 수집 시 경고 알림 발생 이벤트 대상 필터링 : 선택 입력 옵션을 통해 검색 키 와 연산자 , 검색 값 을 선택해 대상을 필터링하거나 직접 입력 옵션을 선택할 수 있습니다. 입력값이 없을 경우 실시간으로 수집하는 데이터 전체에 대한 알림 발생 여부를 판단합니다. 예시, AppLog 카테고리의 로그 중 level 이 ERROR 인 로그를 찾습니다. 일치하는 로그 중에서 oid 가 12345678 인 경우 경고 알림을 보냅니다.",
  "product": "JAVA 모니터링",
  "header": "실시간 로그 이벤트 추가"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "복합 로그 이벤트 추가. 템플릿 : 복합 로그 템플릿을 제공합니다. 로그 검색 조건 검색 키 에서 이벤트 발생 조건 대상을 선택할 수 있습니다. 선택한 검색 키 에 해당하는 검색 값을 선택할 수 있습니다. 검색 키 에서 동일한 항목을 추가할 경우 'OR' 조건으로, 다른 항목을 추가할 경우 'AND' 조건으로 동작합니다. 제외 체크 박스를 선택해 선택한 검색 값을 이벤트 발행 조건에서 제외할 수 있습니다. + 추가 를 선택해 여러개의 이벤트 발행 조건을 추가 또는 제외 설정할 수 있습니다. 데이터 조회 범위 : 선택한 시간동안 수집한 로그를 조회합니다. 데이터 조회 시간을 5분으로 선택하면 최근 5분 동안 수집한 데이터를 조회해서 이벤트 발생 조건을 확인합니다. 이벤트 발행 조건 : 이벤트가 입력한 횟수와 선택한 연산자의 조건과 같이 발생할 때 경고 알림을 보냅니다. 예시, AppLog 카테고리의 로그 중 조건 입력 에 해당하는 로그를 필터링 합니다. 조건 입력에서 제외 를 체크한 경우 해당 조건으로 찾은 로그를 제외하겠다는 의미입니다. 따라서 level 이 ERROR 인 로그는 제외합니다. 최근 10분 동안 수집한 로그 중 이벤트가 5 보다 작을 경우 경고 알림을 보냅니다.",
  "product": "JAVA 모니터링",
  "header": "복합 로그 이벤트 추가"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "로그 이벤트 설정 수정하기. 경고 알림 > 이벤트 설정 메뉴로 이동하세요. 로그 탭을 선택하세요. 로그 이벤트 목록 중 수정하려는 이벤트 항목에서 오른쪽에 버튼을 선택하세요. 이벤트 설정 창이 나타나면 옵션을 수정한 다음 저장 버튼을 선택하세요. 선택한 로그 이벤트를 삭제하려면 이벤트 설정 창에서 오른쪽 위에 삭제 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "로그 이벤트 설정 수정하기"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "로그 이벤트 끄기. 경고 알림 > 이벤트 설정 메뉴로 이동하세요. 로그 탭을 선택하세요. 로그 이벤트 목록 중 경고 알림을 끄려는 이벤트 항목의 가장 오른쪽에 토글 버튼을 선택하세요. 다시 토글 버튼을 선택하면 해당 경고 알림이 활성화됩니다.",
  "product": "JAVA 모니터링",
  "header": "로그 이벤트 끄기"
},
{
  "url": "https://docs.whatap.io/java/set-event-log",
  "title": "로그 경고 알림",
  "content": "로그 이벤트 내보내기/불러오기. 로그 이벤트의 설정 내용을 json 파일로 저장한 다음 불러와 재사용할 수 있습니다. 경고 알림 > 이벤트 설정 메뉴로 이동하세요. 로그 탭을 선택하세요. 로그 이벤트 목록 위에 JSON 버튼을 선택하세요. JSON 내보내기 창이 나타납니다. 내보내기 할 항목을 수정 또는 편집하세요. 오른쪽 위에 내보내기 버튼을 선택하세요. 브라우저에서 json 파일을 다운로드합니다. 로그 이벤트 목록 위에 버튼을 선택하세요. 파일 선택 창이 나타나면 앞서 다운로드 받은 json 파일을 선택하세요. JSON 가져오기 창이 나타나면 내용을 수정한 다음 + 목록에 추가하기 버튼을 선택하세요. 노트 이벤트에 id가 존재합니다. id를 제거한 뒤 다시 시도하세요. 메시지가 나타나면 JSON 가져오기 창에서 id 항목을 삭제한 다음 + 목록에 추가하기 버튼을 선택하세요. 기존의 이벤트 항목에 덮어쓰기를 하려면 id 항목을 삭제한 다음 덮어쓰기 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "로그 이벤트 내보내기/불러오기"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "HTTP 파라미터 조회. 테이블 뷰 탭에서 해당 트랜잭션의 HTTP 파라미터를 조회할 수 있습니다. 페이지 아래로 스크롤해 트랜잭션 수행의 가장 마지막 단계로 이동하세요. HTTP 파라미터 항목을 선택하세요. HTTP-PARAMETERS 창이 나타나면 비밀번호 버튼을 선택하세요. 설정한 Param Key를 입력하세요. 가려진 매개 변수를 확인할 수 있습니다. 노트 HTTP 파라미터와 관련한 에이전트 설정은 다음 문서 를 참조하세요. 비밀번호 : 복호화된 파라미터 값을 확인할 수 있습니다. 비밀번호는 WHATAP_HOME /security.conf ( paramkey.txt ) 파일 내 6자리 문자열입니다. 다른 문자열로 변경 가능합니다. SQL 변수 조회, HTTP 쿼리 조회, Thread 중지에 필요합니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "HTTP 파라미터 조회"
},
{
  "url": "https://docs.whatap.io/java/trs-profile",
  "title": "트랜잭션 트레이싱",
  "content": "SQL 파라미터 조회. 테이블 뷰 탭에서 SQL 스텝을 선택하거나 트리 뷰 탭에서 버튼을 선택하세요. 파라미터를 조회할 수 있는 SQL 창이 나타납니다. 비밀번호 : 복호화된 파라미터 값을 확인할 수 있습니다. 비밀번호는 WHATAP_HOME /security.conf ( paramkey.txt ) 파일 내 6자리 문자열입니다. 다른 문자열로 변경 가능합니다. 노트 비밀번호 는 SQL 변수 조회, HTTP 쿼리 조회, Thread 중지에 필요합니다. 자세한 내용은 다음 문서 를 참조하세요. SQL 포맷팅 : SQL 문장을 들여쓰기 및 포맷팅하여 가독성을 높일 수 있습니다. : SQL 문장을 클립보드에 복사할 수 있습니다. 통계 : 통계/보고서 > 통계 메뉴의 SQL 탭으로 이동합니다. 팁 SQL 변수와 HTTP 쿼리를 조회하려면 다음 옵션을 에이전트 설정에 추가하세요. SQL 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요. HTTP 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요. whatap.conf # SQL 파라미터 조회 옵션: 옵션이 적용되면 SQL 파라미터를 암호화하여 수집합니다. profile_sql_param_enabled = true # HTTP 파라미터 조회 옵션: 옵션이 적용되면 HTTP 쿼리 파라미터를 암호화하여 수집합니다. profile_http_parameter_enabled = true",
  "product": "JAVA 모니터링",
  "header": "SQL 파라미터 조회"
},
{
  "title": "이벤트 기록",
  "url": "https://docs.whatap.io/java/set-event-history",
  "content": "이벤트 기록. 이벤트 기록 메뉴를 통해 발생한 경고 알림 이력을 확인할 수 있습니다. 이벤트 기록홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 기록 경고 알림이 발생한 이력을 확인할 수 있습니다. 최근 1년 이내의 이력까지 조회할 수 있습니다. 각 항목을 설정한 다음  버튼을 선택하세요. 노트선택한 프로젝트에 따라 화면 이미지는 다를 수 있습니다. 시간 선택 오른쪽에 위치한 녹색 버튼을 선택해 조회 시간을 선택할 수 있습니다.  또는  버튼을 선택해 선택한 조회 시간 만큼 간격을 이동할 수 있습니다. 세부 시간을 선택하려면 날짜 또는 시간 영역을 선택하세요. 세부 시간을 설정한 다음 적용 버튼을 선택하세요. 필터: 제목 또는 메시지 내용을 기준으로 이벤트 기록을 필터링할 수 있습니다. 애플리케이션: 프로젝트에 포함한 에이전트를 선택할 수 있습니다. CSV: 조회한 이벤트 기록 결과를 csv 파일로 저장할 수 있습니다. CSV 버튼을 클릭하면 최대 CSV 라인 수를 입력한 다음 다운로드 버튼을 선택하세요. 컬럼 선택: 조회한 이벤트 기록 결과의 열 항목을 추가할 수 있습니다. 이벤트 설정: 경고 알림 > 이벤트 설정 메뉴로 이동합니다. 제목 / 메시지: 이벤트 설정 메뉴에서 추가한 이벤트의 이벤트명과 메시지 항목의 내용입니다. 노트 이벤트 추가에 대한 자세한 내용은 다음 문서를 참조하세요. 알림 메시지 사용자 정의에 대한 자세한 내용은 다음 문서를 참조하세요. 이벤트 발생 시각: 이벤트가 발생한 시각입니다. 이벤트가 해소되지 않고 진행 중일 경우 진행 중 태그가 표시됩니다. 정비 중인 경우 이벤트가 발생하면 정비 중 발생 태그가 표시됩니다. 노트정비 계획에 대한 자세한 내용은 다음 문서를 참조하세요. 이벤트 해소 시각: 설정한 이벤트가 해결된 시각입니다. 만약 해당 컬럼이 보이지 않는다면 컬럼 선택 버튼을 클릭한 다음 이벤트 해소 시각을 선택하세요. 애플리케이션: 이벤트 설정 메뉴에서 이벤트 추가 시 이벤트 대상 필터링 항목을 설정하면 표시됩니다. ",
  "product": "JAVA 모니터링",
  "header": "이벤트 기록"
},
{
  "title": "Scale In에서 에이전트 자동 삭제",
  "url": "https://docs.whatap.io/java/scale-in-auto-delete",
  "content": "Scale In에서 에이전트 자동 삭제. Auto Scale 환경에서 자동으로 확장된 시스템이 Scale In을 실행할 때, 자바(Java) 에이전트를 자동 삭제하는 방법을 안내합니다. 에이전트는 특정 파일 생성을 통해 SILENT_SHUTDOWN 이벤트를 서버에 전송하며, 이를 통해 에이전트가 자동으로 목록에서 제거됩니다. 이 과정은 시스템의 자동 축소 시점에 맞춰 에이전트 관리를 용이하게 하며, 추가적인 운영자 개입 없이 리소스를 효율적으로 관리할 수 있습니다. Scale In에서 에이전트 자동 삭제Auto Scale 환경에서 에이전트 이름을 자동 부여하면 Scale Out이 발생할 경우 운영자 개입이 필요 없습니다. 시스템을 자동으로 확장합니다. 반면 Scale In이 발생하면 시스템이 정상적인 Shut down으로 인식해야 합니다. 에이전트 자동 삭제를 위해 와탭 서버는 자바 에이전트로부터 메시지를 받아야 합니다. 에이전트는 ${WHATAP_HOME}에 Java 프로세스의 whatap_{java-process-pid}.shutdown 파일이 나타나면 SILENT_SHUTDOWN 이벤트를 와탭 서버에 전송합니다. 전송은 5초 이내로 완료합니다. SILENT_SHUTDOWN 이벤트를 와탭 서버에 전송하고 1분 이내에 에이전트가 셧다운 되면 와탭 서버는 목록에서 해당 Java 에이전트를 바로 제거합니다. inactive 이벤트도 발생시키지 않습니다. 노트Tomcat의 경우 shutdown.sh 파일에 설정할 수 있습니다.touch $WHATAP_HOME/whatap_{java-process-pid}.shutdown ",
  "product": "JAVA 모니터링",
  "header": "Scale In에서 에이전트 자동 삭제"
},
{
  "title": "이벤트 수신 포맷",
  "url": "https://docs.whatap.io/java/set-event-format",
  "content": "이벤트 수신 포맷. 애플리케이션 모니터링에서 제공하는 경고 알림의 이벤트 수신 포맷에 대해 알아봅니다. ",
  "product": "JAVA 모니터링",
  "header": "이벤트 수신 포맷"
},
{
  "url": "https://docs.whatap.io/java/set-event-format",
  "title": "이벤트 수신 포맷",
  "content": "공용 알림 템플릿. 공통 템플릿은 대부분의 경우 적용 가능합니다. 다양한 환경에서 동일한 포멧으로 알림을 받을 수 있습니다. Product Type : 애플리케이션, 데이터베이스, 쿠버네티스 Event Type : 애플리케이션 알림, 데이터베이스 알림, 메트릭스 알림 Event Channel : sms, mobile, 3rd party plugin , plugin",
  "product": "JAVA 모니터링",
  "header": "공용 알림 템플릿"
},
{
  "url": "https://docs.whatap.io/java/set-event-format",
  "title": "이벤트 수신 포맷",
  "content": "이벤트 제목. Event title format [ Level ] [ Platform ] [ ProjectName ] [ ApplicationName ] [ EventTitle ] Event title example [ Info ] [ JAVA ] [ 애플리케이션 프로젝트 ] [ TC - 0-1-8081 ] [ CRITICAL_HIGH_MEMORY ] 노트 ApplicationName을 설정하지 않은 경우 이벤트 제목에서 생략합니다. Platform은 다음 중 한 가지로 표시합니다. JAVA NODEJS PYTHON PHP DOTNET GO POSTGRESQL ORACLE MYSQL MSSQL BSM_JAVA CLOUDWATCH TIBERO KUBERNETES KUBE_NS URLCHECK URLCHECK_ADMIN CUBRID ALTIBASE CLUSTER REDIS MONGODB VR RUM",
  "product": "JAVA 모니터링",
  "header": "이벤트 제목"
},
{
  "url": "https://docs.whatap.io/java/set-event-format",
  "title": "이벤트 수신 포맷",
  "content": "이벤트 메시지. 이벤트 메시지에 포함할 수 있는 정보입니다. optional 이 false 인 경우 항상 메시지에 포함합니다. optional 이 true 인 경우 해당 데이터를 확인할 수 있으면 표시합니다. Event message example Project Name : 애플리케이션 프로젝트 Project Code : 3 Application Name : TC - 0-1-8081 Event Message : RECOVERED : Memory is too high . less than 10 % Event ON Time : 2022-04-12 18:53:24 +0900 Event OFF Time : 2022-04-12 18:53:24 +0900 Alert Type : APPLICATION_MEMORY Metric Name : memory Metric Value : 20 Metric Threshold : 10 Stateful : true 다음은 이벤트 메시지 구성 요소입니다. En Ko 지원되는 알림 타입 설명 Project Name 프로젝트 이름 전체 - Project Code 프로젝트 Code 전체 - Application Name 에이전트 이름 전체(optional) oname Event Message 이벤트 메시지 전체 - Alert Type 이벤트 종류 전체 아래의 AlertType 종류 표 참고 Event ON Time 이벤트 발생 시간 전체 2022-04-13 10:40:49 +0900에서 +0900는 GMT를 의미합니다. Event OFF Time 이벤트 해제 시간 전체(optional) 2022-04-13 10:40:49 +0900에서 +0900는 GMT를 의미합니다. Metric Name 메트릭스 이름 전체(optional) 이벤트 조건 판단에서 사용하는 메트릭스의 이름 Metric Value 메트릭스 값 전체(optional) 메트릭스 값이 메트릭스 임계치를 넘으면 이벤트 발생 조건이 만족한 경우입니다. Metric Threshold 메트릭스 임계치 전체(optional) 메트릭스 값이 메트릭스 임계치를 넘으면 이벤트 발생 조건이 만족한 경우입니다. Stateful 해결된 이벤트 알림 전체(optional) 해결된 이벤트 알림 기능 사용 중이면 true, 아니면 false Event Rule 이벤트 발생 조건 메트릭스 알림 - Event Target Filter 이벤트 대상 선택 메트릭스 알림 특정 대상에서 수집된 메트릭스에 대해서만 이벤트 조건을 확인합니다. Repeat Count 이벤트 반복 횟수 메트릭스 알림 이벤트 조건이 이벤트 반복 시간동안 이벤트 반복 횟수만큼 만족해야 이벤트가 발생됩니다. Repeat Duration 이벤트 반복 시간 메트릭스 알림 이벤트 조건이 이벤트 반복 시간동안 이벤트 반복 횟수만큼 만족해야 이벤트가 발생됩니다. Receiver 수신자 메트릭스 알림 - Query MXQL 쿼리 복합 메트릭스 알림 - Rule 이벤트 발생 조건 복합 메트릭스 알림 - Query Period 쿼리 기간 복합 메트릭스 알림 - Query Interval 쿼리 간격 복합 메트릭스 알림 - Silent Time 무음 시간 복합 메트릭스 알림 - Query URL Exception 알림 Exception을 발생시킨 요청의 URL TXID 트랜잭션 ID Exception 알림 - Class 에러 클래스 이름 Exception 알림 - Log Message 로그 메시지 서버 - 파일 로그 알림 - Log File 로그 파일 경로 서버 - 파일 로그 알림 - IP IP 서버 알림 전체 - CPU CPU 서버 알림 전체 이벤트 발생 당시의 Snapshot CPU_load1 CPU_load1 서버 알림 전체 이벤트 발생 당시의 Snapshot CPU_loadPerCore CPU_loadPerCore 서버 알림 전체 이벤트 발생 당시의 Snapshot Memory Memory 서버 알림 전체 이벤트 발생 당시의 Snapshot Swap Swap 서버 알림 전체 이벤트 발생 당시의 Snapshot Disk Name | Used Percent | Free Size | IO Percent 디스크 퍼포먼스 서버 알림 전체 이벤트 발생 당시의 Snapshot Name | Bps | Pps 트래픽 퍼포먼스 서버 알림 전체 이벤트 발생 당시의 Snapshot Message | Time | Name 처리내역 메시지 서버 알림 전체 - 노트 해당 이벤트에서 제공할 수 있는 최대한 많은 정보를 보여줍니다. AlertType은 다음 중 한 가지로 표시합니다. AlertType 설명 APPLICATION_CPU 애플리케이션 CPU 알림 APPLICATION_MEMORY 애플리케이션 MEMORY 알림 APPLICATION_DISK 애플리케이션 DISK 알림 APPLICATION_ACTIVE_TRANSACTION 애플리케이션 액티브 트랜잭션 알림 APPLICATION_ERROR_TRANSACTION 애플리케이션 에러 트랜잭션 알림 APPLICATION_SLOW_TRANSACTION 애플리케이션 트랜잭션 응답시간 알림 METRICS 메트릭스 알림 COMPOSITE_METRICS 복합 메트릭스 알림 ANOMALY 이상치 탐지 알림 LOG_REALTIME 로그 실시간 알림 COMPOSITE_LOG 복합 로그 알림 SERVER_REBOOT 서버 - 재시작 알림 SERVER_NO_DATA 서버 - 미수신 알림 SERVER_PORT 서버 - 포트 알림 SERVER_NETWORK_IOPS 서버 - 네트워크 IOPS 알림 SERVER_NETWORK_BPS 서버 - 네트워크 BPS 알림 SERVER_DISK_IO 서버 - 디스크 I/O 알림 SERVER_DISK_QUOTA 서버 - 디스크 사용량 알림 SERVER_DISK_INODE 서버 - inode 알림 SERVER_CPU 서버 - CPU 알림 SERVER_MEMORY 서버 - 메모리 알림 SERVER_CPU_STEAL 서버 - steal 알림 SERVER_MEMORY_SWAP 서버 - 스왑 알림 SERVER_LOG_FILE 서버 - 로그 파일 알림 SERVER_WINDOW_EVENT 서버 - 윈도우 이벤트 알림 SERVER_OFF 서버 - 알림 OFF 알림 SERVER_ACKNOWLEDGE 서버 - 처리내역 알림 SERVER_PROCESS_COUNT 서버 - 프로세스 수 알림 SERVER_PROCESS_CPU 서버 - 프로세스 CPU 알림 SERVER_PROCESS_MEMORY 서버 - 프로세스 메모리 알림 SERVER_PROCESS_OFF 서버 - 프로세스 알림 OFF 알림 AGENT_ACTIVE 에이전트 활성화 알림 AGENT_INACTIVE 에이전트 비활성화 알림 AGENT_REACTIVATED 에이전트 재활성화 알림 URL URL 알림 TOO_MANY_EVENT 너무 많은 이벤트 발생 알림 CLOUD_WATCH Cloud Watch 알림 EXCEPTION Exception 알림",
  "product": "JAVA 모니터링",
  "header": "이벤트 메시지"
},
{
  "url": "https://docs.whatap.io/java/set-event-format",
  "title": "이벤트 수신 포맷",
  "content": "애플리케이션 경고 알림. 애플리케이션 알림은 Event Title, Event Message 모두 제공합니다. 이벤트 상태가 해결되면 추가 알림 기능을 사용하는 경우 이벤트 발생 조건이 해제되면 Evnet Off Message가 전송됩니다. Event Type Event Level Event Title Event Message Event Off Message 애플리케이션 CPU Warning HIGH_CPU CPU is high. ${value}% (>= ${threshold}%) RECOVERED: CPU is high. less than ${threshold}% 애플리케이션 CPU Critical CRITICAL_HIGH_CPU CPU is too high. ${value}% (>= ${threshold}%) RECOVERED: CPU is too high. less than ${threshold}% 애플리케이션 메모리 Warning HIGH_MEMORY Memory is high. ${value}% (>= ${threshold}%) RECOVERED: Memory is high. less than ${threshold}% 애플리케이션 메모리 Critical CRITICAL_HIGH_MEMORY Memory is too high ${value}% (>= ${threshold}%) RECOVERED: Memory is too high. less than ${threshold}% 애플리케이션 디스크 Warning HIGH_DISK Disk is high ${value}% (>= ${threshold}%) RECOVERED: Disk id high. less than ${threshold}% 애플리케이션 디스크 Critical CRITICAL_HIGH_DISK Disk is too high ${value}% (>= ${threshold}%) RECOVERED: Disk is too highf. less than ${threshold}% 정상 트랜잭션 Warning HIGH_ACTIVE_TRANSACTION Active Transaction Count is over ${value} (>= ${threshold}) RECOVERED: Active Transaction Count is less than ${threshold} 에러 트랜잭션 Warning HIGH_ERROR_TRANSACTION Error Transaction Count is over ${threshold} (${value}) RECOVERED: Error Transaction Count is less than ${threshold} 느린 트랜잭션 Warning TOO_MANY_SLOW_TX Too many delayed transactions (${value}, above ${time} ms) RECOVERED: Too many delayed transactions. less than ${threshold}",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 경고 알림"
},
{
  "title": "보고서",
  "url": "https://docs.whatap.io/java/report-intro",
  "content": "보고서. 보고서를 안내합니다. 홈 화면 > 프로젝트 선택 > 보고서 보고서는 개별 프로젝트에 대해 서비스 이용 현황과 장애 발생 기록을 보고하는 문서입니다. 서비스 모니터링 담당자는 보고서를 통해 관련 부서 담당자들과 현황을 공유합니다. 모니터링 데이터 분석은 서비스의 개선 방향을 정하는 지표가 되기 때문에 중요합니다. 하지만 여러 대시보드의 데이터를 취합해서 문서화하는 일은 번거롭습니다. 와탭의 보고서 메뉴는 보고서 작성 업무 자동화를 지원합니다. 매주 보고서를 작성해야 하는 일, 정해진 시간에 보고서를 공유하는 일, 여러 가지 서식을 관리하는 일 모두 보고서 메뉴에서 할 수 있습니다. 팁보고서를 다운로드하거나 인쇄, 메일 발송 예약을 원하면 해당 버튼을 클릭하세요. HTML 형식으로 다운로드할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "보고서"
},
{
  "url": "https://docs.whatap.io/java/report-intro",
  "title": "보고서",
  "content": "보고서와 통합 보고서의 차이. 보고서 는 하나의 프로젝트에 대한 보고서를 생성하는 메뉴입니다. 따라서 프로젝트를 선택한 다음 사이드 메뉴의 보고서 메뉴를 통해 진입할 수 있습니다. 통합 보고서 는 여러 프로젝트에 대한 보고서를 생성하는 메뉴입니다. 프로젝트를 선택하지 않고 홈 화면의 사이드 메뉴에서 진입할 수 있습니다. 통합 보고서 에 대한 자세한 내용은 다음 문서 에서 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "보고서와 통합 보고서의 차이"
},
{
  "url": "https://docs.whatap.io/java/report-intro",
  "title": "보고서",
  "content": "보고서의 종류. 기본 보고서는 대기업, 공공기관 및 IT 서비스 기업에서 실제로 사용하고 있는 양식입니다. 원하는 양식이 있으면 support@whatap.io 로 요청해 주세요. 요청한 보고서는 보고서 목록에 추가됩니다.",
  "product": "JAVA 모니터링",
  "header": "보고서의 종류"
},
{
  "url": "https://docs.whatap.io/java/report-intro",
  "title": "보고서",
  "content": "보고서 양식 추가. 요청 양식이 범용성이 있을 경우 보고서 목록에 추가로 제공합니다. 요청 시 HTML 및 CSS 양식이 함께 제공될 경우 추가가 용이합니다. 요청 양식 예시 보고서 양식 추가 요청 시 예시와 같이 원하는 HTML 및 CSS 양식 첨부를 권장합니다. 세부 사항은 다음 예시 파일을 참조하세요. 예시 파일 : 다운로드 후 ZIP 형식의 압축을 풀어 HTML 형식의 예시 파일을 확인하세요. 파일 내 주석에 커스터마이징을 위한 CSS 영역과 HTML 영역 안내가 기술되어있습니다.",
  "product": "JAVA 모니터링",
  "header": "보고서 양식 추가"
},
{
  "url": "https://docs.whatap.io/java/report-intro",
  "title": "보고서",
  "content": "메일 발송 예약. 정기적으로 보고서를 이메일로 받으려면 보고서 메일 발송 예약 을 선택하세요. 출근 직후 수행하던 여러 가지 서비스 점검 절차를 메일 확인으로 대체할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "메일 발송 예약"
},
{
  "title": "이상치 탐지 경고 알림",
  "url": "https://docs.whatap.io/java/set-event-detect-anomal",
  "content": "이상치 탐지 경고 알림. 예상치 못한 패턴을 찾는 일련의 활동을 탐지해 경고 알림을 보내도록 설정할 수 있습니다. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 이상치 탐지 탭 선택 이상치 탐지(Anomaly Detection)란 데이터 안에서 anomaly, outlier, abnormal과 같이 예상치 못한 패턴을 찾는 일련의 활동입니다. 사용자는 메트릭스의 데이터를 기반으로 상승 패턴과 하락 패턴의 움직임이 평소와 같지 않을 경우 경고 알림을 보내도록 설정할 수 있습니다.  + 이벤트 추가 버튼을 선택해 이상치 탐지 이벤트 설정을 진행할 수 있습니다. 모든 설정을 완료한 다음 저장 버튼을 선택하세요. 이상치 탐지 창의 제목 오른쪽에 토글 버튼을 선택해 활성화 여부를 선택할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "이상치 탐지 경고 알림"
},
{
  "title": "에이전트 설정",
  "url": "https://docs.whatap.io/java/set-agent",
  "content": "에이전트 설정. 자바(Java) 에이전트의 설정 방법을 안내합니다. whatap.conf 파일을 통해 에이전트의 기본 설정, 서버 연결 및 데이터 전송 설정, 여러 애플리케이션 서버의 설정 파일 관리 방법 등을 포함합니다. 또한, WhaTap 모니터링 서비스 화면에서 직접 에이전트 옵션을 관리하는 방법도 제공합니다. 와탭 에이전트는 에이전트 별 필요한 설정을 whatap.conf 파일에 작성합니다. 에이전트는 환경변수를 통해 설정 파일의 위치를 파악하고 로딩합니다. 별도 설정이 없는 경우 에이전트는 자기 자신(whatap.agent-X.Y.Z.jar)이 위치한 디렉터리에서 whatap.conf 파일을 찾도록 구현했습니다. 5초에 한번씩 whatap.conf 파일의 변경 여부를 체크하고 리로딩합니다. 사용자의 편의성을 위해 와탭 모니터링 서비스에서도 에이전트 설정 기능을 제공하고 있습니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설정"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "기본 설정. whatap.conf whatap.home = . whatap.config = whatap.conf whatap.home : 기본값은 whatap.agent.jar 파일의 경로를 입력하세요. whatap.config : 파일명만 입력할 것을 권고합니다. 상대 패스를 같이 입력할 수는 있습니다. 에이전트가 데이터를 수집하고, 서버로 데이터를 전송하기 위해서는 최소한 액세스 키와 서버 주소는 설정돼 있어야 합니다. whatap.conf license = x220g160hgd29-x3qpff0garcus7-z4p0kao58un11a whatap.server.host = 10.10.0.1 와탭 에이전트는 최초 실행시 다음과 같이 어떤 jar 파일이 에이전트로 사용됐는지, 어떤 경로에서 whatap.conf 파일을 로딩하는지 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "기본 설정"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "서버 연결 및 데이터전송. 와텝 에이전트는 whatap.conf 파일에 설정한 서버 주소로 연결합니다. whatap.conf whatap.server.host = 10.10.1.1 whatap.server.port = 6600 # 기본값 TCP 세션을 연결하면 license 를 이용해 서버로부터 통신키를 전달 받습니다. 잘못된 license 를 설정하면 서버는 세션을 종료합니다. TCP 연결이 반복적으로 종료되면 방화벽 문제 확인하거나 license 값이 올바른지 확인하세요. TCP 세션을 연결하면 서버로부터 받은 비밀키를 기반으로 보안 통신으로 데이터를 전송합니다.",
  "product": "JAVA 모니터링",
  "header": "서버 연결 및 데이터전송"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "여러 애플리케이션 서버의 설정 파일 관리. 한 서버에 여러 애플리케이션을 운영할 경우, 각 애플리케이션 별 설정 파일을 별도로 관리하려면 whatap.conf 파일명을 변경하고 시작 스크립트에 JVM 옵션을 추가하세요. Service A -Dwhatap.config = whatap_Aservice.conf Service B -Dwhatap.config = whatap_Bservice.conf 주의 whatap.conf 설정 파일은 반드시 ${WHATAP_HOME} 경로에 위치해야 합니다.",
  "product": "JAVA 모니터링",
  "header": "여러 애플리케이션 서버의 설정 파일 관리"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "서비스 화면에서 에이전트 설정하기. 홈 화면 > 프로젝트 선택 > 관리 > 에이전트 설정 모니터링 대상 서버에 위치한 whatap.conf 파일을 직접 수정하지 않고 와탭 모니터링 서비스 에서 에이전트 설정 옵션을 추가하거나 수정, 삭제할 수 있습니다. 노트 이 기능은 수정 권한을 가진 멤버만 이용할 수 있습니다. 수정 권한이 없는 멤버는 설정 내용을 조회만 할 수 있습니다. 옵션 값으로 설정할 수 있는 형식은 다음과 같습니다. Boolean 형식의 값은 true 또는 false 를 선택하세요. 숫자 형식의 값은 숫자만 입력할 수 있습니다. 텍스트(String) 형식의 값을 입력 또는 수정할 경우 옵션 셜명을 자세히 확인하세요. 수정할 수 없는 옵션은 선택할 수 없습니다. (예, license ) 추가 또는 수정, 삭제한 옵션에 따라 에이전트를 재시작해야할 수 있습니다. 애플리케이션 종류 및 에이전트의 버전에 따라 적용할 수 있는 옵션 키는 다를 수 있습니다. 업무 디폴트 : whatap.conf 파일에서 whatap.okind 항목으로 분류한 에이전트들에 옵션을 공통 적용할 수 있고, 적용된 옵션을 확인할 수 있습니다. 프로젝트 디폴트 : 프로젝트에 소속된 모든 에이전트들에 옵션을 공통 적용할 수 있고, 적용된 옵션을 확인할 수 있습니다. 노트 업무 디폴트 또는 프로젝트 디폴트 탭을 선택한 다음 옵션을 적용하는 것은 에이전트를 공통으로 관리하는 데 유용합니다. 옵션의 적용 우선 순위는 업무 디폴트 , 프로젝트 디폴트 , 에이전트 설정 순입니다. 프로젝트 디폴트 에서 b 옵션값을 1000을 적용하고, 업무 디폴트 에서 b 옵션값을 2000으로 적용하면, 업무 디폴트 에서 설정한 옵션값 2000을 우선 적용합니다. 프로젝트 디폴트 에서 b 옵션값을 아무것도 입력하지 않았고 업무 디폴트 에 b 옵션값에 2000이 적용된 경우에도 업무 디폴트 에서 설정한 옵션값을 우선 적용합니다.",
  "product": "JAVA 모니터링",
  "header": "서비스 화면에서 에이전트 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "옵션 추가하기. 에이전트 목록 에서 옵션을 추가하려는 에이전트를 선택하세요. 옵션 작성 에서 추가할 옵션 항목을 선택하세요. 검색 에서 추가할 옵션을 찾을 수 있습니다. 텍스트를 입력하면 일치하는 옵션을 필터링합니다. 직접 입력 을 선택하면 옵션 키와 값을 입력할 수 있습니다. 선택한 옵션 키에 대한 설명과 기본값을 확인한 다음 설정값을 입력하세요. 선택한 옵션을 취소하려면 버튼을 선택하세요. 옵션을 추가 설정하려면 + 추가하기 버튼을 선택하고 2번의 과정을 반복하세요. 원하는 모든 옵션을 추가했으면 화면 오른쪽 위에 적용 버튼을 선택하세요. 선택한 옵션 및 설정값을 에이전트에 적용합니다. 노트 수정 중인 내용을 초기화하려면 화면 오른쪽 위에 버튼을 선택하세요. 옵션값으로 아무것도 입력하지 않은 상태에서 적용 버튼을 선택하면 해당 옵션을 삭제합니다. 이미 추가한 옵션은 옵션 목록에서 선택할 수 없습니다. 애플리케이션 종류 및 에이전트의 버전에 따라 적용할 수 있는 옵션 키는 다를 수 있습니다. 예시로 제공한 이미지는 애플리케이션 종류 및 에이전트에 따라 다를 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "옵션 추가하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "옵션 수정 또는 삭제하기. 화면을 위 또는 아래로 스크롤하거나 왼쪽의 옵션 목록에서 수정 또는 삭제하려는 옵션을 선택하세요. 변경하려는 옵션에서 원하는 값을 선택하거나 수정하세요. 옵션을 삭제하려면 버튼을 선택하세요. 변경한 사항을 적용하려면 적용 버튼을 선택하세요. 노트 화면 가장 위로 이동하려면 옵션 추가로 이동 버튼을 선택하세요. 옵션값으로 아무것도 입력하지 않은 상태에서 적용 버튼을 선택하면 해당 옵션을 삭제합니다.",
  "product": "JAVA 모니터링",
  "header": "옵션 수정 또는 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "여러 에이전트에 동시 적용하기. 프로젝트에 소속된 여러 개의 에이전트에 변경한 옵션을 동시에 적용할 수 있습니다. 화면 오른쪽 위에 다중 에이전트 적용 체크박스를 선택하면 각 옵션 항목에 체크박스가 생성됩니다. 동시에 적용하길 원하는 옵션의 체크박스를 선택하세요. 여러 개를 선택할 수 있습니다. 화면 오른쪽 위에 적용 버튼을 선택하세요. 에이전트 적용 창이 나타나면 변경한 옵션을 적용할 에이전트를 선택하세요. 모두 선택하려면 전체 선택 체크박스를 선택하세요. 적용 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "여러 에이전트에 동시 적용하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "에이전트 기본값 설정하기. 프로젝트에 새로운 에이전트를 추가할 경우 기존의 설정값을 반복해서 적용하는 번거로움을 피하고 싶다면 프로젝트별, 업무별 기본 설정값을 만들어 적용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 기본값 설정하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "에이전트 설정 공유하기. 에이전트 설정 내용을 json 형식의 파일로 저장하고 파일을 불러와 다른 에이전트에 적용할 수 있습니다. 에이전트 목록 에서 설정 내용을 json 파일로 내보낼 에이전트를 선택하세요. 화면 오른쪽 위에 버튼을 선택하세요. json 파일을 다운로드하세요. 에이전트 목록 에서 다른 에이전트를 선택하세요. 화면 오른쪽 위에 버튼을 선택하세요. json 파일을 통해 가져온 에이전트 설정을 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설정 공유하기"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "에이전트 설정 옵션 안내. 다음 링크를 통해 설정할 수 있는 옵션들에 대한 설명을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설정 옵션 안내"
},
{
  "url": "https://docs.whatap.io/java/set-agent",
  "title": "에이전트 설정",
  "content": "에이전트 이름 식별. 에이전트 이름 식별 모니터링 대상을 구별하기 위한 애플리케이션 서버의 고유 식별자 설정에 대해 안내합니다. 모니터링 대상 시스템 내에서 애플리케이션 서버를 정확히 구분하는 데 필수적입니다. 서버 유형, IP 등의 정보를 기반으로 한 자동 이름 지정 방식과 사용자가 직접 whatap.conf 파일이나 JVM 옵션을 통해 에이전트 이름을 설정하는 방법을 확인할 수 있습니다. 에이전트 기능 제어 자바(Java) 애플리케이션 서버의 모니터링을 위한 에이전트 기능을 세밀하게 조정하는 방법을 안내합니다. 에이전트의 활성화/비활성화, 트랜잭션 및 성능 카운터 추적, OS 정보 수집 등의 기능을 포함하며, 각 기능을 제어하는 다양한 설정 옵션들에 대해 확인할 수 있습니다. CPU/메모리/디스크 사용량 수집 자바(Java) 에이전트가 CPU, 메모리, 디스크 사용량을 수집하는 방법을 안내합니다. 자바(Java)의 JMX 라이브러리를 기본적으로 활용하며, 필요에 따라 Linux의 proc 디렉터리나 oshi, sigar 라이브러리를 통한 성능 지표 수집 방법을 확인할 수 있습니다. 에이전트 통신 설정 자바(Java) 에이전트가 애플리케이션 서버로부터 수집한 데이터를 서버로 전송하기 위한 네트워크 설정 방법을 안내합니다. 주요 설정 옵션으로는 수집 서버 호스트, 포트, 타임아웃 값, 네트워크 전송 크기, 데이터 전송 큐 크기 등이 있으며, 에이전트의 효율적인 데이터 관리 및 안정적인 서버 통신을 보장하는 데 중요합니다. 에이전트 성능 자바(Java) 에이전트의 성능 관련 옵션을 안내합니다. 동시에 처리할 수 있는 최대 트랜잭션 수와 트랜잭션 데이터를 저장하는 버퍼의 초기 크기 설정을 확인할 수 있습니다. 이는 시스템의 부하와 자원 사용을 최적화하는 데 중요한 역할을 합니다. 에이전트 로그 설정 자바(Java) 애플리케이션 환경에서 발생하는 로그 데이터를 에이전트를 통해 관리하는 방법을 안내합니다. 로그 파일의 경로 및 이름 설정, 보관 기간 설정, 로그 모니터링, 사용자 정의 로그 추적 활성화 방법 등을 포함합니다. 로그 관리를 위한 다양한 설정 옵션을 제공해 시스템의 효율적인 로그 관리를 도와줍니다. 트랜잭션 자바(Java) 애플리케이션 내 각 트랜잭션의 성능 데이터를 에이전트가 추적하고 분석할 수 있는 설정 방법을 안내합니다. 트랜잭션의 요청 처리, 응답 시간, 자원 사용량 등을 추적하여 애플리케이션 성능을 평가합니다. DB, SQL 데이터베이스 및 SQL 성능 데이터 수집을 위한 자바(Java) 에이전트의 다양한 옵션을 안내합니다. DBCP, Hikari, Tomcat 등 다양한 DB 연결 풀(Connection Pool) 정보 추적 및 SQL 실행 세부 사항을 기록할 수 있습니다. 또한, SQL 파라미터 정보 기록, DB 연결 누수 추적 등 성능 최적화에 필수적인 정보 수집 옵션을 제공합니다. HTTPC, API Call HTTP 외부 호출과 API 호출 관련 데이터를 수집, 분석을 위한 자바(Java) 에이전트의 옵션 설정 방법을 안내합니다. TOO SLOW 에러 처리 및 CPU와 메모리 사용량 추적, 호출 시점의 스택 트레이스 기록, URL 정규화 등 세밀한 모니터링을 위한 다양한 옵션을 제공합니다. 이를 통해 개발자는 애플리케이션의 외부 의존성을 효율적으로 관리하고 성능 문제를 식별할 수 있습니다. 스크립트 플러그인 자바(Java) 에이전트에서 제공하는 플러그인 옵션을 통해 사용자가 원하는 코드를 트레이스 데이터에 주입하거나 메소드 수행 전후로 부가 정보를 추가하는 방법을 제공합니다. 메소드 시작/종료 시점에 특정 코드를 실행할 위치를 설정하는 옵션과 사용자 정의 pool을 모니터링하기 위한 클래스 설정 방법을 포함합니다. 실제 플러그인 적용 사례를 통해 구체적인 활용 방안을 제시하며, 모니터링의 유연성과 세밀함을 높일 수 있는 다양한 설정 예시와 API 사용법을 안내합니다. 사용자 수 자바(Java) 웹 애플리케이션 서버에 연결된 사용자 수를 에이전트 설정을 통해 집계하는 방법을 안내합니다. 실시간 사용자 집계 활성화 여부 설정, 사용자 수를 집계하기 위한 쿠키 제한 설정, IP 주소 또는 HTTP 헤더 특정 값을 기준으로 한 사용자 집계 방법, 클라이언트 IP 정보 추적을 위한 HTTP 헤더 설정 등을 포함합니다. 부하량 제어 자바(Java) 애플리케이션 서버의 트래픽 쓰로틀링 옵션을 설정하는 에이전트 옵션을 안내합니다. 애플리케이션의 최대 동시 요청 수를 제한하고, 특정 사용자나 URL을 기준으로 서비스 접근을 제어하는 기능을 포함합니다. 사용자 정의 메시지 전송, URL 리다이렉션 설정, 이벤트 알림 활성화 등 다양한 옵션을 제공하여 과부하 상황에서 애플리케이션의 안정성을 보장할 수 있습니다. 에이전트 알림 자바(Java) 에이전트를 통해 애플리케이션 서버에서 발생하는 다양한 이벤트에 대한 알림 설정 방법을 제공합니다. 트랜잭션 재귀 호출, 서비스 거절, HTTPC 연결 오류, 힙 및 디스크 사용량 초과, CPU 사용량 임계치 도달, DB 커넥션 중복 할당 및 예외 발생 시 이벤트 알림을 설정하는 옵션을 포함합니다. 각 이벤트별로 발행 간격, 발행 여부, 임계치 설정 등 세밀한 조정을 할 수 있습니다. Apdex 사용자 만족도를 측정하는 Apdex 점수를 설정하는 자바(Java) 에이전트 옵션을 안내합니다. Apdex 지표를 통해 애플리케이션의 성능을 객관적으로 평가하고 사용자 경험을 개선할 수 있습니다. 통계 자바(Java) 애플리케이션 모니터링을 위한 다양한 통계 수집 기능 관련 에이전트 옵션을 안내합니다. 성능 카운터 확장, 도메인별 트랜잭션 수집, 멀티 서버 트랜잭션 의존성 분석, 로그인 유형별 및 Referer 별 통계 수집 등을 포함합니다. 또한 SQL, HTTP Call, 오류 통계와 사용자 에이전트 정보 수집에 대한 최대 레코드 수 제한 설정도 확인할 수 있습니다. 토폴로지 맵 자바(Java) 에이전트가 수집한 데이터를 사용하여 애플리케이션의 토폴로지 맵을 생성하는 에이전트 설정 옵션을 안내합니다. 트랜잭션 호출자, 데이터베이스 연결 정보, HTTPC 아웃바운드 정보, 액티브 트랜잭션 상태 등의 다양한 지표를 통해 시스템의 토폴로지를 시각화하고 분석할 수 있습니다. 트랜잭션 에러 스택 자바(Java) 애플리케이션에서 트랜잭션 중 발생하는 에러를 감지하고 이에 대한 스택 트레이스를 표시하는 에이전트 설정 옵션을 안내합니다. 트랜잭션, 메소드, SQL, HTTP 호출, SOCKET 호출 등 다양한 영역에서 에러 정보를 수집하고, 에러 스택의 길이, 제목 길이 등을 설정하는 방법을 포함합니다. 에이전트 설정을 통해 에러 관리를 개선하고, 애플리케이션의 오류 진단을 보다 효율적으로 수행할 수 있도록 지원합니다. 부가 기능 자바(Java) 애플리케이션의 모니터링 수준을 사용자의 필요에 맞게 조정할 수 있는 추가적인 에이전트 설정 옵션을 안내합니다. SQL 파라미터 수집, HTTP 파라미터 및 헤더 정보 수집, 사용자 IP 정보 추출, 사용자 수 추적 방법 선택, SAP Function 추적 등을 포함합니다. 이 옵션들을 통해 보다 세밀한 데이터 수집 및 분석이 가능하며, 특히 보안이 중요한 환경에서 필요에 따라 옵션을 조정할 수 있습니다. 비동기 추적 자바(Java) 에이전트 설정을 통해 비동기 애플리케이션 활동을 추적하는 방법을 안내합니다. CompletableFuture 메소드 수집 방법과 사용자 애플리케이션에 해당 메소드를 hooking하는 방식을 포함합니다. 설정 예시와 함께 whatap.conf 파일에 추가해야 할 옵션을 제공하여 비동기 호출의 성능 모니터링을 강화할 수 있도록 지원합니다. 오픈소스 추적 자바(Java) 애플리케이션에서 사용하는 프레임워크나 오픈소스 라이브러리를 에이전트를 통해 추적하는 설정 방법을 제공합니다. Java 에이전트 설정 파일(whatap.conf)에 weaving 옵션을 추가하여 설정하며, 다양한 프레임워크 및 라이브러리 버전에 대응하는 방법을 안내합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 이름 식별"
},
{
  "title": "스크립트 플러그인",
  "url": "https://docs.whatap.io/java/script-plugin",
  "content": "스크립트 플러그인. 자바(Java) 에이전트에서 제공하는 플러그인 옵션을 통해 사용자가 원하는 코드를 트레이스 데이터에 주입하거나 메소드 수행 전후로 부가 정보를 추가하는 방법을 제공합니다. 메소드 시작/종료 시점에 특정 코드를 실행할 위치를 설정하는 옵션과 사용자 정의 pool을 모니터링하기 위한 클래스 설정 방법을 포함합니다. 실제 플러그인 적용 사례를 통해 구체적인 활용 방안을 제시하며, 모니터링의 유연성과 세밀함을 높일 수 있는 다양한 설정 예시와 API 사용법을 안내합니다. Java 에이전트에서 제공하는 플러그인 옵션을 통해 사용자가 원하는 코드를 트레이스 데이터에 주입하거나 메소드 수행 전후로 부가 정보를 추가하는 방법을 제공합니다. 메소드 시작/종료 시점에 특정 코드를 실행할 위치를 설정하는 옵션과 사용자 정의 pool을 모니터링하기 위한 클래스 설정 방법을 포함합니다. 실제 플러그인 적용 사례를 통해 구체적인 활용 방안을 제시하며, 모니터링의 유연성과 세밀함을 높일 수 있는 다양한 설정 예시와 API 사용법을 안내합니다.",
  "product": "JAVA 모니터링",
  "header": "스크립트 플러그인"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "플러그인 옵션. Java 에이전트 플러그인은 메소드 시작/종료 부분에 삽입해 실행합니다. 플러그인을 적용할 위치(클래스, 메소드)는 에이전트 옵션으로 설정할 수 있습니다. hook_trace_helper_start_patterns 메소드 시작 부분에 트레이스 플러그인을 삽입할 지점(클래스, 메소드)을 설정합니다. 플러그인 코드는 $WHATAP_HOME /plugin/TraceHelperStart.x 파일에 작성하세요. hook_trace_helper_end_patterns 메소드 종료 부분에 트레이스 플러그인을 삽입할 지점(클래스, 메소드)를 설정합니다. 플러그인 코드는 $WHATAP_HOME /plugin/TraceHelperEnd.x 파일에 작성하세요. hook_trace_helper_patterns 메소드 시작/종료 양쪽에 트레이스 플러그인을 삽입할 지점(클래스, 메소드)을 설정합니다. 플러그인 코드는 $WHATAP_HOME /plugin/TraceHelperStart.x , $WHATAP_HOME /plugin/TraceHelperEnd.x 파일에 각각 작성하세요. custom_pool_classes 사용자 정의 pool을 모니터링 하기 위해 pool 사용량 정보를 가진 클래스를 설정합니다. 플러그인 코드는 $/WHATAP_HOME /plugin/CustomPool.x 에 작성합니다.",
  "product": "JAVA 모니터링",
  "header": "플러그인 옵션"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "플러그인 설정 예시. 여러 개의 클래스를 설정하는 경우 쉼표(,)를 구분자로 이용하세요. 패키지 이름의 문자열 일부 혹은 전부를 '*'로 치환할 수 있습니다. 패키지와 메소드 이름을 설정하는 경우 whatap . bytecode . instrument . PluginTestA . testA , whatap . bytecode . instrument . PluginTestB . testB * 패키지와 메소드 이름을 로 치환하는 경우 * PluginTestA . testA , whatap . bytecode . instrument . PluginTestB . * * . testA , * PluginTestB . testB 전체를 대상으로 하는 경우 * . * Custom Pool을 설정하는 경우 Custom Pool은 식별자@패키지 명 형태로 설정합니다. 예시, Class 명 앞에 whatap_plugin_guide 라는 식별자를 설정니다. 식별자와 클래스는 @로 구분합니다. whatap_plugin_guide @com.ibm.ws.connectionpool.monitor.ConnectionPoolStats",
  "product": "JAVA 모니터링",
  "header": "플러그인 설정 예시"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "플러그인 코드 작성 예시. 대부분의 경우 오브젝트를 반환하므로 명시적 type casting 처리가 필요합니다. 다음은 플러그인 코드 작성 예시입니다.",
  "product": "JAVA 모니터링",
  "header": "플러그인 코드 작성 예시"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "설정한 메소드 시작 시간을 트레이스에 기록하기. Java 에이전트 hook_trace_helper_patterns 옵션에 적용할 메소드를 whatap.conf 파일에 작성하세요. $WHATAP_HOME/whatap.conf hook_trace_helper_patterns = org.apache.catalina.connector.RequestFacade.* TraceHelperStart.x 파일에 플러그인 코드를 작성하세요. $WHATAP_HOME/plugin/TraceHelperStart.x // String prefix에 클래스명, 메소드명을 대입하세요. String prefix = $point . class1 + \".\" + $point . method ; // 와탭 트레이스 속성 명칭을 `prefix` + \"st\" 로 현재 시간을 설정하세요. $ctx . setAttribute ( prefix + \"st\" , new Long ( System . currentTimeMillis ( ) ) ) ; // 트레이스 정보에 현재 시간을 추가하세요. $ctx . profile ( prefix + \" Start\" , new java . util . Date ( ) . toString ( ) ) ; 트레이스 내역에 메소드 시작시간을 다음과 같이 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "설정한 메소드 시작 시간을 트레이스에 기록하기"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "설정한 메소드 종료시간과 수행시간을 트레이스에 기록하기. Java 에이전트 hook_trace_helper_patterns 옵션에 적용할 메소드를 whatap.conf 파일에 작성하세요. $WHATAP_HOME/whatap.conf hook_trace_helper_patterns = org.apache.catalina.connector.RequestFacade.* TraceHelperEnd.x 파일에 플러그인 코드를 작성하세요. $WHATAP_HOME/plugin/TraceHelperEnd.x String prefix = $point . class1 + \".\" + $point . method ; // TraceHelperStart.x 파일에서 추가한 트레이스 속성을 가져오세요. long st = ( ( Long ) $ctx . getAttribute ( prefix + \"st\" ) ) . longValue ( ) ; long gap = System . currentTimeMillis ( ) - st ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( new java . util . Date ( ) . toString ( ) + \" (Gap:\" + gap + \" milliseconds)\" ) ; // 트레이스 정보에 시작 시간과의 현재 시간과의 Gap(수행시간)을 추가하세요. $ctx . profile ( prefix + \" End\" , sb . toString ( ) ) ; 트레이스 내역에 메소드 종료시간과 수행시간을 다음과 같이 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "설정한 메소드 종료시간과 수행시간을 트레이스에 기록하기"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "플러그인 API. 플러그인 API는 공통 항목인 $ctx , $point , $req , $res 로 구분합니다. 트랜잭션 시작/종료시, HTTPC 구간, 특정 메소드 실행 구간 등에 적용할 수 있습니다. 주의 플러그인 API를 사용해 개인식별정보 저장을 금지하며, 개인정보 수집 시 해당 내용을 개인정보처리방침에 명시해야합니다.",
  "product": "JAVA 모니터링",
  "header": "플러그인 API"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "파라미터 제공 - 공통 플러그인 파일. 파라미터 메소드/변수 설명 $ctx 속성관리 void setAttribute(String key, Object value) Attribute를 설정합니다. Object getAttribute(String key) Attribute의 값을 가져옵니다. 트레이스 데이터 void profile(String desc) 트레이스 메시지 기록 void profile(String name, String msg) 트레이스 Step명, 메시지 기록 void profile(String name, String msg, int elapsed) 트레이스 Step명, 메시지, 수행시간 기록 void profile(String name, String msg, int elapsed, int value) 트레이스 Step명, 메시지, 수행시간, 순서 기록 HTTP Request String service() 서비스 이름 반환 void service(String name) 서비스 이름 설정 int serviceHash() 서비스이름의 Hash값 반환 String remoteIp() 서비스 요청 IP 반환 void remoteIp(String ip) 서비스 요청 IP 설정 boolean isError() 에러 여부 반환 void login(String id) 로그인 ID 설정 String login() 로그인 ID 반환 String httpMethod() HTTP Method 반환 String httpQuery() HTTP Query 반환 String httpContentType() HTTP ContentType 반환 String userAgent() User-Agent 반환 int status() HTTP status 반환 $point String class1 클래스명 String method 메소드명 Object this1 Hooking 대상 클래스/메소드 Object[] args 인자 Object return1 리턴",
  "product": "JAVA 모니터링",
  "header": "파라미터 제공 - 공통 플러그인 파일"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "파라미터 미제공 - 공통 플러그인 파일. 파라미터 메소드/변수 설명 없음 void log(Object c) Logger를 통한 Logging void println(Object c) System.out.println() 을 통한 출력 Object field(Object o, String field) Field 값 반환 Object method(Object o, String method) Invoke 메소드 Object method(Object o, String method, String param) Invoke 메소드 String toString(Object o) Object를 toSting() 반환 String toString(Object o, String def) Object를 toSting() 반환, null 인경우 def 반환 int syshash(Object o) hash 값 반환 int syshash(HookArgs hook, int x) x 번째 argument의 hash 값 반환 int syshash(HookArgs hook) argument의 hash 값 반환 int cint(Object o) int로 반환 float cfloat(Object o) float 으로 반환 String cString(Object o) String 으로 반환 long clong(Object o) long으로 반환 double cdouble(Object o) double로 반환 String desc(Object o) Class signature 반환 String toJson(Object o) json으로 반환 void shell(final String cmd, final String env) shell 실행",
  "product": "JAVA 모니터링",
  "header": "파라미터 미제공 - 공통 플러그인 파일"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "데몬 및 배치. 데몬, 배치와 같은 애플리케이션 서버를 모니터링할 때 시작점으로 설정한 메소드에 적용하는 API입니다. 다음 파일에 코드를 작성하세요. 서비스 시작 부분 적용: $WHATAP_HOME /plugin/AppServiceStart.x 서비스 종료 부분 적용: $WHATAP_HOME /plugin/AppServiceEnd.x 플러그인 파일 파라미터 메소드/변수 설명 AppServiceStart.x $ctx 공통 속성 참조 $point 공통 속성 참조 AppServiceEnd.x $ctx 공통 속성 참조",
  "product": "JAVA 모니터링",
  "header": "데몬 및 배치"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "HTTP 서비스. javax.servlet.http.HTTPServlet 클래스를 사용하는 일반적인 웹 애플리케이션에 적용할 수 있는 API입니다. 다음 파일에 코드를 작성하세요. 서비스 시작 부분 적용: $WHATAP_HOME /plugin/HttpServiceStart.x 서비스 종료 부분 적용: $WHATAP_HOME /plugin/HttpServiceEnd.x 플러그인 파일 파라미터 메소드/변수 설명 HttpServiceStart.x/ HttpServiceEnd.x $ctx 공통 속성 참조 $req String getCookie(String key) Cookie 값 반환 String getRequestURI() RequestURI 반환 String getRemoteAddr() RemoteAddr 반환 String getMethod() HTTP Method 반환 String getQueryString() HTTP QueryString 반환 String getParameter(String key) Parameter 값 반환 Object getAttribute(String key) Attribute 값 반환 String getHeader(String key) Header 값 반환 Enumeration getParameterNames() getParameterNames 반환 Enumeration getHeaderNames() getHeaderNames 반환 WrSession getSession() Session Wrapper 반환 Set getSessionNames() getSessionNames 반환 Object getSessionAttribute(String key) getSessionAttribute 반환 boolean isOk() Plugin 상태 반환 Throwable error() Error 반환 $res String getContentType() ContentType 반환 String getCharacterEncoding() CharacterEncoding 반환 boolean isOk() Plugin 상태 반환 Throwable error() Error 반환",
  "product": "JAVA 모니터링",
  "header": "HTTP 서비스"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "HTTP Outbound. HttpClient 와 같은 라이브러리를 이용해 HTTP Outbound Call 수행 할 때 적용할 수 있는 API입니다. 다음 파일에 코드를 작성하세요. 서비스 시작 부분 적용: $WHATAP_HOME /plugin/HttpCallStart.x 서비스 종료 부분 적용: $WHATAP_HOME /plugin/HttpCallEnd.x 플러그인 파일 파라미터 메소드/변수 설명 HttpCallStart.x $ctx 공통 속성 참조 $req String url() URL 반환 String host() Hostname 반환 int port() Port 반환 boolean isOk() Plugin 상태 반환 Throwable error() Error 반환 HttpCallEnd.x $ctx 공통 속성 참조 $res String getContentType() ContentType 반환 String getCharacterEncoding() CharacterEncoding 반환 boolean isOk() Plugin 상태 반환 Throwable error() Error 반환",
  "product": "JAVA 모니터링",
  "header": "HTTP Outbound"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "특정 메소드. 자바 에이전트 옵션( hook_trace_helper_* )을 통해 설정한 메소드에 대해 적용하는 API 입니다. 플러그인 파일 파라미터 메소드/변수 설명 TraceHelperStart.x $ctx 공통 속성 참조 $point 공통 속성 참조 TraceHelperEnd.x $ctx 공통 속성 참조 $point 공통 속성 참조",
  "product": "JAVA 모니터링",
  "header": "특정 메소드"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "사용자 정의 Pool. 사용자 정의 Pool을 모니터링 하기 위한 API입니다. Pool 사용량 정보를 가진 메소드를 설정하면 와탭 모니터링 서비스에서 관찰하고 통계 정보를 확인할 수 있습니다. 플러그인 파일 파라미터 메소드/변수 설명 CustomPool.x $id custom_pool_classes에 설정한 id 값 $pool custom_pool_classes에 설정한 class $result active(Object o) Active Pool Count 설정 int idle(Object o) Idle Pool Count 설정",
  "product": "JAVA 모니터링",
  "header": "사용자 정의 Pool"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "플러그인 적용 사례. 다음은 실제 플러그인 적용 사례입니다.",
  "product": "JAVA 모니터링",
  "header": "플러그인 적용 사례"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "Elasticsearch 엔진의 검색 요청 모니터링. Elasticsearch(이하 ES) 엔진은 서블릿 엔진이 아니기 때문에 비정형 모니터링을 해야 합니다. 타상품이 지표 중심의 모니터링을 한다면 와탭의 플러그인을 활용해 ES의 요청 및 처리시간, 검색 키워드를 트레이싱할 수 있습니다. whatap.conf # 트랜잭션 EndPoint로 org.elasticsearch.search.SearchService.executeQueryPhase를 설정합니다. hook_service_patterns = org.elasticsearch.search.SearchService.executeQueryPhase # hook_trace_helper_start_patterns에 등록된 메소드가 실행될 때마다 TraceHelperStart.x 파일의 코드를 실행합니다. hook_trace_helper_start_patterns = org.elasticsearch.search.query.QueryPhase.execute ${WHATAP_HOME}/plugin/TraceHelperStart.x if ( $ctx . inner ( ) == null ) { return ; } try { String tclass = \"org.elasticsearch.search.query.QueryPhase\" ; String tmethod = \"execute\" ; if ( tclass . equals ( $point . class1 ) && tmethod . equals ( $point . method ) ) { // 첫번째 argument의 query 메소드 호출 결과를 String query에 저장, // org.elasticsearch.search.query.QueryPhase.execute(SearchContext searchContext)입니다. // 즉, SearchContext.query() 메소드를 invoke 한 결과를 String query에 저장합니다. String query = \" \" + method ( $point . args [ 0 ] , \"query\" ) ; // String query를 트레이스 정보로 출력 $ctx . profile ( query ) ; } } catch ( Exception e ) { $ctx . profile ( e . toString ( ) ) ; }",
  "product": "JAVA 모니터링",
  "header": "Elasticsearch 엔진의 검색 요청 모니터링"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "특정 IP로 유입되는 트랜잭션 수집 제외. Health Check, 내부 사용자들이 유발한 트랜잭션을 수집 제외하려면 플러그인을 활용할 수 있습니다. ${WHATAP_HOME}/plugin/HttpServiceStart.x // ignoreIP 값을 수집 제외할 IP로 설정하세요. String ignoreIP = \"123.234.123.234\" ; String remoteIP = $req . getRemoteAddr ( ) ; if ( $ctx . ok ( ) && remoteIP != null ) { if ( remoteIP . equals ( ignoreIP ) ) { $ctx . ignore ( ) ; } }",
  "product": "JAVA 모니터링",
  "header": "특정 IP로 유입되는 트랜잭션 수집 제외"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "Atomikos Pool 모니터링. API 문서 를 참고해 적용하세요. whatap.conf custom_pool_classes = atomikos@com.atomikos.jdbc.internal.AbstractDataSourceBean ${WHATAP_HOME}/plugin/CustomPool.x int total = cint ( method ( $pool , \"poolTotalSize\" ) ) ; int avail = cint ( method ( $pool , \"poolAvailableSize\" ) ) ; $result . active ( total - avail ) ; $result . idle ( avail ) ;",
  "product": "JAVA 모니터링",
  "header": "Atomikos Pool 모니터링"
},
{
  "title": "애플리케이션 보고서",
  "url": "https://docs.whatap.io/java/report-apm",
  "content": "애플리케이션 보고서. 애플리케이션 보고서를 안내합니다. 홈 화면 > 프로젝트 선택 > 보고서 보고서 화면에서  버튼을 클릭하면 일간, 주간, 월간으로 분류된 각종 애플리케이션 분석 보고서를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 보고서"
},
{
  "title": "성능 추이",
  "url": "https://docs.whatap.io/java/performance-trend",
  "content": "성능 추이. 성능 추이를 안내합니다. 홈 화면 > 프로젝트 선택 > 분석 > 성능 추이 와탭 모니터링 서비스 초기 화면에서 프로젝트를 선택한 다음 프로젝트 메뉴 하위에 분석 > 성능 추이 메뉴를 선택하세요. 조회를 원하는 특정 시간 범위 내 수행된 성능에 대한 여러 지표를 성능 추이 메뉴에서 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "성능 추이"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": " 성능 추이 조회 조건. 시간 선택자를 통해 조회를 원하는 시간 범위를 선택할 수 있습니다. 기본 조회 기간은 1일 입니다. 조회 범위가 3시간 이하인 경우 5초 Raw 데이터를 사용해 5초 추이를 확인할 수 있습니다. 조회 범위가 하루 이하인 경우 5분 통계를 사용해 5분 추이를 확인할 수 있습니다. 조회 범위가 하루 이상인 경우 1시간 통계를 사용해 1시간 추이를 확인할 수 있습니다. 애플리케이션 선택자를 통해 전체 또는 조회를 원하는 특정 애플리케이션을 선택할 수 있습니다. CSV 다운로드 아이콘을 선택해 화면에 표시된 목록 데이터를 CSV 파일로 다운로드할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": " 성능 추이 조회 조건"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": " 성능 추이 차트. 지정한 조회 시간 범위를 차트 상단에서 확인할 수 있습니다. 차트 영역에서 동시 접속 사용자 , 응답 시간 , CPU , 힙 메모리 , 액티브 트랜잭션 , 트랜잭션 Top 10 ,*** HTTP 호출 Top 10***, SQL Top 10 등의 정보를 확인할 수 있습니다. 스냅샷 아이콘을 선택해 위젯의 옵션을 제외한 차트를 스냅샷 할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": " 성능 추이 차트"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "동시 접속 사용자. 실시간 브라우저 사용자 수를 보여줍니다. 사용자는 브라우저 IP를 기반으로 카운팅합니다. 5분 통계 사용 시 5분 동안 요청을 호출한 유니크한 사용자의 수를 표시합니다. 1시간 통계 사용 시 1시간 동안 요청을 호출한 유니크한 사용자의 수를 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "동시 접속 사용자"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "TPS. TPS (Tansaction Per Second)는 초당 처리된 트랜잭션 건수를 의미합니다.",
  "product": "JAVA 모니터링",
  "header": "TPS"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "응답 시간. 요청에 대한 응답 시간의 평균을 의미합니다. 평균이 높은 경우 특정 시점에 느린 트랜잭션이 많이 수행되었거나 또는 장애 발생 가능성이 높습니다.",
  "product": "JAVA 모니터링",
  "header": "응답 시간"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "CPU. 애플리케이션 서버의 CPU 사용량을 의미합니다. 사용량 변화의 추이를 확인할 수 있습니다. 모니터링 대상 프로세스의 힙 메모리 사용량을 의미합니다. 시간에 따른 메모리 사용량 변화를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "CPU"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "액티브 트랜잭션. 액티브 트랜잭션은 진행 중인 트랜잭션을 의미합니다. 액티브 트랜잭션에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "액티브 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "트랜잭션 Top 10. 트랜잭션 호출 통계를 사용해 트랜잭션 호출이 많은 상위 10개 목록을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 Top 10"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "HTTP 호출 Top 10. HTTPC 통계를 사용해 HTTP Call URL의 건수가 많은 상위 10개 목록을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "HTTP 호출 Top 10"
},
{
  "url": "https://docs.whatap.io/java/performance-trend",
  "title": "성능 추이",
  "content": "SQL Top 10. SQL 통계를 사용해 SQL 호출 건수가 많은 상위 10개 목록을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "SQL Top 10"
},
{
  "title": "MSA 업무 그룹 구분",
  "url": "https://docs.whatap.io/java/msa-group",
  "content": "MSA 업무 그룹 구분. Auto Scale Out 환경에서 자동 등록된 자바(Java) 에이전트를 업무 단위로 쉽게 식별할 수 있도록 okind JVM 옵션을 사용할 수 있습니다. 특히 Docker 환경에서의 에이전트 관리에 유용한 이 설정은 에이전트의 역할이나 소속된 서비스 그룹을 구분하는 데 유용합니다. MSA 업무 그룹 구분Auto Scale Out 환경에서 자동 등록된 에이전트의 IP / Port / PID 정보만을 가지고 업무 단위의 정보를 인지하기 어려운 경우가 있습니다. 이 경우 okind 속성을 JVM 옵션으로 부여해 쉽게 식별할 수 있습니다. 다음은 전형적인 Docker 환경에 대한 설명입니다. 각 에이전트는 잘게 쪼개어 놓은 MSA (Micro Service Architecture) 구성 요소입니다. 에이전트들은 자동으로 Scale In/Out 됩니다. 어떤 IP를 가진 서버에서 어떤 PID로 애플리케이션이 시작할지 예측할 수 없습니다. 위와 같은 Docker 환경에서 에이전트 이름과 더불어 업무를 식별할 수 있는 JVM 옵션으로 whatap.okind를 추가해 okind 속성을 추가할 수 있습니다. JAVA_OPTS-Dwhatap.okind=mobile_ui whatap.conf 파일에 설정을 추가할 수도 있습니다. whatap.confwhatap.okind=common_api 팁MSA 환경에서 와탭이 제공하는 다양한 기능을 활용하려면 okind 속성을 추가하세요.",
  "product": "JAVA 모니터링",
  "header": "MSA 업무 그룹 구분"
},
{
  "title": "메트릭스",
  "url": "https://docs.whatap.io/java/metrics-intro",
  "content": "메트릭스. 메트릭스의 개요를 안내합니다. ",
  "product": "JAVA 모니터링",
  "header": "메트릭스"
},
{
  "url": "https://docs.whatap.io/java/metrics-intro",
  "title": "메트릭스",
  "content": "메트릭스란?. 와탭은 모니터링 대상으로부터 데이터를 수집해서 사용자에게 제공합니다. 에이전트로부터 수집되는 데이터를 메트릭스 라고 표기합니다. 메트릭스 는 사용자 환경을 한 눈에 살펴볼 수 있는 기준 요소를 제공합니다. 예를 들어 서버별 메모리 사용률 평균, DB 평균 연결 시간 등을 원본 데이터 목록이나 시각화한 차트 뷰를 통해 간편하게 확인할 수 있습니다. 문제 요소를 찾은 후에는 로그와 트레이스 등을 통해 상세 분석을 확인할 수 있습니다. 메트릭스 는 또한 사용자 환경의 스케일을 조절하는 것에도 도움됩니다. 자원 사용량 통계를 통해 필요 자원량을 확정하는 것은 성능 향상과 비용 효용성 측면에서 중요한 기준입니다.",
  "product": "JAVA 모니터링",
  "header": "메트릭스란?"
},
{
  "url": "https://docs.whatap.io/java/metrics-intro",
  "title": "메트릭스",
  "content": "와탭의 메트릭스 수집 방식. 와탭 에이전트는 모니터링 대상으로부터 모니터링 지표를 수집해 메트릭 데이터의 형태로 와탭 수집 서버에 전송합니다. 와탭 수집 서버는 관련 데이터를 카테고리별로 저장하고 관리합니다. 와탭의 수집 서버는 다양한 모니터링 대상에서 메트릭스를 수집합니다. 사용자는 원하는 메트릭스에 접근하기 위해 해당 상품별 안내 화면으로 이동해 기술된 과정을 따라야 합니다. 예를 들어 Java 애플리케이션 을 모니터링하고 싶다면 먼저 와탭 에이전트를 설치해야 합니다. 다음 문서 를 참조하세요. 관련 메트릭스 지표 안내 또한 다음의 상품별 페이지 에서 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "와탭의 메트릭스 수집 방식"
},
{
  "url": "https://docs.whatap.io/java/metrics-intro",
  "title": "메트릭스",
  "content": "와탭의 메트릭스 구성 요소. 와탭의 메트릭스 는 다음의 정보들로 구성되어 있습니다. Category : 관련된 지표들을 묶는 단위로 메트릭스를 구분하는 Key를 의미합니다. Tags : 수집 대상을 구분할 수 있는 고유 정보를 포함하는 데이터입니다. 변경이 드문 IP, Oname, Host 정보 등의 항목을 저장합니다. Map 형태로 Multi Tag가 존재합니다. Fields : 에이전트로부터 수집된 모든 지표 값을 저장합니다. Map 형태로 Multi Field가 존재합니다. Time : 메트릭스가 수집된 시간입니다. Oid : 메트릭스를 수집한 에이전트의 고유 번호입니다. Oname : 메트릭스를 수집한 에이전트의 명칭입니다.",
  "product": "JAVA 모니터링",
  "header": "와탭의 메트릭스 구성 요소"
},
{
  "url": "https://docs.whatap.io/java/metrics-intro",
  "title": "메트릭스",
  "content": "메트릭스 데이터 조회 및 시각화. 와탭은 사용자가 지정한 조건에 따라 수집한 원본 데이터 목록과 편의성을 위해 다양하게 시각화한 차트를 다음과 같이 제공합니다. 메트릭스의 원본 데이터를 조회할 수 있는 메트릭스 조회 , 시각화한 차트를 통해 메트릭스 데이터를 조회할 수 있는 메트릭스 차트 , AI가 학습한 메트릭스 지표의 패턴과 비교해 예상 패턴을 벗어난 이상을 탐지할 수 있는 메트릭스 이상 탐지 메뉴를 확인해 보세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 데이터 조회 및 시각화"
},
{
  "title": "애플리케이션 성능 카운터",
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "content": "애플리케이션 성능 카운터. 성능 카운터를 안내합니다. 와탭 에이전트는 애플리케이션 성능과 관련된 다양한 정보를 수집합니다. 크게 3가지로 분류할 수 있습니다.  User : 실시간 사용자 혹은 방문 사용자 Service : 트랜잭션, SQL, 외부 호출 건수 및 응답, 에러율 등 Resource : 시스템, 프로세스 자원 사용량",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 성능 카운터"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "User Counter. 사용자는 모니터링 대상 시스템을 사용하는 클라이언트를 말합니다. 클라이언트에서는 일반적으로는 브라우저를 기준으로 사용자 수를 계산합니다. 웹 시스템 성능에서 사용자는 부하를 발생시키는 시작이기 때문에 중요합니다. 사용자 추적을 위해서는 사용자는 어떤 기준으로 구분하고, 어떻게 카운팅 할지에 대한 고려가 필요합니다.",
  "product": "JAVA 모니터링",
  "header": "User Counter"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "사용자 구분. 와탭 에이전트 사용자를 구분하기 위해 다양한 옵션을 제공합니다. Remote IP 기본값은 remote ip를 사용하여 사용자를 구분합니다. remote ip는 실제 사용자를 구분하는 데 한계가 있습니다. Cookie 쿠키를 사용하여 사용자를 구분합니다. 모든 접속 클라이언트를 대상으로 WHATAP 이라는 쿠키에 UUID를 저장합니다. whatap.conf trace_user_using_ip = false # Java agent v2.2.0 or later wclient_using_ip = false Header Key HTTP 헤더에 전달되는 값으로 사용자를 구분할 수 있습니다. whatap.conf user_header_ticket = USER # Java agent v2.2.0 or later wclient_header_ticket = USER",
  "product": "JAVA 모니터링",
  "header": "사용자 구분"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "사용자 카운팅. 사용자를 카운팅 하는 방법에 따라서 다르게 사용합니다. 실시간 사용자는 현재 시스템을 사용하는 사용자의 수를 알기 위해서 측정합니다. 일일 방문 사용자는 하루 동안 해당 서비스에 관심을 갖는 사용자가 몇 명인지에 대한 비즈니스적인 관리를 위해 측정합니다. 실시간 사용자 최근 5분 동안 사용자 수를 카운팅 합니다. 5초마다 shifting 하면 사용자를 카운팅 합니다. 각 서버에서 카운팅 된 숫자는 HyperLogLog 알고리즘을 통해서 머지 됩니다. 일일 방문자 ( DAU , Daily Active User) 하루 동안 시스템에 접속한 사용자를 카운팅 합니다. 24시간 동안 접속한 사용자를 HyperLogLog를 통해서 계산합니다. 팁 와탭에서는 장기간 사용자를 카운팅 하기 위해 사용자 데이터에 대한 byte block을 서버로 수집합니다. 이 데이터를 Hyperloglog로 머지하면 이론적으로 한 달 이상의 방문 사용자를 계산할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "사용자 카운팅"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "Service Counter. 트랜잭션과 트랜잭션이 사용하는 SQL 혹은 외부 호출 등에 대한 건수, 응답시간 에러 건수 등에 대한 성능지표가 포함됩니다. Transaction Counter 트랜잭션을 수행하면 측정하는 카운터입니다. 건수 응답 시간 에러 건수 Active Transaction Counter 진행 중인 트랜잭션의 수를 카운팅 합니다. 건수 Active Status 진행 상태는 METHOD, SQL, HTTPC, DBC, SOCKET 5가지 상태로 고정되어 있습니다. METHOD - 일반 함수를 호출하는 상태 SQL - db sql을 수행 중인 상태 HTTPC - 외부 Http Api(서비스)를 호출 중인 상태 DBC - DB 연결을 요청한 상태, 일반적으로 Pool에서 가져옴 SOCKET - TCP 세션을 Connecting 중인 상태 SQL SQL 수행 현황을 카운팅 합니다. 건수 응답 시간 에러 건수 패치 건수 HTTP Call 외부 Http 호출에 대한 현황을 카운팅 합니다. 건수 응답 시간 에러 건수",
  "product": "JAVA 모니터링",
  "header": "Service Counter"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "Resource Counter. 서버 자원 혹은 node 프로세스 내부의 자원 사용량을 카운팅 합니다. CPU (sys, usr, wait, steal, irq, cores) CPU 사용량 %입니다. 각 종류별로 수집됩니다. 가상환경에서만 Steal이 의미가 있습니다. Cpu Core 개수를 같이 수집하고 있습니다. Process CPU 자바 프로세스가 사용하는 CPU%입니다. Memory 시스템 메모리 사용률(%)입니다. Swap Swap 메모리 사용률(%)입니다. Disk Disk는 Java Process의 Current 디렉터리의 사용률(%)입니다. Heap (Total, Used, Perm) Java Heap 메모리의 Total, Used, Perm 양입니다. 데이터 단위는 KBytes 입니다. GC (Count, Time) 5초 동안 발생한 GC 건수와 시간의 합계입니다. ObjectPendingFinalizationCount GC 호출되는 도중에 finalize() 수행하기 위해 대기 중인 객체 숫자입니다. 이 값이 커지면 GC time이 지연될 수 있습니다. Thread (start Count, Count, Daemon, Peak Count) JVM이 실행된 이후부터 시작된 스레드 수, 현재 돌고 있는 스레드 수, 데몬, 최대 스레드 수를 수집합니다. 스레드 풀이 필요한지에 대한 판단 등을 할 수 있습니다. DB Connection Count (active,idle) Connection Pool의 idle와 active 카운트를 수집합니다. Tomcat Thread Pool (active, queueSize) 톰캣의 Executor 스레드 풀이 설정되었을 때 성능 정보를 수집합니다. XML < Executor name = \" tomcatThreadPool \" namePrefix = \" catalina-exec- \" maxThreads = \" 50 \" minSpareThreads = \" 2 \" maxQueueSize = \" 78 \" />",
  "product": "JAVA 모니터링",
  "header": "Resource Counter"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "DB Connection Pool 카운터. DB Connection Pool은 DataSource라고 합니다. WAS가 제공하는 경우가 일반적이지만 일부에서는 오픈소스 Pool을 사용하기도 합니다. 사용량 정보가 JMX로 노출되기도 하지만 그렇지 않은 경우도 많습니다. 와탭은 2가지 방식을 제공하고 있습니다. 하나의 BCI에 의한 직접 조회 방식과 JMX를 이용한 방식입니다. 기본은 BCI 방식을 사용하고 보조로 JMX를 사용할 수 있도록 제공하고 있습니다. 다음은 개별 옵션별 디폴트 값과 연관되어 ByteCode Injection되는 클래스입니다. hikari_pool_enabled=false com . zaxxer . hikari . pool . HikariPool dbcp_pool_enabled=true org . apache . commons . dbcp . BasicDataSource org . apache . commons . dbcp2 . BasicDataSource org . apache . tomcat . dbcp . dbcp . BasicDataSource org . apache . tomcat . dbcp . dbcp2 . BasicDataSource tomcat_pool_enabled=true org . apache . tomcat . jdbc . pool . ConnectionPool weblogic_pool_enabled=true weblogic . jdbc . common . internal . ConnectionPool jeus_pool_enabled=true jeus . jdbc . connectionpool . ConnectionPoolImpl jboss_pool_enabled=true org . jboss . jca . core . connectionmanager . pool . PoolStatisticsImpl 주의 옵션을 변경한다면 BCI 관련 옵션이기 때문에 다시 시작 해야 합니다. 클래스가 instrument된 후에도 추적 테이블에 등록되는 과정이 필요합니다. 따라서 실행 중에 redefine을 해도 동작하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "DB Connection Pool 카운터"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "DataSource 현황 JMX로 가져오기. dbcp_pool_enabled == true 이면 tomcat_ds_enabled = false weblogic_pool_enabled == true 이면 weblogic_ds_enabled = false 옵션 자동 결정 내용을 확인하세요. 관련된 pool 쪽 옵션 값을 false 로 선언하세요. DataSource 관련 옵션 값을 true 로 변경하세요. 기본값은 false 입니다. whatap.conf tomcat_ds_enabled = false weblogic_ds_enabled = false",
  "product": "JAVA 모니터링",
  "header": "DataSource 현황 JMX로 가져오기"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "ThreadPool 카운터. ThreadPool 카운터는 JMX Mbean 정보를 통해 수집됩니다. Tomcat과 같이 사용 사례가 많은 경우라면 문제없지만 특정 환경에서는 이 지표가 수집되지 않을 수 있습니다. 수집을 위해서 추가 설정이 필요합니다. 관련 설정은 다음과 같습니다. whatap.conf jmx_threadpool_objectname = Catalina:type=ThreadPool,name=\"http-bio-8080\" // JMX ThreadPool MBean 이름을 설정합니다. jmx_threadpool_atter_activecount = connectionCount // activecount 수치를 나타내는 attribute를 설정합니다. jmx_threadpool_atter_queuesize = maxThreads // maxThreads 수치를 나타내는 attribute를 설정합니다. JMX ThreadPool ObjectName 및 AttributeName 과 같은 Mbean 명은 JMX 모니터링 도구를 통해 확인하거나 각 WAS 별 Mbean 문서를 참고합니다. 노트 사용 중인 WAS, 프레임워크 관련 문서 를 참고해 Mbean 정보를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "ThreadPool 카운터"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "Jconsole 사용 시. ObjectName : Catalina type : ThreadPool name : \"http-bio-8080\" ActiveName : connectionCount QueueName : maxThreads",
  "product": "JAVA 모니터링",
  "header": "Jconsole 사용 시"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "결과 확인. 설정이 정상적으로 되면 카운터에서 다음과 같이 데이터를 조회할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "결과 확인"
},
{
  "url": "https://docs.whatap.io/java/metrics-performance-counter",
  "title": "애플리케이션 성능 카운터",
  "content": "Apdex. Apdex(Appliccation Performance Index)는 개방형 표준을 따르는 애플리케이션 성능지표입니다. Apdex는 응답시간에 기반하며 전체 요청 중 만족과 허용 건 비율로 수치화합니다. 대시보드에 Apdex 그래프가 추가되었습니다. Apdex는 사용자 만족도에 대한 지표로 활용할 수 있으며, 0 ~ 1 사이의 값을 갖습니다. (만족 횟수 + (허용 횟수 * 0.5)) / 전체 요청 수 상태 설명 만족 (Satisfied, S ) 업무처리에 전혀 문제가 없음 ≤ 1.2초 (만족 S 기본값) 허용 (Tolerating, T ) 사용자가 지연을 느끼나 업무처리는 가능함 ≤ 4.8초 (만족 S * 4) 불만 (Frustrated, F ) 업무처리가 불가능함 > 4.8초 (허용 T 초과 및 오류) whatap.apdex_time millisecond 기본값 1200 만족 S 기본값은 에이전트 설정 메뉴에서 변경할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Apdex"
},
{
  "title": "메트릭스 이상 탐지",
  "url": "https://docs.whatap.io/java/metrics-detect-anormal",
  "content": "메트릭스 이상 탐지. 다양한 메트릭스 지표의 패턴을 AI가 학습한 예상 패턴과 비교해 볼 수 있습니다. 홈 화면 > 프로젝트 선택 >  사이트맵 > 메트릭스 이상 탐지 다양한 메트릭스 지표의 패턴을 AI가 학습한 예상 패턴과 비교해 볼 수 있습니다. 예상 패턴을 벗어난 이상 탐지를 그래프 차트를 통해 확인할 수 있습니다. 과거 데이터를 바탕으로 반복되는 패턴을 확인하고 향후 지표 값 예측에 활용할 수 있습니다. 노트 화면에 배치한 위젯은 다른 메뉴로 이동할 경우 저장되지 않고 초기화합니다. 패턴 표시와 이상치 표시 기능을 제외하면 분석 > 메트릭스 차트 메뉴와 유사합니다. 이상치 탐지(Anomaly Detection) 경고 알림 기능의 기술 근간은 메트릭스 이상 탐지입니다. 이상치 탐지 경고 알림 설정에 대한 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 이상 탐지"
},
{
  "url": "https://docs.whatap.io/java/metrics-detect-anormal",
  "title": "메트릭스 이상 탐지",
  "content": "위젯 확인하기. 밝은 색상의 그래프 영역은 AI가 분석한 예상 패턴입니다. 파랑색 그래프는 프로젝트의 메트릭스 지표 추이입니다. AI가 분석한 예상 패턴을 벗어나면 주황색 , 빨간색 의 단계로 그래프에 점을 표시합니다. 예상 패턴 범위를 크게 벗어난 값을 빨간색 으로 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 확인하기"
},
{
  "url": "https://docs.whatap.io/java/metrics-detect-anormal",
  "title": "메트릭스 이상 탐지",
  "content": "위젯 배치하기. 시간 에서 원하는 시간 간격을 설정하세요. 최대 1개월 간격까지 설정할 수 있습니다. 필터 에서 메트릭스 지표의 범위를 선택하세요. 아래 목록에서 모니터링하길 원하는 메트릭스 지표를 선택하세요. 선택한 메트릭스 지표를 화면 오른쪽에 배치합니다. 노트 모니터링 대상을 선택해 메트릭스 지표를 구분해서 확인하려면 태그 를 선택하세요. 화면 오른쪽에 태그 선택 목록이 나타납니다. 원하는 항목을 선택한 다음 위젯을 추가하세요. 화면에 배치한 위젯은 시간 또는 태그 값을 변경해도 차트에 반영되지 않습니다. 화면에 배치한 위젯을 삭제하려면 위젯 오른쪽 위에 버튼을 선택하세요. 위젯의 왼쪽 위를 선택한 상태에서 드래그해 위젯 위치를 변경할 수 있습니다. 위젯 오른쪽 아래를 선택한 상태에서 드래그해 위젯 크기를 조절할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 배치하기"
},
{
  "url": "https://docs.whatap.io/java/metrics-detect-anormal",
  "title": "메트릭스 이상 탐지",
  "content": "연관 지표 확인하기. 위젯에서 차트의 일부 영역을 드래그하세요. 선택한 영역에서 해당 메트릭스 지표와 관련한 지표를 같이 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "연관 지표 확인하기"
},
{
  "url": "https://docs.whatap.io/java/script-plugin",
  "title": "스크립트 플러그인",
  "content": "트레이스에 쿠키값 표현. 쿠키값을 트레이스에서 확인할 수 있습니다. ${WHATAP_HOME}/plugin/HttpServiceStart.x // $req.getCookie() 파라미터로 확인하려는 쿠키를 설정하세요. String cookie = $req . getCookie ( \"AWSALB\" ) ; if ( $ctx . ok ( ) ) { if ( cookie != null ) { $ctx . profile ( cookie ) ; } }",
  "product": "JAVA 모니터링",
  "header": "트레이스에 쿠키값 표현"
},
{
  "title": "메트릭스 차트",
  "url": "https://docs.whatap.io/java/metrics-chart",
  "content": "메트릭스 차트. 메트릭스 데이터를 차트로 조회할 수 있습니다. 홈 화면 > 프로젝트 선택 > 분석 > 메트릭스 차트 메트릭스 차트 메뉴에서 모니터링 대상에서 수집된 메트릭스 데이터를 다음과 같이 차트로 조회할 수 있습니다. 시간과 지표를 지정하는 것은 필수입니다.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 차트"
},
{
  "url": "https://docs.whatap.io/java/metrics-chart",
  "title": "메트릭스 차트",
  "content": "상단 옵션. 영역의 메트릭스 차트 의 상단 옵션을 통해 차트의 시간 범위와 모니터링 대상 에이전트를 지정할 수 있습니다. 시간 : 시간의 총 범위로 X축의 시작과 끝을 지정할 수 있습니다. 인터벌 : 시간 간격으로 X축 데이터 간격을 지정할 수 있습니다. 시간 병합 : 데이터 병합 방식 중 하나로 인터벌로 지정한 시간 내의 데이터를 병합할 수 있습니다. 예, 평균 은 1시간 안 데이터의 평균값을 말합니다. 에이전트 : 조회할 에이전트를 지정할 수 있습니다. 지정하지 않으면 전체가 조회됩니다.",
  "product": "JAVA 모니터링",
  "header": "상단 옵션"
},
{
  "url": "https://docs.whatap.io/java/metrics-chart",
  "title": "메트릭스 차트",
  "content": "지표 목록. 영역은 옵션을 조회할 지표 목록입니다. 먼저 카테고리 를 선택하세요. 선택한 카테고리 하위의 지표를 조회한 후 원하는 지표를 선택하세요. 카테고리 와 지표를 선택하면 영역의 상단 메뉴에서 지정한 시간 범위의 데이터를 바탕으로 영역에서 차트 위젯을 조회할 수 있습니다. 노트 데이터 병합 데이터 병합은 시간 병합 과 오브젝트 병합 을 제공합니다. 시간 병합 은 원본 데이터에서 필드 값이 같은 데이터끼리 일정한 간격으로 데이터를 병합합니다. 오브젝트 병합 은 서로 다른 필드 값을 가진 데이터들 중에서 태그가 일치하는 경우 해당 데이터를 병합합니다.",
  "product": "JAVA 모니터링",
  "header": "지표 목록"
},
{
  "url": "https://docs.whatap.io/java/metrics-chart",
  "title": "메트릭스 차트",
  "content": "차트 위젯. 영역 차트 위젯의 좌측 상단에서 지표명을 확인할 수 있습니다. 차트 위젯의 우측 상단에서 다음과 같은 옵션을 확인할 수 있습니다. 시간 이동: 왼쪽 화살표 또는 오른쪽 화살표 버튼을 통해 선택한 시간 범위만큼 -1, +1 씩 이동 가능합니다. 예, 시간 범위가 2월 13일 00:00~2월 14일 00:00일 때, 왼쪽 화살표를 선택하면 2월 12일 00:00~2월 13일 00:00 데이터를 조회할 수 있습니다. 인터벌/시간 병합: 상단 메뉴에서 지정한 인터벌과 시간 병합을 수정할 수 있습니다. 모니터링 대상: 아이콘을 선택해 모니터링 대상을 지정할 수 있습니다. 선택하지 않으면 전체를 대상으로 조회합니다. 시간 비교: 아이콘을 선택하면 동일한 지표의 이전 시간대의 추이를 비교할 수 있습니다. 스냅샷: 아이콘을 선택해 위젯의 옵션을 제외한 차트를 스냅샷 할 수 있습니다. CSV: 아이콘을 선택해 차트를 그리는 데이터를 CSV 파일로 다운로드할 수 있습니다. 상세 보기: 아이콘을 선택해 상세 조회가 가능합니다. 모니터링 대상이 많은 경우 유용하며, 모니터링 대상의 지표 추이를 개별로 확인 할 수 있습니다. 노트 메트릭스 차트 위젯 상단에서 옵션이 보이지 않을 경우 아이콘을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "차트 위젯"
},
{
  "url": "https://docs.whatap.io/java/metrics-chart",
  "title": "메트릭스 차트",
  "content": "위젯 삭제하기. 화면에 배치한 모든 위젯을 삭제하려면 화면 위에 위치한 전체 위젯 삭제 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "위젯 삭제하기"
},
{
  "title": "애플리케이션 지표",
  "url": "https://docs.whatap.io/java/metrics-app",
  "content": "애플리케이션 지표. 애플리케이션 지표를 안내합니다. 홈 화면 > 프로젝트 선택 > 분석 > 메트릭스 조회 메트릭스 조회 메뉴에서 검색할 수 있는 메트릭스 지표입니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 지표"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "app_active_stat. 액티브 트랜잭션 구간 지표입니다. 수집 간격 : 5초 통계 데이터 : 5분, 1시간",
  "product": "JAVA 모니터링",
  "header": "app_active_stat"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Tags. 태그명 설명 비고 container 컨테이너 이름 고유값 containerKey 컨테이너 키값 고유값 host_ip Host IP 고유값 okindName 애플리케이션 종류명 - oname 에이전트 이름 고유값 onodeName 애플리케이션 노드명 - pid 애플리케이션 PID - type 애플리케이션 유형 언어 이름",
  "product": "JAVA 모니터링",
  "header": "Tags"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Fields. 필드명 단위 설명 비고 dbc 건수 Database Connection을 수행 중인 트랜잭션 건수 - httpc 건수 HTTP Call을 수행 중인 트랜잭션 건수 - method 건수 Method 로직 수행 중인 트랜잭션 건수 - socket 건수 Socket 연결 수행 중인 트랜잭션 건수 - sql 건수 SQL 쿼리를 수행 중인 트랜잭션 건수 -",
  "product": "JAVA 모니터링",
  "header": "Fields"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "app_counter. 트랜잭션 지표입니다. 수집 간격 : 5초 통계 데이터 : 5분, 1시간",
  "product": "JAVA 모니터링",
  "header": "app_counter"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Tags. 태그명 설명 비고 alias 애플리케이션 별칭 고유값 container 컨테이너 이름 고유값 containerKey 컨테이너 키 값 고유값 host_ip Host IP 고유값 okindName 애플리케이션 종류명 - oname 에이전트 이름 고유값 onodeName 애플리케이션 노드명 - pid 애플리케이션 PID - type 애플리케이션 유형 언어 이름",
  "product": "JAVA 모니터링",
  "header": "Tags"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Fields. 필드명 단위 설명 비고 active_tx_0 건수 3초 이하 구간 트랜잭션 수 - active_tx_3 건수 3초 초과 8초 이하 구간 트랜잭션 수 - active_tx_8 건수 8초 초과 구간 트랜잭션 수 - active_tx_count 건수 수행 중인 전체 트랜잭션 수 - apdex_satisfied 건수 APDEX 만족 수 - apdex_tolerated 건수 APDEX 허용 수 - apdex_total 건수 APDEX 트랜잭션 총 수 - arrival_rate 퍼센트 트랜잭션 요청률 - httpc_count 건수 HTTP 외부 호출 수 - httpc_error 건수 HTTP 외부 호출 에러 수 - httpc_time 밀리 세컨드 HTTP 외부 호출 평균 시간 - metering 코어 애플리케이션이 작동 중인 호스트의 코어 수 컨테이너의 경우 limit cpu resp_time 밀리 세컨드 평균 응답 시간 - sql_count 건수 실행 완료된 SQL 건수 - sql_error 건수 SQL 에러 건수 - sql_fetch_count 건수 SQL Fetch 건수 - sql_fetch_time 밀리 세컨드 SQL Fetch 수행 시간 - sql_time 밀리 세컨드 SQL 평균 수행 시간 - tps 건수 초당 트랜잭션 처리 수 - tx_count 건수 트랜잭션 처리 건 수 - tx_dbc_time 밀리 세컨드 DB 평균 연결 시간 - tx_error 건수 트랜잭션 에러 건수 - tx_httpc_time 밀리 세컨드 HTTP 호출 평균 시간 - tx_sql_time 밀리 세컨드 트랜잭션별 SQL 수행시간의 합에 대한 평균 - tx_time 밀리 세컨드 트랜잭션 수행 시간 -",
  "product": "JAVA 모니터링",
  "header": "Fields"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "app_host_resource. 애플리케이션 서버 자원 지표입니다. 수집 간격 : 5초 통계 데이터 : 5분, 1시간",
  "product": "JAVA 모니터링",
  "header": "app_host_resource"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Tags. 태그명 설명 비고 alias 애플리케이션 별칭 고유값 container 컨테이너 이름 고유값 containerKey 컨테이너 키값 고유값 host_ip Host IP 고유값 okindName 애플리케이션 종류명 - oname 에이전트 이름 고유값 onodeName 애플리케이션 노드명 - pid 애플리케이션 PID - type 애플리케이션 유형 언어 이름",
  "product": "JAVA 모니터링",
  "header": "Tags"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Fields. 필드명 단위 설명 비고 cpu 퍼센트 호스트 CPU 사용률 - cpu_cores 정수 호스트 CPU 코어 수 - cpu_irq 퍼센트 호스트 CPU IRQ 사용률 - cpu_proc 퍼센트 자바 프로세스 CPU 사용률 - cpu_steal 퍼센트 호스트 CPU Steal 사용률 - cpu_sys 퍼센트 호스트 CPU SYS 사용률 - cpu_usr 퍼센트 호스트 CPU USER 사용률 - cpu_wait 퍼센트 호스트 CPU WAIT 사용률 - disk 퍼센트 루트 파일시스템 디스크 사용률 JAVA는 설정으로 지정한 파일시스템 경로의 디스크 사용률 mem 퍼센트 호스트 메모리 사용률 - swap 퍼센트 호스트 SWAP 사용률 -",
  "product": "JAVA 모니터링",
  "header": "Fields"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "app_proc_counter. 애플리케이션 프로세스 지표입니다. 수집 간격 : 5초 통계 데이터 : 5분, 1시간",
  "product": "JAVA 모니터링",
  "header": "app_proc_counter"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Tags. 태그명 설명 비고 container 컨테이너 이름 고유값 containerKey 컨테이너 키 값 고유값 host_ip Host IP 고유값 okindName 애플리케이션 종류명 - oname 에이전트 이름 고유값 onodeName 애플리케이션 노드명 - pid 애플리케이션 PID - type 애플리케이션 유형 언어 이름",
  "product": "JAVA 모니터링",
  "header": "Tags"
},
{
  "url": "https://docs.whatap.io/java/metrics-app",
  "title": "애플리케이션 지표",
  "content": "Fields. 필드명 단위 설명 비고 cputime 밀리 세컨드 트랜잭션 cpu 시간 - db_num_active 정수 DB Connection Pool Active 수 - db_num_idle 정수 DB Connection Pool Idel 수 - gc_count 회수 GC 발생 회수 - gc_oldgen_count 건수 Old Generation GC 건수 - gc_time 밀리 세컨드 GC 수행 시간 - heap_max 바이트 힙 최대량 - heap_perm 바이트 Perm 사용량 - heap_tot 바이트 힙 총량 - heap_use 바이트 힙 사용량 - pending_finalization 정수 GC 중 fianlize 수행을 위해 대기 중인 객체 수 - proc_fd 정수 프로세스 fd 사용수 - proc_fd_max 정수 프로세스 fd 최대수 - thread_count 정수 JVM 실행중인 스레드 수 - thread_daemon 정수 JVM 데몬 스레드 수 - thread_peak_count 정수 JVM 최대 스레드 수 - thread_total_started 정수 JVM 실행 이후 총 start된 스레드 수 -",
  "product": "JAVA 모니터링",
  "header": "Fields"
},
{
  "title": "메트릭스 조회",
  "url": "https://docs.whatap.io/java/metrics-search",
  "content": "메트릭스 조회. 메트릭스 Raw Data를 조회할 수 있습니다. 홈 화면 > 프로젝트 선택 > 분석 > 메트릭스 조회 메트릭스 조회 메뉴에서 태그 기반으로 특정 메트릭스를 조회할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 조회"
},
{
  "url": "https://docs.whatap.io/java/metrics-search",
  "title": "메트릭스 조회",
  "content": " 시간과 카테고리 선택. 영역에서 메트릭스가 수집된 시간 과 최대 개수 및 카테고리 를 지정할 수 있습니다. 시간 과 카테고리 는 반드시 지정해야 합니다. 시간 : 메트릭스가 수집된 시간을 지정해 조회할 수 있습니다. 기본값은 1시간 입니다. 기본 옵션으로 제공하는 조회 시간 외 사용자가 직접 시간 탭을 선택해 날짜와 시간을 지정할 수 있습니다. 최대 개수 : 목록에 조회할 메트릭스 최대 개수를 지정할 수 있습니다. 10 , 50 , 100 , 200 , 300 , 1000 , 2000 , 3000 개까지 설정할 수있습니다. 카테고리 : 유관 지표들의 분류 단위입니다. 카테고리 탭을 선택해 원하는 카테고리 를 지정할 수 있습니다. 새로 고침 : 새로 고침 아이콘을 선택하면 카테고리 , 태그 및 필드 옵션을 다시 불러올 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": " 시간과 카테고리 선택"
},
{
  "url": "https://docs.whatap.io/java/metrics-search",
  "title": "메트릭스 조회",
  "content": " 태그와 필드 선택. 영역에서 태그 와 필드 를 선택합니다. 사용자가 개별적으로 지정하지 않는다면 기본 설정은 전체 선택입니다. 태그 : 수집된 대상을 구분할 수 있는 고유 정보 데이터입니다. 필드 : 모니터링 대상으로부터 수집된 지표입니다. 필터 : 태그값으로 필터링 버튼을 선택하고 태그 값을 설정해 필터링할 수 있습니다. 예시, oname 의 값을 demo-8101 로 설정해 필터링한 데이터를 조회할 수 있습니다. 검색 : 조건을 설정 후 검색 아이콘을 선택하면 영역에서 해당 메트릭스의 원본 데이터를 조회할 수 있습니다. CSV 다운로드 : CSV 다운로드 버튼을 선택해 해당 메트릭스 원본 데이터를 CSV 파일로 다운로드할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": " 태그와 필드 선택"
},
{
  "url": "https://docs.whatap.io/java/metrics-search",
  "title": "메트릭스 조회",
  "content": " 메트릭스 테이블. 수집되는 메트릭스를 사전에 특정할 수 없기에 수집 중인 모든 메트릭스의 원본 데이터를 확인하는 것이 중요합니다.  위의 조건 영역에서 원하는 조건을 설정 후 영역에서 해당 메트릭스의 원본 데이터를 테이블 형식으로 조회할 수 있습니다. 사용자가 태그 와 필드 각 조건을 지정함에 따라 테이블의 컬럼이 변경됩니다. 노트 메트릭스 조회 시 시간 과 카테고리 는 반드시 지정해야 합니다. 메트릭스 조회 시 태그 와 필드 지정은 선택 사항입니다.",
  "product": "JAVA 모니터링",
  "header": " 메트릭스 테이블"
},
{
  "title": "주요 메뉴 알아보기",
  "url": "https://docs.whatap.io/java/learn-apm-main-menu",
  "content": "주요 메뉴 알아보기. 애플리케이션 모니터링 서비스의 주요 메뉴에 대한 설명을 제공합니다. 주요 메뉴 알아보기와탭 에이전트 설치를 완료했다면 와탭 모니터링 서비스에 로그인하세요. 와탭 모니터링 서비스는 원활한 서비스 제공과 안정적 운영, 이상 징후 감시 및 파악을 위한 정보를 제공합니다. 애플리케이션 모니터링은 실시간으로 트랜잭션을 모니터링하고 특정 시점을 설정한 분석 기능 및 운영의 편리성을 높이기 위한 리포트 기능, 알림 수단을 제공합니다. 와탭 모니터링 서비스는 다음의 주요 기능을 제공합니다. 실시간 모니터링 실시간 트랜잭션 현황 / 응답시간 분포도(Hitmap) / 서버 현황 / 실시간 사용자(Realtime User) 현황 / 트랜잭션 현황 / 리소스 현황 트랜잭션 분석 트랜잭션 트레이싱 / 스택 분석 / 멀티 트랜잭션 트레이스(연계 추적) / 응답시간 분포도(Hitmap) / SQL 추적 / HTTP Call 추적 사후 분석 Cube 분석 / 스택 분석 / Performance Trend 분석 / 응답시간 분포도(Hitmap) / 에러 통계 통계 Transaction / Error / SQL / Remote HTTP Call / Client IP / 브라우저 통계 관리 Agent 실행 방식 / 개발 및 운영 환경 분리 시 지원 / 알람 설정 / 알림 전달 수단 설정 리포트 Daily Report / Daily Application Check / Weekly Report / Monthly Report ",
  "product": "JAVA 모니터링",
  "header": "주요 메뉴 알아보기"
},
{
  "title": "메트릭스 경고 알림",
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "content": "메트릭스 경고 알림. 구체적이고 복잡한 이벤트를 설정하려면 메트릭스 이벤트 설정을 사용하세요. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 메트릭스 탭 선택",
  "product": "JAVA 모니터링",
  "header": "메트릭스 경고 알림"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "메트릭스 이벤트란?. 메트릭스 이벤트는 기본 이벤트(애플리케이션 이벤트, 서버 이벤트 등)보다 구체적이고 복잡한 이벤트를 설정할 때 사용합니다. 프로젝트에서 실시간으로 수집 중인 메트릭스 데이터를 기반으로 이벤트를 설정할 수 있습니다. 사용에 따라 두 가지 설정 방법 중 하나를 선택해 이벤트를 설정할 수 있습니다. 메트릭스 이벤트 복합 메트릭스 이벤트 노트 메트릭스에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 이벤트란?"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "메트릭스 이벤트. 경고 알림 > 이벤트 설정 메뉴에서 화면 위에 메트릭스 를 선택하세요. 화면 오른쪽 위에 이벤트 추가 를 선택하세요. 메트릭스 이벤트 창이 나타납니다.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 이벤트"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "기본 정보 입력. 이벤트명 : 추가하려는 이벤트 이름을 입력하세요. 이벤트 활성화 : 이벤트를 활성화 여부를 선택하세요. 템플릿 : 만들어진 템플릿을 선택해 빠르고 쉽게 이벤트를 설정할 수 있습니다. 템플릿을 사용하지 않을 경우 사용 안 함 을 선택하세요. 노트 템플릿 목록에 대한 자세한 내용은 다음 문서 를 참조하세요. 카테고리 : 메트릭스 데이터를 구분하는 단위입니다. 메트릭스 이벤트 설정 시 필수 선택 값입니다. 카테고리 선택 옵션에는 이름 과 데이터 수집 간격, 키 정보를 표시합니다. 이벤트 설정 시 해당 카테고리의 키 값을 사용합니다. 카테고리 는 최근 3시간 범위 내 프로젝트에서 수집 중인 메트릭스 데이터를 조회해 목록에 표시합니다. 카테고리 선택 옵션에 수집 간격이 표시되지 않는 경우 직접 입력하기 옵션을 선택해 카테고리 키를 입력할 수 있습니다. 레벨 이벤트 발생 시 경고 수준을 나타냅니다. Critical , Warning , Info 수준으로 나눕니다. Critical , Warning 레벨 설정 시 이벤트 상태가 해결되면 추가 알림 선택 옵션이 활성화됩니다. 이벤트 상태가 해결되면 추가 알림  : 이벤트 항목 중 발생한 이벤트 상태가 해결되면 추가 알림 송신 여부를 선택할 수 있습니다. 토글 버튼을 선택해 기능을 켜거나 끌 수 있습니다. 메시지 이벤트 발생 시 출력하는 알림 메시지를 입력합니다. ${Tag} 또는 ${Field} 입력으로 메시지에 변수를 적용할 수 있습니다. 변수에 입력할 키는 선택한 메트릭스 데이터 카테고리 에 포함된 값이여야 합니다. 메트릭스 조회 메뉴에서 입력할 수 있는 태그 또는 필드키를 확인할 수 있습니다. 버튼을 클릭하면 이전에 입력한 메시지 기록을 확인할 수 있습니다. 수신 테스트 필수 항목인 이벤트명 , 카테고리 , 레벨 , 메시지 정보를 기준으로 알림을 발생시켜 메시지를 점검하는 기능입니다. 노트 수신 테스트를 이용하려면 필수 항목( 이벤트명 , 카테고리 , 레벨 , 메시지 )에 값을 입력하거나 선택해야 합니다. 이벤트 발생 조건 필드, 연산자 선택, 임계값을 입력해 이벤트 발생 조건을 설정하세요. 이벤트 대상 필터링 태그, 연산자 선택, 필터링값을 입력해 대상을 필터링합니다. 입력값이 없을 경우 전체 에이전트를 대상으로 경고 알림을 보냅니다. 노트 이벤트 발생 조건 과 이벤트 대상 필터링 에서 사용할 수 있는 기본 문법과 연산자 목록은 다음 문서 를 참조하세요. 이벤트 발생 조건 과 이벤트 대상 필터링 옵션은 선택 입력 또는 직접 입력 옵션을 선택할 수 있습니다. 이벤트 설정 내용이 저장된 이후에는 해당 옵션값은 직접 입력 옵션으로 관리합니다. 이후 선택 입력 옵션으로 전환하면 옵션값이 초기화될 수 있습니다. 이벤트 발생 조건과 대상 입력 시 특수 문자( ~!@#$%^&*()_+=-[]` )를 포함하거나 숫자로 시작하는 필드명을 입력하면 오류가 발생할 수 있습니다. 이런 경우 직접 입력 옵션을 선택한 다음 예시와 같이 중괄호( $ )로 묶어서 입력하세요. ${4xxErrorType} == '401'",
  "product": "JAVA 모니터링",
  "header": "기본 정보 입력"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "이벤트 수신 설정. 발생 횟수 : 선택한 시간 동안 이벤트 발생 조건 에서 설정한 이벤트가 입력 횟수만큼 발생하면 경고 알림을 보냅니다. 노트 선택 시간을 사용 안 함 으로 설정하면 입력한 횟수만큼 연속 발생할 때 알림을 보냅니다. 이벤트 상태가 해결되면 추가 알림 옵션을 활성화한 경우 선택 시간은 사용 안 함 으로 선택할 것을 권장합니다. 카테고리 옵션에서 선택한 항목의 수집 주기는 5초입니다. 이벤트 발생 일시 중지  : 과도한 경고 알림 발생을 방지할 수 있는 옵션입니다. 첫번째 경고 알림 이후 선택한 시간 동안 경고 알림을 보내지 않습니다. 또한 이벤트 기록 메뉴에 기록되지 않습니다. 관련 카테고리 : 관련 카테고리를 5개까지 설정하고 알림 조회 시 참조합니다. 이벤트 수신 태그 : 이벤트 수신 태그를 선택하면 해당 태그를 가진 프로젝트 멤버와 3rd-party 플러그인에 알림을 전송할 수 있습니다. 이벤트 수신 태그를 선택하지 않으면 프로젝트 전체 멤버에게 경고 알림을 보냅니다. 노트 경고 알림 > 이벤트 수신 설정 메뉴에서 프로젝트 멤버와 3rd-party 플러그인에 태그를 설정할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "이벤트 수신 설정"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "알림 규칙 테스트. 선택한 시간 동안 설정한 이벤트 조건을 실행해 몇 번의 경고 알림이 발생했는지 확인할 수 있습니다. 실행 버튼을 선택하면 알림 발생 건수 정보를 알 수 있으며, 이벤트 발생 조건에서 선택한 필드와 임계치를 차트상에 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "알림 규칙 테스트"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "복합 메트릭스 이벤트. 복합 메트릭스 이벤트를 이용하려면 다음의 개념에 대한 이해가 필요합니다. 메트릭스란? MXQL 복합 메트릭스 이벤트는 메트릭스 데이터에 보다 복잡한 규칙을 활용해 이벤트를 생성하고 경고 알림을 보낼 수 있습니다. 복합 메트릭스은 다음과 같은 상황에서 효과적으로 사용할 수 있습니다. 여러 에이전트에서 수신된 데이터에 대해 종합적인 이벤트 판정을 해야할 때 과거 데이터와 현재 데이터를 비교해 이벤트 판정을 해야할 때 메트릭스 이벤트는 에이전트로부터 메트릭스를 수신할 때마다 이벤트 판정을 합니다. 반면, 복합 메트릭스 이벤트는 각 에이전트에서 수집한 메트릭스들을 데이터베이스에 저장합니다. 그리고 다시 조회해서 이벤트 판정을 합니다. 이와 같은 특성 때문에 여러 에이전트의 데이터를 종합적으로 활용하거나 과거의 데이터를 활용할 수 있습니다. 하지만 MXQL 이라는 와탭 고유의 데이터 조회 언어를 사용해야한다는 진입장벽이 존재합니다. 따라서 사용자들이 기초적인 MXQL 만 이해하더라도 효과적으로 이벤트를 설정할 수 있도록 이벤트 템플릿을 제공합니다. MXQL 기초 사용자는 이벤트 대상 필터링과 이벤트 조건에 대한 쿼리만 수정해서 이벤트를 적용할 수 있습니다. 경고 알림 > 이벤트 설정 메뉴에서 화면 위에 메트릭스 를 선택하세요. 복합 메트릭스 섹션에서 오른쪽에 이벤트 추가 를 선택하세요. 복합 메트릭스 창이 나타나면 차트로 생성하기 를 선택하세요. 이벤트 설정 창이 나타납니다. 노트 복합 메트릭스 이벤트를 설정하려면 이벤트 설정 권한이 있어야 합니다. 노트 복합 메트릭스에 이벤트 템플릿에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "복합 메트릭스 이벤트"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "이벤트 데이터 조회. 복합 메트릭스 이벤트는 메트릭스 데이터 질의 언어인 MXQL 을 기반으로 이벤트 조건을 생성합니다. 차트로 생성하기 기능은 MXQL 의 자동완성을 위한 콤보박스 기능을 제공합니다. 이벤트 데이터를 조회하여 차트를 구성한 다음 이벤트 발행 조건을 직접 입력하기 위한 템플릿입니다. 위젯 또는 텍스트 옵션을 선택해 이벤트를 설정하세요. 위젯 텍스트 시계열 차트를 구성하는 옵션을 통해 이벤트 설정 시 사용할 MXQL 을 자동완성할 수 있습니다. 필터 : 이벤트 조건 대상을 선택합니다. 연산식, 태그, 필터링값을 입력해 필터링 조건을 생성합니다. 그룹화 : 그룹화된 메트릭스 데이터를 선택합니다. 다중 선택할 수 있습니다. 타임 유닛 : 그룹화된 데이터를 나눌 시간 기준을 설정합니다. 초 , 분 , 시간 단위로 선택하고 설정할 수 있습니다. 필드 : 이벤트 발행 조건에 사용할 필드를 선택합니다. 다중 선택할 수 있습니다. MXQL 을 평문 그대로 수정할 수 있는 편집창이 나타납니다.",
  "product": "JAVA 모니터링",
  "header": "이벤트 데이터 조회"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "알림. 경고 알림 설정의 기본 정보를 입력합니다. 이벤트 활성화 : 토글 버튼을 클릭해 이벤트를 활성활 여부를 선택할 수 있습니다. 레벨 : 위험(Critical) , 경고(Warning) , 정보 수준 중 하나의 레벨을 선택하세요. 이벤트 상태가 해결되면 추가 알림 : 이벤트 항목 중 발생한 이벤트 상태가 해결되면 추가 알림 송신 여부를 선택할 수 있습니다. 토글 버튼을 선택해 기능을 켜거나 끌 수 있습니다. 제목 : 경고 알림의 제목을 입력하세요. 메시지 : 이벤트 발생 시 출력하는 알림 메시지를 입력합니다. ${Tag} 또는 ${Field} 입력으로 메시지에 변수를 적용할 수 있습니다. 변수에 입력할 키는 선택한 메트릭스 데이터 카테고리 에 포함된 값이여야 합니다. 메트릭스 조회 메뉴에서 입력할 수 있는 태그 또는 필드키를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "알림"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "알림 정책. 경고 알림을 보낼 조건을 입력합니다. 데이터 조회 범위 : 이벤트 조건에 사용할 MXQL 의 실시간 데이터 조회 범위를 설정합니다. 이벤트 데이터 조회에 포함된 필드만 사용할 수 있습니다. 복합 메트릭스 이벤트는 DB에 저장된 메트릭스를 조회해서 활용합니다. 따라서 데이터를 조회할 시간 범위를 먼저 지정해야 합니다. 데이터 조회 시간을 5분으로 선택하면 최근 5분동안 수집된 데이터를 조회해서 이벤트 발생 조건을 확인합니다. 최근 데이터에 대해서 이벤트를 설정할 때에는 짧게, 넓은 시간에 대해서 통계적으로 접근하고 싶을 때에는 길게 설정할 수 있습니다. 노트 실제 사용 예시는 다음 문서 를 참조하세요. 조건 : MXQL에 반영한 필드와 연산 규칙, 임계치를 입력합니다.",
  "product": "JAVA 모니터링",
  "header": "알림 정책"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "부가 정보. 경고 알림 수신과 관련한 부가적인 옵션을 설정합니다. 인터벌 : 선택한 시간 간격으로 알림 조건을 확인합니다. 무음 : 과도한 경고 알림 발생을 방지할 수 있는 옵션입니다. 첫번째 경고 알림 이후 선택한 시간 동안 경고 알림을 보내지 않습니다. 또한 이벤트 기록 메뉴에 기록되지 않습니다. 이벤트 수신 태그 : 이벤트 수신 태그를 선택하면 해당 태그를 가진 프로젝트 멤버와 3rd-party 플러그인에 알림을 전송할 수 있습니다. 이벤트 수신 태그를 선택하지 않으면 프로젝트 전체 멤버에게 경고 알림을 보냅니다. 노트 경고 알림 > 이벤트 수신 설정 메뉴에서 프로젝트 멤버와 3rd-party 플러그인에 태그를 설정할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "부가 정보"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "이벤트 규칙 테스트. 선택한 시간 동안 설정한 이벤트 조건을 실행해 몇 번의 경고 알림이 발생했는지 확인할 수 있습니다. 실행 버튼을 선택하면 알림 발생 건수 정보를 알 수 있으며, 이벤트 발생 조건에서 선택한 필드와 임계치를 차트상에 표시합니다. 이벤트 설정에 포함된 대부분의 내용들이 MXQL 을 사용해서 지정됩니다. MXQL 이 적절하게 작성되었는지 시뮬레이션할 수 있는 기능을 제공합니다. 시뮬레이션 기능은 과거의 24시간 데이터를 조회해서 이벤트 판정을 한 다음 몇 건의 메트릭스가 조회되었고 그 중 몇 건에서 이벤트 판정이 성공했는지 알려줍니다.",
  "product": "JAVA 모니터링",
  "header": "이벤트 규칙 테스트"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "메트릭스 이벤트 수정 및 삭제. 경고 알림 > 이벤트 설정 메뉴로 이동한 다음 메트릭스 탭을 선택하세요. 이벤트 목록에서 수정 또는 삭제하려는 항목의 가장 오른쪽에 버튼을 선택하세요. 메트릭스 또는 복합 메트릭스 이벤트 설정 창이 나타나면 각 옵션을 수정한 다음 저장 버튼을 선택하세요. 선택한 이벤트를 삭제하려면 이벤트 설정 창의 오른쪽 위에 삭제 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 이벤트 수정 및 삭제"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "발생 조건, 대상 선택 가이드. 메트릭스 경고 알림의 이벤트 발생 조건과 이벤트 대상 선택은 동일한 문법을 사용합니다. 단, 이벤트 발생 조건은 태그(Tag)의 Key를 변수로 사용하고, 이벤트 대상 선택은 필드(Field)의 Key를 변수로 사용합니다.",
  "product": "JAVA 모니터링",
  "header": "발생 조건, 대상 선택 가이드"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "기본 문법. 문자열을 그냥 입력하면 변수, 작은 따옴표('') 또는 큰 따옴표(\"\")로 감싸면 text로 인식합니다. oid == \"oid\" 1. oid : 변수 2. == : 함수 3. \"oid\" : text // oname가 ott-1235일 경우 // 정상적인 경우 onname = 'ott - 1235 ' 또는 onname = \"ott-1235\" // 비정상적인 경우, 알림이 동작하지 않습니다. onname = ott - 1235 숫자를 그냥 입력하면 number, 작은 따옴표('') 또는 큰 따옴표(\"\")로 감싸면 text로 인식합니다. oid == 123 1. oid : 변수 2. == : 함수 3. 123 : number // oid가 123일 경우 // 정상적인 경우 oid = 123 // 비정상적인 경우, 알림이 동작하지 않습니다. id == '123' 또는 oid == \"123\"",
  "product": "JAVA 모니터링",
  "header": "기본 문법"
},
{
  "title": "Java 모니터링",
  "url": "https://docs.whatap.io/java/introduction",
  "content": "Java 모니터링. Java 환경에서 동작하는 모든 애플리케이션 서버를 모니터링할 수 있습니다. 이 문서는 Java 모니터링 상품에 대한 소개 페이지입니다. Web Application Server(WAS), 배치 애플리케이션 등 JVM 환경에서 동작하는 모든 애플리케이션에 적용할 수 있습니다. 애플리케이션 장애분석을 위해 Thread Dump(스레드 덤프)를 확보하던 번거로움에서 벗어나, 이미 확보된 스택을 통해 장애 상황의 재현 없이도 문제의 원인을 정확하게 특정할 수 있습니다. 와탭의 애플리케이션 모니터링은 장애 재현 없이 실시간으로 모니터링이 가능합니다.",
  "product": "JAVA 모니터링",
  "header": "Java 모니터링"
},
{
  "url": "https://docs.whatap.io/java/introduction",
  "title": "Java 모니터링",
  "content": "주요 특장점. 실시간 트랜잭션 모니터링 와탭은 현재 진행중인 트랜잭션의 수행 현황을 실시간으로 보여줍니다. 모든 애플리케이션 문제는 진행중인 트랜잭션 증가로 나타납니다. 증가한 순간에 수행중인 SQL, 외부 호출, Method를 즉시 확인 할 수 있다면 문제를 가장 빠르게 인지하고 분석할 수 있습니다. 트랜잭션 성능 Deep Dive 와탭은 모든 트랜잭션의 수행이력을 수집해 분석할 수 있습니다. 트랜잭션 성능은 SQL, Http Call 뿐 아니라 Method 레벨까지 추적할 수 있습니다. 특히 액티브 스택 기능으로 번거로운 Method 트레이스 설정 없이 Method 레벨 분석이 가능합니다. 액티브 스택 은 와탭만의 특허 기술로 기존의 다른 상품에서는 발견하지 못했던 숨겨진 영역의 문제 원인을 찾아 개선 포인트를 제공합니다. 노트 액티브스택 기능은 Java, Python에서만 지원합니다. MSA 호출 패턴 분석 MSA 구조의 복잡한 애플리케이션간의 호출 관계를 트랜잭션 URL 기준으로 호출 비중을 통계적으로 시각화하여 제공합니다. 시점별로 변화하는 호출 관계 및 호출 비중의 변화를 통계적으로 조망할 수 있습니다. AI 기반 응답 분포 패턴 분석 와탭은 특정 패턴을 머신 러닝을 통해 자동 인식하여 알림 경고를 발생, 운영자가 인지하지 못한 이슈까지 알려드립니다. (설치형 별도 협의) 출원번호: 10-2020-0037381 멀티 프로젝트 트랜잭션 연계 분석 MSA 환경에서 트랜잭션 연계 추적 기능을 제공합니다. 전체 트랜잭션을 추적하여 어느 애플리케이션에서 지연이 발생하는지를 파악할 수 있습니다. 스택 통계 분석 통계분석에서는 실시간 모니터링이나 트레이스 정보에서 발견하기 힘든 튜닝 포인트를 찾아낼 수 있습니다. 거시적인 문제의 추이 또한 그래프와 표를 통하여 개선 대상을 선별하거나 특정 시간대의 응답지연 현상을 확인할 수 있습니다. 사후 분석 ( Cube ) 시간을 축으로 다양한 지표를 한번에 확인 할 수 있습니다. 응답시간, 에러 건수 및 처리량 등이 높은 시간대만을 특정할 수 있어 동 시간대 문제 요소를 식별하거나 서비스 현황을 정확하게 조망할 수 있습니다. 서비스 폭주 시 부하량 제어 시스템이 감당할 수 없는 과도한 요청이 들어오는 경우에 일부 요청을 거절하거나 잘못된 서비스 요청은 차단하여 안정적으로 서비스를 운영할 수 있습니다. 비동기 트랜잭션 트레이스 와탭만의 고유한 BCI(Byte Code Instrumentation) 기술로 비동기 트랜잭션의 성능을 효과적으로 추적합니다. WebFlux, Reactor, Hystrix 등을 사용하는 애플리케이션의 트랜잭션 트레이스 정보를 수집합니다.",
  "product": "JAVA 모니터링",
  "header": "주요 특장점"
},
{
  "title": "통합 보고서",
  "url": "https://docs.whatap.io/java/integrated-report",
  "content": "통합 보고서. 통합 보고서를 안내합니다. 홈 화면 > 통합 보고서 와탭 모니터링 서비스 초기 화면에서 프로젝트를 선택하지 않고 기본 메뉴 하위에 통합 보고서를 선택하세요. 통합 보고서는 여러 프로젝트에 대한 보고서를 간편하게 생성할 수 있습니다. 보고서 종류와 원하는 프로젝트를 선택하여 보고서를 생성할 수 있고, 보고서 생성 목록에서 작업 진행 상태를 확인할 수 있습니다. 보고서 생성 중 특정 프로젝트에서 에러가 발생한 경우 에러 내용을 확인할 수 있습니다. 작업이 완료된 보고서를 바로 조회하거나, 다운로드 및 인쇄 기능을 통해 다른 사람에게 보고서를 공유할 수 있습니다.  통합 보고서의 기능은 다음과 같습니다.  멀티 프로젝트 지원 통합 보고서 메뉴에서 여러 프로젝트를 선택해 한 번에 보고서를 생성할 수 있어 편리합니다. 기존 보고서 메뉴는 프로젝트마다 보고서를 생성해야 했습니다. 업무 단위 보고서 생성 보고서 생성 메뉴에서 업무 단위로 프로젝트를 선택해 템플릿으로 저장할 수 있습니다. 보통 업무 단위로 프로젝트를 나누어 사용하는 마이크로 서비스 아키텍처(MSA, Micro Service Architecture) 환경에서 유용한 기능입니다. 대용량 데이터 최적화 통합 보고서 메뉴는 보고서 생성 시간이 획기적으로 줄어들었습니다. 그리고 일부 프로젝트 보고서 작성 과정에서 오류가 발생하더라도 보고서 결과를 조회할 수 있습니다. 보고서 생성 중 동시 작업 가능 통합 보고서 메뉴에서 보고서를 생성하는 동시에 다른 업무를 보는 것이 가능합니다. 기존 보고서 메뉴는 생성 작업이 완료될 때까지 기다려야만 했습니다. 통합 보고서 메뉴에서 보고서 생성을 시작한 후 다른 페이지로 이동할 수 있습니다. 또한 보고서 결과 목록에서 진행 상태와 완료된 보고서를 조회할 수 있습니다. 보고서 작업 공유 동일 프로젝트 권한을 가진 사용자라면 누구든 생성한 보고서를 조회할 수 있습니다. 관련 보고서가 이미 생성됐는지 확인할 수 있어 중복으로 작성하지 않을 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "통합 보고서"
},
{
  "url": "https://docs.whatap.io/java/integrated-report",
  "title": "통합 보고서",
  "content": "보고서와 통합 보고서의 차이. 보고서 는 하나의 프로젝트에 대한 보고서를 생성하는 메뉴입니다. 따라서 프로젝트를 선택 후 좌측의 통계/보고서 메뉴를 통해 접근이 가능합니다. 통합 보고서 는 여러 프로젝트에 대한 보고서를 생성하는 메뉴입니다. 프로젝트를 선택하지 않고 기본 메뉴에서 접근이 가능합니다. 보고서 의 상세 내용은 다음 문서 에서 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "보고서와 통합 보고서의 차이"
},
{
  "url": "https://docs.whatap.io/java/integrated-report",
  "title": "통합 보고서",
  "content": "보고서 생성 방법. 보고서 종류 선택 보고서 종류 메뉴에서 원하는 보고서 유형을 선택하면 보고서 생성 버튼이 활성화됩니다. 보고서 이름 앞의 아이콘 은 보고서의 양식이 지원하는 프로젝트 플랫폼을 의미합니다. 애플리케이션 프로젝트 플랫폼을 나타냅니다. 쿠버네티스 프로젝트 플랫폼을 나타냅니다. 서버 프로젝트 플랫폼을 나타냅니다. 상세 설정 보고서 종류 선택 후 보고서 생성 버튼을 클릭하세요. 다음과 같이 상세 설정을 할 수 있습니다. 보고서 제목 같은 타입의 보고서가 여러 개인 경우 이름을 지정하면 보고서 결과를 구분하기 쉽습니다. 시간 보고서에 사용될 데이터의 기간을 선택하세요. 기간은 보고서 타입(일, 주, 월)에 따라 달라집니다. 프로젝트 선택 보고서를 작성할 프로젝트를 선택하세요. 그룹 및 개별 프로젝트 단위로 선택이 가능합니다. 보고서 양식 저장과 불러오기 지금 입력된 보고서의 설정을 템플릿으로 저장하고 다음 생성 시 타입 목록에서 불러올 수 있습니다. 업무 단위로 프로젝트를 자주 사용하시는 분들에게 유용한 기능입니다. 보고서 생성 설정을 완료했다면 보고서 생성 버튼을 눌러 보고서를 생성하세요.",
  "product": "JAVA 모니터링",
  "header": "보고서 생성 방법"
},
{
  "url": "https://docs.whatap.io/java/integrated-report",
  "title": "통합 보고서",
  "content": "작업 목록 확인. 보고서 생성 목록 에서 이전에 만들었던 보고서와 현재 작업 중인 보고서를 확인할 수 있습니다. 전체 목록에서는 내가 생성한 보고서 외에도 나와 같은 권한을 가진 사람이 생성한 보고서를 함께 볼 수 있습니다. 내 보고서 목록에서는 내가 생성한 보고서만 필터링하여 볼 수 있습니다. 에러 없이 생성된 보고서는 체크 아이콘으로 표시되며, 에러가 포함된 경우는 경고 아이콘이 함께 표시됩니다. 경고 아이콘을 클릭하시면 어떤 프로젝트에서 에러가 발생했는지 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "작업 목록 확인"
},
{
  "url": "https://docs.whatap.io/java/integrated-report",
  "title": "통합 보고서",
  "content": "조회 및 공유. 보고서는 3가지 방식으로 제공됩니다. 화면 조회 작업 목록에서 생성한 보고서를 선택하면 화면에서 바로 조회하여 볼 수 있습니다. 다운로드 다운로드 버튼을 클릭하면 바로 보기의 보고서와 같은 파일이 html 형식으로 다운로드 됩니다. 모니터링 관리 권한이 없는 사람에게 보고서를 공유할 수 있습니다. 인쇄 및 PDF 저장 인쇄 버튼을 누르면 컴퓨터에 연결된 프린터로 인쇄하거나 또는 PDF 형식으로 저장할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "조회 및 공유"
},
{
  "title": "인스턴스 성능 관리",
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "content": "인스턴스 성능 관리. Java 애플리케이션의 환경을 확인하고 성능과 관련한 설정을 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 애플리케이션의 환경을 확인하고 성능과 관련한 설정을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "인스턴스 성능 관리"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "에이전트 목록. 화면 왼쪽에 애플리케이션 목록에서는 프로젝트에 할당된 에이전트 목록을 확인할 수 있습니다. 개별 에이전트 항목을 선택하면 오른쪽 화면에 설정된 환경 변수 및 에이전트 설정, 성능과 관련한 정보를 조회할 수 있습니다. 에이전트 목록을 갱신하거나 비활성화된 에이전트를 재기동한 다음 목록에 자동으로 표시되지 않는다면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 목록"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "에이전트 및 애플리케이션 상세 정보. 화면 오른쪽에서는 에이전트 및 애플리케이션과 관련한 상세 정보를 확인할 수 있습니다. 오른쪽 위에 텍스트 입력란을 통해 원하는 항목을 필터링할 수 있습니다. 모니터링 대상 서버에 위치한 에이전트 및 애플리케이션의 변경 사항이 자동 반영되지 않는다면 새로고침 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 및 애플리케이션 상세 정보"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "실행 환경 변수. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 실행 환경 변수 에이전트 실행과 관련한 환경 변수를 조회할 수 있습니다. 에이전트 버전 및 설치 경로, 이름, IP 주소 등을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "실행 환경 변수"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "에이전트 로그. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 에이전트 로그 모니터링 대상 서버에 저장된 에이전트 로그를 조회할 수 있습니다. 로그 파일의 이름은 whatap- YYYYMMDD .log 형식입니다. 각 로그를 선택해 로그에 캡쳐되는 오류 및 이벤트에 대한 정보를 액세스할 수 있습니다. 노트 로그와 관련한 에이전트 설정은 다음 문서 를 참조하세요. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 에이전트 설정 Old 모니터링 대상 서버에 위치한 whatap.conf 파일을 직접 수정하지 않고 에이전트 설정 옵션을 추가하거나 수정, 삭제할 수 있습니다. 정보 에이전트 설정 기능은 사용성과 기능을 개선한 관리 > 에이전트 설정 메뉴를 이용할 것을 권장합니다. 화면 오른쪽 위에 신규 에이전트 설정 버튼을 선택하세요. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 로그"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "환경변수. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 환경변수 애플리케이션 실행과 관련한 환경 변수 정보를 조회할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 힙 히스토그램 JVM(자바 가상 머신)의 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있습니다. 노트 Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } Java 5 버전 이하, IBM Java는 지원하지 않습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 로딩된 클래스 Java 애플리케이션에 로딩된 클래스 정보를 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 라이브러리 버전 Java 애플리케이션을 구성하는 라이브러리의 버전을 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 스레드 목록/덤프 Java 프로세스의 모든 스레드 상태에 대한 스냅샷 정보를 확인할 수 있습니다. Java 애플리케이션의 성능 문제를 진단하는데 이용할 수 있습니다. 스레드 목록에서 각 스레드의 버튼을 선택하면 스레드 덤프 정보를 확인할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 소켓 오픈 개수 Java 애플리케이션이 TCP 기능을 수행하기 위해 오픈한 소켓(Socket) 정보를 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 메소드 성능 상태 Java 애플리케이션에서 수행 중인 메소드(Method)의 상세 정보를 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 데이터소스 상태 데이터소스(DataSource)의 상태를 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 시스템 GC JVM(자바 가상 머신)의 Heap 영역에서 동적으로 할당했던 메모리 중 필요 없게 된 메모리 객체(garbage)를 모아 제거할 수 있습니다. 실행 버튼을 선택하면 GC 프로세스를 실행하게 되며, 실행 전 후의 메모리 용량을 확인할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 힙 덤프 Java 애플리케이션 실행 중 메모리 누수 등의 문제가 발생하면 관련된 문제를 정리하여 덤프 파일을 생성할 수 있습니다. 힙 덤프 확보 버튼을 선택하세요. 노트 이 기능은 Java 에이전트 1.5.2 버전 이상에서 지원합니다. 에이전트 설정에서 heapdump_enabled 옵션을 true 로 설정하세요. 힙 덤프 확보 버튼을 선택해 힙 덤프 파일을 만드는 기능을 활성화합니다. 매번 힙 덤프를 자동 생성하지 않으며 해당 옵션이 성능에 영향을 주진 않습니다. 그러나 덤프 확보 작업은 성능에 영향을 미칠 수 있습니다. 힙 덤프 확보 작업은 부하가 큰 작업에 속합니다. 부하와 별개로 힙 덤프가 모두 추출될 때까지 애플리케이션의 코드는 실행이 중지(stop the world)되기 때문에 사용자가 느끼는 성능 차이는 더 심할 수 있습니다. 홈 화면 > 프로젝트 선택 > 인스턴스 성능 관리 > 쓰로틀링 설정 Java 애플리케이션의 부하량 제어와 관련한 에이전트 설정을 확인하고 옵션을 설정할 수 있습니다. 부하량 제어와 관련한 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "환경변수"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "스레드 덤프 분석하기. 스레드 목록/덤프 탭에서 확인할 수 있는 정보에 대해 안내합니다.",
  "product": "JAVA 모니터링",
  "header": "스레드 덤프 분석하기"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "스레드 상태. 스레드의 상태는 java.lang.Thread 클래스 내부에 State 라는 이름의 Enumerated Types(열거형)으로 선언된 항목들입니다. NEW : 스레드가 생성되었지만 아직 실행되지 않은 상태입니다. RUNNABLE : 현재 CPU를 점유하고 작업을 수행 중인 상태입니다. 운영체제의 자원 분배로 WAITING 상태가 될 수도 있습니다. WAITING : wait() , join() , park() 메소드 등를 이용해 대기하고 있는 상태입니다. TIMED_WAITING : sleep() , wait() , join() , park() 메소드 등을 이용해 대기하고 있는 상태, WAITING 상태와 다른 점은 주어진 시간 동안 대기하고 있는 상태입니다. 외부적인 변화 뿐만 아니라 시간에 의해서도 대기 상태가 해제될 수 있습니다. BLOCKED : 사용하려는 개체의 락(Lock)이 풀릴 때까지 대기하고 있는 상태입니다. TERMINATED : 실행을 마친 상태입니다.",
  "product": "JAVA 모니터링",
  "header": "스레드 상태"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "스레드 덤프 정보. 스레드 목록에서 각 스레드의 버튼을 선택하면 스레드 덤프 정보를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "스레드 덤프 정보"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "스택. 항목 속성 설명 스레드 ID threadId 스레드에 할당된 고유 ID Lock 소유주 ID lockOwnerId 스레드가 차단된 개체의 모니터(Monitor) 잠금을 유지하는 스레드 ID 대기수 waitedCount 스레드가 WAITING 또는 TIMED_WAITING 상태가 된 총 횟수 블록 개수 blockedCount 스레드가 BLOCKED 상태가 된 총 횟수 대기 시간 waitedTime 스레드가 WAITING 상태를 지속한 경과 시간(밀리초), 스레드 경합 모니터링이 비활성화된 경우 -1 반환 스레드 CPU 시간 threadCpuTime 스레드의 CPU 시간 합계(나노초)를 밀리초로 계산하여 표시, CPU 시간 측정을 비활성화한 경우 -1 반환 상태 threadstate 스레드 상태 블록 시간 blockedTime 스레드가 BLOCKED 상태가 된 후 경과 시간(밀리초), 스레드 경합 모니터링이 비활성화된 경우 -1 반환 스레드 명 threadName 스레드 고유 이름 Lock 이름 lockName 스레드의 입력이 차단되거나 Object.wait 메소드를 통해 통지를 기다리는 모니터 잠금을 표시한 문자열 Lock 소유주 이름 lockOwnerName 스레드가 차단되는 객체의 모니터 잠금을 수용하는 스레드 이름 스레드 사용자 시간 threadUserTime 스레드가 사용자 모드에서 실행한 CPU 시간(나노초)을 밀리초로 계산하여 표시 노트 스레드 정보에 대한 자세한 내용은 다음 링크 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "스택"
},
{
  "url": "https://docs.whatap.io/java/instance-performance-analysis",
  "title": "인스턴스 성능 관리",
  "content": "Stack 추적. 예외가 발생했을 때 스택(Stack) 추적을 표시합니다. 스택 프레임 목록으로 코드가 호출한 메소드 정보가 포함되어 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Stack 추적"
},
{
  "title": "설치 점검 사항",
  "url": "https://docs.whatap.io/java/install-check",
  "content": "설치 점검 사항. 자바(Java) 에이전트 설치 후 확인해야 할 중요한 점검 사항들에 대해 안내합니다. JAVA_OPTS 설정의 정확성, 애플리케이션 서버의 재시작 필요성 및 모니터링 서비스를 통한 에이전트 연결성 검증을 포함합니다. 에이전트를 설치한 다음 확인해야할 사항입니다. 만약 설치에 문제가 생겼다면 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "설치 점검 사항"
},
{
  "url": "https://docs.whatap.io/java/install-check",
  "title": "설치 점검 사항",
  "content": "WAS 다시 시작. 애플리케이션 서버를 다시 시작하세요. 구동 로그에서 다음과 같은 와탭 캐릭터 로그가 보인다면 JAVA_OPTS 설정을 완료한 것입니다. Nov 16 , 2016 3 :06:40 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deployment of web application directory /var/lib/tomcat7/webapps/ROOT has finished in 577 ms Nov 16 , 2016 3 :06:40 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler [ \"http-bio-8080\" ] Nov 16 , 2016 3 :06:40 AM org.apache.catalina.startup.Catalina start INFO: Server startup in 3984 ms _  \t ____       ______ | | / | / / /  ___ /_  __/__ ____ | | / | / / _ \\ / _ ` // / / _ ` / _ \\ | __/ | __/_//_/ \\ _,_//_/ \\ _,_/ .__/ /_/ Just Tap, Always Monitoring WhaTap Agent version 0.3 .9 20161115 노트 에이전트 이름의 기본값은 {type}-{ip2}-{ip3}-{port} 입니다. 에이전트의 이름을 변경하거나 속성을 추가하려면 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "WAS 다시 시작"
},
{
  "url": "https://docs.whatap.io/java/install-check",
  "title": "설치 점검 사항",
  "content": "에이전트 연결 확인. 와탭 모니터링 서비스 로 이동하세요. 로그인 후 프로젝트 목록에서 생성한 프로젝트를 선택하세요. 애플리케이션 대시보드 화면에 연결한 서버의 정보가 나타나면 적용을 완료한 것입니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 연결 확인"
},
{
  "title": "빌드팩을 이용한 Java 에이전트 설치",
  "url": "https://docs.whatap.io/java/install-agent-with-buildpack",
  "content": "빌드팩을 이용한 Java 에이전트 설치. 빌드팩을 이용해 Java 에이전트를 설치하는 방법을 안내합니다. Gradle을 사용하는 Java 애플리케이션으로 실행 가능한 도커 이미지를 빌드하는 경우 빌드팩을 이용하여 에이전트 설치할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "빌드팩을 이용한 Java 에이전트 설치"
},
{
  "url": "https://docs.whatap.io/java/install-agent-with-buildpack",
  "title": "빌드팩을 이용한 Java 에이전트 설치",
  "content": "WhaTap buildpack 기본 설정. build.gradle tasks . named ( \"bootBuildImage\" ) { buildpacks = [ \"urn:cnb:builder:paketo-buildpacks/java\" , \"docker.io/whatap/paketo-buildpack-apm\" ] }",
  "product": "JAVA 모니터링",
  "header": "WhaTap buildpack 기본 설정"
},
{
  "url": "https://docs.whatap.io/java/install-agent-with-buildpack",
  "title": "빌드팩을 이용한 Java 에이전트 설치",
  "content": "옵션 설정. 와탭 수집 서버에 연결되어야 데이터를 수집할 수 있습니다. 액세스키( accesskey ), 와탭 수집 서버 주소( whatap.server.host ) 정보는 필수입니다. 그 외에 환경 및 기능의 필요에 따라 옵션을 추가 설정할 수 있습니다. build.gradle tasks . named ( \"bootBuildImage\" ) { // Whatap environment [ \"BP_WHATAP_ENABLED\" ] = \"true\" // java 17, There must be a space at the beginning. environment [ \"BPE_APPEND_JAVA_TOOL_OPTIONS\" ] = \" --add-opens=java.base/java.lang=ALL-UNNAMED \" // add multi options, delimeter is linefeed character environment [ \"BP_WHATAP_OPTIONS\" ] = \"accesskey=aaa-bbb-ccc\\nwhatap.server.host=1.1.1.1/2.2.2.2\" buildpacks = [ \"urn:cnb:builder:paketo-buildpacks/java\" , \"docker.io/whatap/paketo-buildpack-apm\" ] } BP_WHATAP_ENABLED 와탭 에이전트 활성화 여부를 설정합니다. 값이 false 라면 설치는 진행되지만, 모니터링이 중지된 상태로 시작합니다. 추후 와탭 모니터링 서비스 에서 관리 > 에이전트 설정 메뉴를 통해서 true 로 변경할 수 있습니다. BPE_APPEND_JAVA_TOOL_OPTIONS Java 17 버전 이상을 사용하는 경우 필수로 jvm 옵션을 추가하세요. environment [ \"BPE_DELIM_JAVA_TOOL_OPTIONS\" ] = \" \" environment [ \"BPE_APPEND_JAVA_TOOL_OPTIONS\" ] = \"--add-opens=java.base/java.lang=ALL-UNNAMED\" delimeter 환경 변수를 사용하지 않는다면 앞뒤로 공백을 추가하세요. environment [ \"BPE_APPEND_JAVA_TOOL_OPTIONS\" ] = \" --add-opens=java.base/java.lang=ALL-UNNAMED \" BP_WHATAP_OPTIONS 와탭 에이전트 설정을 추가할 수 있습니다. 라인피드 \"\\n\" 을 구분자로 옵션을 설정합니다. 옵션은 key=value 입니다. 설정한 옵션 값은 Docker Image 생성 단계에서 whatap.conf 파일에 저장됩니다. environment [ \"BP_WHATAP_OPTIONS\" ] = \"accesskey={액세스 키}\\nwhatap.server.host={수집 서버 주소}\" // 예시: environment[\"BP_WHATAP_OPTIONS\"] = \"accesskey=aaa-bbb-ccc\\nwhatap.server.host=1.1.1.1/2.2.2.2\"",
  "product": "JAVA 모니터링",
  "header": "옵션 설정"
},
{
  "url": "https://docs.whatap.io/java/install-agent-with-buildpack",
  "title": "빌드팩을 이용한 Java 에이전트 설치",
  "content": "Tomcat 10 환경. Tomcat 환경에서는 weaving=tomcat10 옵션을 필수로 추가해야 합니다. environment [ \"BP_WHATAP_OPTIONS\" ] = \"accesskey={액세스 키}\\nwhatap.server.host={수집 서버 주소}\\nweaving=tomcat10\"",
  "product": "JAVA 모니터링",
  "header": "Tomcat 10 환경"
},
{
  "url": "https://docs.whatap.io/java/install-agent-with-buildpack",
  "title": "빌드팩을 이용한 Java 에이전트 설치",
  "content": "Container 실행 옵션. 컨테이너(Container) 실행 시 환경 변수로 액세스 키와 와탭 수집 서버 주소를 다음과 같이 설정할 수 있습니다. docker run --rm -p 8080:8080 \\ -e accesskey={액세스 키} \\ -e whatap.server.host={수집 서버 주소} \\ -e weaving=tomcat10,webflux-6.0 \\ spring-boot-gradle-hello-world-pcketo-buildpack-whatap",
  "product": "JAVA 모니터링",
  "header": "Container 실행 옵션"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "사용 가능한 연산자 목록. 연산자 사용법 설명 == operand1== operand2 operand1과 operand2의 값이 동일한지 확인합니다. != operand1 != operand2 operand1과 operand2의 값이 다른지 확인합니다. > operand1 > operand2 operand1의 값이 operand2의 값보다 큰지 확인합니다. >= operand1 >= operand2 operand1의 값이 operand2의 값보다 큰거나 같은지 확인합니다. < operand1 < operand2 operand1의 값이 operand2의 값보다 작은지 확인합니다. <= operand1 <= operand2 operand1의 값이 operand2의 값보다 작거나 같은지 확인합니다. like operand1 like operand2 operand1에 operand2가 포함되어 있는 지를 패턴으로 검색합니다. && expression1 && expression2 expression1과 expression2이 모두 true 인지 확인합니다. and expression1 and expression2 expression1과 expression2이 모두 true 인지 확인합니다. **&&**와 동일한 역할을 수행하는 연산자입니다. || expression1 || expression2 expression1 또는 expression2이 true 인지 확인합니다. or expression1 or expression2 expression1 또는 expression2이 true 인지 확인합니다. **||**와 동일한 역할을 수행하는 연산자입니다.",
  "product": "JAVA 모니터링",
  "header": "사용 가능한 연산자 목록"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "like 사용법. 와일드카드( * )를 통해 포함 문자열을 편리하게 검색할 수 있습니다. 특정 키워드로 시작하는 문자열 검색 Key like \"Value*\" 특정 키워드로 끝나는 문자열 검색 Key like \"*Value\" 특정 키워드가 포함된 문자열 검색 Key like \"*Value*\" 키워드 중간에 와일드카드( * )를 사용할 수 없습니다. // 지원하지 않는 문법 Key like \"Va*lue\" like 연산자에서 와일드카드( * )를 생략하는 경우 equals( == )로 동작합니다. // 아래의 두 문장은 완전히 같은 결과를 가집니다. Key like \"Value\" Key == \"Value\"",
  "product": "JAVA 모니터링",
  "header": "like 사용법"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "사용 가능한 함수 목록. 함수 사용법 설명 startsWith startsWith(param1, param2) param1을 Key로 하는 Value가 param2로 시작하면 true , 반대의 경우 false endsWith endsWith(param1, param2) param1을 Key로 하는 Value가 param2로 끝나면 true , 반대의 경우 false isNull isNull(param1) param1이 null 이면 true , 반대의 경우 false isNotNull isNotNull(param1) param1이 null 이 아니면 true , 반대의 경우 false isEmpty isEmpty(param1) param1이 null 또는 EmptyString(\"\") 이면 true , 반대의 경우 false isNotEmpty isNotEmpty(param1) param1이 null 도 아니고 EmptyString(\"\") 도 아니면 true , 반대의 경우 false",
  "product": "JAVA 모니터링",
  "header": "사용 가능한 함수 목록"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "startsWith. startsWith ( Key , \"Value\" )",
  "product": "JAVA 모니터링",
  "header": "startsWith"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "endsWith. endsWith ( Key , \"Value\" )",
  "product": "JAVA 모니터링",
  "header": "endsWith"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "isNull. isNull ( Key )",
  "product": "JAVA 모니터링",
  "header": "isNull"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "isNotNull. isNotNull ( Key )",
  "product": "JAVA 모니터링",
  "header": "isNotNull"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "isEmpty. isEmpty ( Key )",
  "product": "JAVA 모니터링",
  "header": "isEmpty"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "isNotEmpty. isNotEmpty ( Key )",
  "product": "JAVA 모니터링",
  "header": "isNotEmpty"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "메트릭스 이벤트. 경고 알림 > 이벤트 설정 > 메트릭스 섹션에서 + 이벤트 추가 버튼을 선택하세요. 템플릿 에서 원하는 항목을 선택하세요. WARNING_OLD_GENARATION_GC 힙 메모리(Heap Memory)의 Old Generation 영역에서 GC가 발생하면 경고 알림을 보냅니다. TOO_SLOW_SQL 수행 중인 쿼리가 5초 이상으로 너무 느린 쿼리가 발생할 경우 경고 알림을 보냅니다. TOO_MANY_ACTX 8초 초과 구간의 액티브 트랜잭션 수가 너무 많을 경우 경고 알림을 보냅니다. APDEX APDEX 수치가 0.7보다 작을 경우 경고 알림을 보냅니다.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 이벤트"
},
{
  "url": "https://docs.whatap.io/java/metric-warning-notice",
  "title": "메트릭스 경고 알림",
  "content": "복합 메트릭스 이벤트. Inactive agents has been found. 조건: num_of_current_agents < 6 프로젝트에 포함된 모든 에이전트 중 정상 상태의 에이전트 수가 6개 미만으로 떨어지는 이벤트가 발생하면 경고 알림을 보냅니다. Very slow active transactions detected. 조건: very_slow_tx_cnt_m5_avg > 10 프로젝트에 포함된 특정 okind 에 속한 에이전트에서 8초 이상 소요되는 트랜잭션의 수의 합이 10개 초과 발생하면 경고 알림을 보냅니다. TPS has changed by more than 30% compared to the previous week. 조건: one_week_diff_abs > current_tps * 0.3 프로젝트에 포함된 특정 okind 에 속한 에이전트들의 TPS합이 7일 전과 비교했을 때 30% 초과 달라지면 경고 알림을 보냅니다. 여러 에이전트에서 수신된 데이터에 대해서 종합적 이벤트 판정해야할 때 다음의 복합 메트릭스 템플릿을 설정하세요. Inactive agents has been found. Very slow active transactions detected. 과거 데이터와 현재 데이터를 비교해서 이벤트를 판정해야할 때 다음의 복합 메트릭스 템플릿을 설정하세요. TPS has changed by more than 30% compared to the previous week.",
  "product": "JAVA 모니터링",
  "header": "복합 메트릭스 이벤트"
},
{
  "title": "AI 기반의 히트맵 패턴 경고 알림",
  "url": "https://docs.whatap.io/java/hitmap-notice",
  "content": "AI 기반의 히트맵 패턴 경고 알림. 애플리케이션 실행 분포 패턴을 머신 러닝을 통해 자동 인식하여 경고 알림을 보냅니다. 홈 화면 > 프로젝트 선택 > 경고 알림 > 이벤트 설정 > 히트맵 패턴 애플리케이션 실행 분포 패턴을 머신 러닝을 통해 자동 인식하여 경고 알림을 보냅니다. 복잡한 조건 설정 없이도 이슈 상황을 빠르고 정확하게 인지할 수 있습니다. 수많은 히트맵 패턴들이 학습되어 있으며 실시간으로 수집되는 데이터에서 학습된 패턴과 유사한 패턴이 발생하면 경고 알림을 받아 볼 수 있습니다.  노트히트맵과 히트맵 패턴에 대한 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "AI 기반의 히트맵 패턴 경고 알림"
},
{
  "url": "https://docs.whatap.io/java/hitmap-notice",
  "title": "AI 기반의 히트맵 패턴 경고 알림",
  "content": "기본 옵션. 탐지 제외 시간 : 설정한 시간 미만의 패턴은 무시합니다. 무음 : 과도한 경고 알림 발생을 방지할 수 있는 옵션입니다. 첫번째 경고 알림 이후 선택한 시간 동안 경고 알림을 보내지 않습니다. 또한 이벤트 기록 메뉴에 기록되지 않습니다. 저장 : 설정한 내용을 저장하고 반영합니다.",
  "product": "JAVA 모니터링",
  "header": "기본 옵션"
},
{
  "url": "https://docs.whatap.io/java/hitmap-notice",
  "title": "AI 기반의 히트맵 패턴 경고 알림",
  "content": "히트맵 패턴. 다음의 히트맵 패턴이 발생하면 경고 알림을 보내도록 설정할 수 있습니다. 각 항목의 토글 버튼을 선택해 경고 알림을 켜거나 끌 수 있습니다. 히트맵 가로라인 패턴 : 여러 트랜젝션이 일정한 시간 내에 종료되는 패턴입니다. 자원을 획득하거나 외부 HTTPS Call을 할 때 타임아웃 또는 지연이 발생합니다. 히트맵 세로라인 패턴 : 호출 시점이 다르지만 동일 시점에 트랜잭션이 종료되는 패턴입니다. 트랜잭션이 사용하는 공통의 자원에 일시적인 병목이 발생합니다. 히트맵 플라잉 패턴 : 특정 리소스나 로그와 같은 공통 자원 부족현상으로 간격을 두고 파도 치는 것과 같은 현상의 패턴이 발생합니다. 히트맵 과부하 패턴 : 전체 또는 일부 응답에 일시적인 문제가 발생하면 일시적으로 트랜젝션이 밀집하는 패턴이 발생합니다. 히트맵 폭주 패턴 : 과도한 트렌잭션의 요청이나 부하가 발생하면 응답시간이 전체적으로 증가하는 패턴이 발생합니다.",
  "product": "JAVA 모니터링",
  "header": "히트맵 패턴"
},
{
  "title": "위젯 관리하기",
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "content": "위젯 관리하기. Flex 보드에 배치한 위젯의 추가, 속성 변경, 복사, 삭제 방법을 안내합니다. 사용자는 위젯을 추가하거나 기존 위젯의 속성을 조정하여 대시보드를 개인화할 수 있습니다. 위젯의 데이터 조회 조건 변경, 시간 설정, 데이터 병합 옵션 설정 등 세밀한 관리 기능을 통해 사용자의 모니터링 요구에 맞는 대시보드를 구성할 수 있습니다. Flex 보드에 배치한 위젯 관리를 통해 대시보드를 사용자가 원하는 대로 꾸밀 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 관리하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "위젯 추가. 이미 만들어진 Flex 보드에 위젯을 추가할 수 있습니다. Flex 보드 메뉴의 보드 목록에서 위젯을 추가할 대시보드를 선택하세요. 화면 왼쪽 위에 수정 모드 를 선택하세요. 왼쪽에 위젯 템플릿 목록에서 원하는 위젯을 선택하세요. 메트릭스 위젯을 추가하려면 모든 메트릭스 를 선택한 다음 원하는 위젯을 클릭하세요. 홈 화면의 Flex 보드 메뉴 로 진입한 경우 위젯을 추가했다면 + 프로젝트 선택 버튼을 클릭해 수집 대상 프로젝트를 선택하세요. 추가할 위젯이 있다면 같은 과정을 반복하세요. 모든 과정을 완료했다면 화면 위에 뷰 모드 를 선택해 레이아웃을 확인한 다음 ( 목록으로 가기 ) 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "위젯 추가"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "위젯 속성 변경. Flex 보드 메뉴의 보드 목록에서 위젯 속성을 변경할 보드를 선택하세요. 수정 모드 로 진입합니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 속성 변경"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "위젯 이름 변경. 이름을 변경할 위젯의 이름 오른쪽에 버튼을 선택하세요. 위젯의 제목 , 폰트 크기 , 색상 을 설정한 다음 저장 버튼을 선택하세요. 팁 저장 시 전체 위젯에 적용 토글 버튼의 기능을 활성화하면 폰트 크기와 색상을 다른 위젯에도 적용합니다. 위젯의 제목을 잠금 설정하려면 버튼을 선택한 다음 저장 버튼을 클릭하세요.",
  "product": "JAVA 모니터링",
  "header": "위젯 이름 변경"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "시간 설정. 시간을 설정하려는 위젯의 오른쪽 위에 버튼을 선택하세요. 시간 선택 창이 나타납니다. 대시보드 화면에 설정한 시간을 적용하려면 대시보드 설정을 따름 을 체크하세요. 대시보드의 시간 설정은 오른쪽 상단에 위치합니다. 사용자가 원하는 시간을 설정을 적용하려면 대시보드 설정을 따름 을 체크 해제하세요. 또는 버튼을 이용해 원하는 시간을 설정하세요. 시간 설정을 완료했다면 버튼을 선택하세요. 노트 위젯의 데이터 유형에 따라서 시간 설정 기능을 지원하지 않을 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "시간 설정"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "출력 데이터 옵션 설정. 차트형 위젯의 출력 데이터 옵션을 설정해 사용자가 원하는 데이터를 선택할 수 있습니다. 위젯의 오른쪽 위에 버튼을 선택하세요. 프로젝트, 에이전트, 애플리케이션 등의 종류를 선택해 데이터를 필터링할 수 있습니다. 개별, 병합 데이터를 선택해 차트에 표시되는 그래프의 유형을 변경할 수 있습니다. > 을 선택하세요. 차트 설정 창을 통해 세부 옵션을 변경할 수 있습니다. 설정할 수 있는 옵션은 다음과 같습니다. 차트 유형 : 집계하는 현재 수치를 차트에 표시할 수 있는 옵션입니다. y축 차트 최대값 : y축에 차트 최대값을 자동 또는 고정 으로 선택할 수 있습니다. 수평선 설정 : + 추가 버튼을 선택해 임계치 또는 범위를 수평선으로 표시할 수 있습니다. 여러 개를 추가해 적용할 수 있습니다. 수평선을 추가한 다음에는 적용 버튼을 선택해야 차트에 반영됩니다. 차트 최대값 표시 : 차트에 표시되는 그래프의 최대값을 표시합니다. 보조 차트 : 위젯의 주요 차트에 보조 차트를 추가 설정할 수 있습니다. 보조 차트의 종류를 선택한 다음 레이아웃, 크기, 데이터 병합 여부를 선택하세요. 다른 위젯에도 공통 적용하려면 전체 위젯에 적용 버튼을 선택하세요. 보조 차트는 데이터를 다양한 방법으로 보고 싶을 때 유용합니다. 옵션 설정을 모두 완료했다면 차트 설정 창의 왼쪽 위에 버튼을 클릭하거나 차트 설정 창 영역 밖을 클릭하세요. 노트 위젯의 데이터 유형에 따라서 선택할 수 있는 옵션은 다를 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "출력 데이터 옵션 설정"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "메트릭스 위젯 데이터 변경. 메트릭스 위젯의 데이터 조회 조건을 변경할 수 있습니다. Flex 보드 > 수정 모드 에서 변경할 위젯의 오른쪽 위에 버튼을 선택하세요. 버튼을 선택하세요. 데이터 설정 편집 창이 나타납니다. 다음을 참조해 설정을 변경한 다음 위젯에 적용 버튼을 선택하세요. 위젯 생성 시 기본 생성되는 메트릭스 옵션이 탭에 표시됩니다. 메트릭스 옵션에는 카테고리 와 필드 , 태그 가 있습니다. 카테고리 항목은 현재 변경 기능을 제한합니다. 필드 , 태그 항목은 복수 선택할 수 있습니다. 선택한 태그 옵션으로 차트 데이터를 그룹화합니다. 버튼을 선택해 원본데이터를 조회할 수 있습니다. 오브젝트 병합 및 시간 병합 항목에 대한 자세한 내용은 데이터 병합 옵션 을 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 위젯 데이터 변경"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "데이터 병합 옵션. Flex 보드의 모든 메트릭스 목록에서 배치한 메트릭스 위젯은 데이터 병합 옵션을 제공합니다. 수정 모드 에서 모든 메트릭스 버튼을 선택해 위젯 템플릿 목록을 모든 메트릭스 목록으로 변경하세요. 메트릭스 위젯을 레이아웃에 배치하세요. 메트릭스 위젯 오른쪽 위에 버튼을 선택하세요. 태그(예: 에이전트 명) 옵션을 선택하면 데이터 병합 옵션이 나타납니다. 위젯의 크기에 따라 메트릭스 옵션의 위치가 다를 수 있습니다. 데이터 병합은 오브젝트 병합 과 시간 병합 방법을 제공합니다. 오브젝트 병합 좌측에서 선택한 태그(예: 에이전트 명)를 기준으로 차트 데이터를 그룹화할 때 사용합니다. 이때 서로 다른 필드(예: CPU)값을 가진 데이터들 중에서 태그가 일치하는 경우 해당 데이터를 병합하는 방법입니다. 시간 병합 조회 시간이 긴 경우 주로 사용합니다. 원본 데이터에서 필드 값이 같은 데이터끼리 시간 범위에 따라 일정한 시간 간격(5분 또는 1시간)으로 데이터를 병합합니다. 이 병합 방법을 시간 병합이라고 합니다. AWS CloudWatch 메트릭스 AWS 모니터링 지표의 경우 통계 방식이 필드명 뒤에 suffix(접미사) 형식으로 추가됩니다. 데이터 병합 기본값은 이 suffix를 참조하고 있습니다.",
  "product": "JAVA 모니터링",
  "header": "데이터 병합 옵션"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "위젯 복사. 위젯의 오른쪽 위에 버튼을 선택하세요. 버튼을 선택하세요. 복사 창이 나타나면 + 위젯 추가 를 선택하세요. 목록에 위젯의 이름을 변경하세요. 적용 버튼을 선택하세요. 수정 모드 화면에서 복사한 위젯을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 복사"
},
{
  "url": "https://docs.whatap.io/java/flexboard-widget-manage",
  "title": "위젯 관리하기",
  "content": "위젯 삭제. 위젯의 오른쪽 위에 버튼을 선택하세요. 버튼을 선택하세요. 확인 메시지 창이 나타나면 삭제 버튼을 선택하세요. 삭제를 취소하려면 취소 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "위젯 삭제"
},
{
  "title": "에이전트 설치",
  "url": "https://docs.whatap.io/java/install-agent",
  "content": "에이전트 설치. 와탭의 자바(Java) 애플리케이션 모니터링 에이전트를 설치하는 데 필요한 모든 단계를 자세하게 설명합니다. 이 문서에서는 에이전트 다운로드 및 설치, 구성 파일, 에이전트 기본 설정 방법을 안내합니다. 와탭 모니터링 서비스를 사용하기 위해서는 회원 가입 후 프로젝트를 생성하고 대상 서버에 에이전트를 설치해야 합니다. 회원 가입에 관한 자세한 내용은 다음 문서를 참조하세요. 다음 동영상 가이드를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설치"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "프로젝트 생성하기. 에이전트를 설치하기 전에 먼저 프로젝트를 생성하세요. 와탭 모니터링 서비스 로 이동한 다음 로그인하세요. 프로젝트를 생성하려면 화면 왼쪽 사이드 메뉴에서 전체 프로젝트 > + 프로젝트 버튼을 선택하세요. 상품 선택 화면에서 프로젝트에 설치할 상품을 선택하세요. 프로젝트 이름 , 데이터 서버 지역 , 타임 존 등의 항목을 차례로 설정하세요. 모든 설정을 완료한 다음에는 프로젝트 생성하기 버튼을 선택하세요. 노트 데이터 서버 지역 은 리전(클라우드 서비스를 제공하기 위해 설치한 데이터 센터의 묶음)을 의미합니다. 특정 리전을 선택하면 해당 리전에 속한 데이터 센터에 사용자의 데이터를 저장합니다. 타임 존 은 알림, 보고서를 생성하는 기준 시간입니다. 여러 개의 프로젝트를 그룹으로 묶어 관리하려면 프로젝트 그룹 에서 그룹을 선택하거나 그룹을 추가하세요. 그룹에 대한 자세한 설명은 다음 문서 를 참조하세요. 조직을 선택한 상태에서 프로젝트를 추가할 경우 조직 하위 그룹 을 필수로 설정해야 합니다.",
  "product": "JAVA 모니터링",
  "header": "프로젝트 생성하기"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "액세스 키 확인. 액세스 키 는 와탭 서비스 활성화를 위한 고유 ID입니다. 설치 안내 섹션에서 프로젝트 액세스 키 발급받기 버튼을 선택하세요. 액세스 키 를 자동으로 발급받은 후 다음 단계를 진행합니다. 노트 프로젝트를 생성한 다음에는 자동으로 에이전트 설치 페이지로 이동합니다. 에이전트 설치 페이지로 이동하지 않는다면 화면 왼쪽 메뉴에서 관리 > 에이전트 설치 를 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "액세스 키 확인"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "에이전트 다운로드. 액세스 키 를 발급 받으면 에이전트 다운로드 섹션에서 다운로드 버튼이 활성화됩니다. 다운로드 버튼을 선택해 와탭 에이전트 파일을 다운로드하세요. 팁 다음 명령어를 이용해 서버에서 직접 다운로드할 수도 있습니다. wget https://service.whatap.io/agent/whatap.agent.java.tar.gz 모니터링 대상 서버에 접속하세요. 모니터링 대상 서버의 원하는 경로에 에이전트 파일의 압축을 해제하세요. 압축을 해제한 경로가 $WHATAP_HOME 이 됩니다. tar -zxvf whatap.agent.java.tar.gz",
  "product": "JAVA 모니터링",
  "header": "에이전트 다운로드"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "에이전트 설치 파일 구성. 에이전트 파일은 애플리케이션 모니터링에 필요한 정보를 추출해 와탭 수집 서버로 전달하는 트레이서와 트레이서가 데이터를 보낼 수 있도록 돕는 요소로 구성되어 있습니다. whatap.conf 모니터링 에이전트의 설정 정보, 액세스 키, 와탭 데이터 수집 서버의 IP 정보 등을 저장하는 설정 파일입니다. 자세한 내용은 다음 문서 를 참조하세요. ping.sh(bat) 현재 설정한 액세스 키, 와탭 데이터 수집 서버로 통신을 시도해 설정이나 네트워크 이슈가 있는지 확인하기 위한 스크립트(배치) 파일입니다. proxy.sh(bat) whatap.agent.proxy- X.Y.Z .jar 파일을 시작하기 위한 스크립트(배치) 파일입니다. resmon.sh(bat) CPU, Memory, Disk 정보를 정상 수집하는지 확인하기 위한 스크립트(배치) 파일입니다. whatap-logsink-lz4- X.Y.Z .jar 애플리케이션 서버의 log 정보를 수집하기 위한 plugin 형식의 파일입니다. whatap.agent- X.Y.Z .jar 애플리케이션 서버의 각종 모니터링 정보를 수집 및 수집 서버에 전송하는 모니터링 에이전트 파일입니다. whatap.agent.proxy- X.Y.Z .jar 애플리케이션 서버가 동작하는 서버에서 WhaTap 측 수집 서버에 직접 연결이 불가한 경우, 그 사이의 Proxy 서버(경유 서버)에서 경유 역할을 하는 애플리케이션입니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설치 파일 구성"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "기본 정보 입력하기. 압축을 푼 $WHATAP_HOME 경로로 이동하세요. $WHATAP_HOME/whatap.conf 파일에 액세스 키와 데이터 수집 서버 IP 주소를 입력하세요. 와탭 모니터링 서비스 화면으로 이동해 설치 안내 섹션의 에이전트 다운로드 항목에서 액세스 키 , 수집 서버 IP 주소 값을 복사한 다음 붙여넣기하세요. license = {액세스 키} whatap.server.host = {수집 서버 IP} 노트 whantap.conf 파일에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "기본 정보 입력하기"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "보안키 설정하기. SQL 변수, HTTP 쿼리를 조회하거나 Thread 중지 기능 이용하려면 보안키를 설정하세요. Java 에이전트 2.2.2 버전 이상 $WHATAP_HOME 경로에 security.conf 파일을 생성한 후 다음과 같이 6자리 영어, 숫자로 구성된 암호를 입력하세요. security.conf paramkey = ABCDEF # SQL 변수 및 HTTP 쿼리 조회 threadkill = ABCDEF # Thread 중지 기능 Java 에이전트 2.2.2 버전 미만 $WHATAP_HOME 경로에 paramkey.txt 파일을 생성한 후 다음과 같이 6자리 영어, 숫자로 구성된 암호를 입력하세요. paramkey.txt ABCDEF # SQL 변수 및 HTTP 쿼리 조회, Thread 중지 기능 팁 Java 에이전트 2.2.2 버전 미만에서 2.2.2 버전으로 업데이트하는 경우 기존 paramkey.txt 파일의 키값은 seuciry.conf 파일의 키값으로 자동 적용됩니다. 예를 들어, paramkey.txt 에 FEDCBA 를 사용한 상태에서 2.2.2 버전으로 업데이트했다면, security.conf 파일에는 다음과 같이 적용됩니다. paramkey = FEDCBA threadkill = FEDCBA paramkey.txt 파일이 존재하지 않을 경우 security.conf 파일의 키값은 WHATAP 이라는 키값으로 자동 생성됩니다. 노트 SQL 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요. HTTP 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "보안키 설정하기"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "JVM 옵션 추가. 사용하는 애플리케이션 서버 환경에 따른 설정 방법을 다음과 같이 제공합니다. 에이전트를 설치하고 적용하기 전에 지원 환경 을 먼저 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "JVM 옵션 추가"
},
{
  "url": "https://docs.whatap.io/java/install-agent",
  "title": "에이전트 설치",
  "content": "Tomcat. Tomcat 와탭 모니터링 솔루션을 톰캣(Tomcat) 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 톰캣(Tomcat) 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 톰캣(Tomcat)과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. JBoss 와탭 모니터링 솔루션을 JBoss 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 JBoss 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 JBoss와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. JEUS 와탭 모니터링 솔루션을 JEUS 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 JEUS 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 JEUS와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. WebLogic 와탭 모니터링 솔루션을 웹로직(WebLogic) 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 웹로직(WebLogic) 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 웹로직(WebLogic)과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. WebSphere 와탭 모니터링 솔루션을 WebSphere 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 WebSphere 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 WebSphere과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Resin 와탭 모니터링 솔루션을 Resin 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Resin 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Resin과의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Liberty 와탭 모니터링 솔루션을 Liberty 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Liberty 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Liberty와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Jetty 와탭 모니터링 솔루션을 Jetty 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Jetty 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Jetty와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Spring Boot 와탭 모니터링 솔루션을 Spring Boot 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Spring Boot 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Spring Boot와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. Play2 와탭 모니터링 솔루션을 Play2 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 Play2 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 Play2와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. IBM BlueMix IBM Bluemix 클라우드 플랫폼에서 Java 애플리케이션을 실행하는 사용자가 와탭의 자바(Java) 모니터링 에이전트를 효과적으로 적용하기 위한 JVM 옵션을 설정하는 방법에 대해 안내합니다. 사용자는 이 문서를 통해 IBM Bluemix 환경에서 와탭의 자바(Java) 에이전트를 설치한 후 에이전를 구성하는 과정, 필요한 JVM 옵션의 추가 방법을 단계별로 확인할 수 있습니다. 추가로 힙스토그램 조회 방법을 포함하고 있습니다. Elastic Beanstalk AWS Elastic Beanstalk 환경에서 Java 애플리케이션을 실행하는 사용자가 와탭의 자바(Java) 모니터링 에이전트를 효과적으로 적용하기 위한 JVM 옵션을 설정하는 방법을 안내합니다. Elastic Beanstalk에 맞춘 와탭 자바(Java) 에이전트의 설치 및 구성 과정, 필수 JVM 옵션의 추가 및 설정 방법을 확인할 수 있습니다. 추가로 힙스토그램 조회 방법을 포함하고 있습니다. Docker 도커(Docker) 환경에서 Java 애플리케이션에 와탭 자바(Java) 모니터링 에이전트를 적용하는 방법을 단계별로 안내합니다. 사용자는 기존 Docker 이미지에 와탭 자바(Java) 에이전트 설정을 추가하여 새로운 이미지를 빌드하는 과정, whatap.conf 파일 생성, Dockerfile 작성, JAVA_OPT 수정 방법 등을 확인할 수 있습니다. 또한, Java 17 이상의 버전에서 필요한 추가 JVM 옵션과 다양한 Java 버전에 따른 힙 히스토그램 조회 설정 방법도 제공합니다. 배치 애플리케이션 와탭의 자바(Java) 에이전트를 배치 애플리케이션에 적용하는 방법을 안내합니다. 배치 애플리케이션의 독특한 시작 및 중지 반복 동작으로 인한 웹 애플리케이션과의 차이점을 설명하고, 필요한 에이전트 다운로드, 에이전트 및 배치 호스트 구성, 에이전트와 함께 배치 작업 실행, time_limit 설정 등을 통한 실행 시간 모니터링 방법을 제공합니다. Java 1.6 버전 미만 자바(Java) 1.6 버전 미만에서 자바(Java) 에이전트를 적용하는 방법을 안내합니다. Java 1.5와 1.4 버전 각각에 대해 에이전트 설치 및 설정 절차, 그리고 -javaagent 옵션과 관련한 제약사항을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Tomcat"
},
{
  "title": "Flex 보드 공유하기",
  "url": "https://docs.whatap.io/java/flexboard-share",
  "content": "Flex 보드 공유하기. Flex 보드를 다른 계정의 사용자와 공유하거나 재사용할 수 있습니다. 통합 Flex 보드 메뉴에서 생성한 대시보드를 다른 멤버와 공유하거나 복사해 재사용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 공유하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "공유와 복사의 차이. 대시보드를 공유한 경우 공유한 멤버는 모두 같은 대시보드를 볼 수 있습니다. 대시보드를 다른 멤버 또는 나에게 복사한 경우 복사된 별도의 대시보드를 볼 수 있습니다. 읽기 전용 으로 대시보드를 공유 또는 복사 받은 멤버는 대시보드를 수정할 수 없지만 수정 모드 로 공유 또는 복사된 대시보드는 수정할 수 있습니다. 읽기 전용 으로 대시보드를 공유받은 멤버는 읽기 전용으로 대시보드를 공유할 수 있으며 복사할 수 있습니다. 대시보드에 포함된 프로젝트 중 최소 1개 프로젝트에 초대된 멤버에게 대시보드를 공유할 수 있습니다. 공유 또는 복사 받을 멤버가 프로젝트에 소속되어 있는지 확인하세요. 노트 대시보드 공유 및 복사 기능이 업데이트됐습니다 이전에는 공유 또는 복사 받을 멤버에게 수정 권한이 있어야 했지만, Service 2.3.0 릴리스 이후 권한에 상관없이 프로젝트에 소속되어 있기만 한다면 복사 또는 공유할 수 있습니다. 단, 공유 받은 대시보드의 프로젝트 중 조회 분석 권한이 없는 프로젝트는 데이터를 조회할 수 없습니다. 멤버 권한에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "공유와 복사의 차이"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "Flex 보드 공유하기. 사용자가 생성한 Flex 보드를 다른 멤버와 공유해 동일한 대시보드를 볼 수 있습니다. 이를 통해 업무를 공유할 수 있습니다. 공유한 대시보드를 수정한 경우 공유받은 모든 멤버는 동일한 대시보드를 확인할 수 있습니다. 노트 이 기능은 통합 Flex 보드 메뉴에서만 이용할 수 있습니다. 프로젝트의 Flex 보드 메뉴에서는 이용할 수 없습니다. 통합 Flex 보드 메뉴의 대시보드 목록 에서 공유하려는 대시보드의 버튼을 선택하세요. 대시보드 공유하기 창이 나타나면 계정 버튼을 선택하세요. 대시보드를 공유할 멤버를 선택하세요. 공유 대상을 추가하려면 계정 버튼을 선택하세요. 멤버를 추가로 선택할 수 있습니다. 대시보드에 포함된 프로젝트 중 최소 1개 프로젝트에 초대된 멤버에게 대시보드를 공유할 수 있습니다. 공유 또는 복사 받을 멤버가 프로젝트에 소속되어 있는지 확인하세요. 대시보드 공유하기 버튼을 선택하세요. 읽기 전용 을 선택하면 공유받은 멤버는 대시보드를 수정할 수 없습니다. 공유받을 멤버 모두에게 읽기 전용으로 공유하려면 읽기 전용(전체) 를 선택하세요. 대시보드를 공유한 항목은 대시보드 목록 에서 공유 태그가 표시된 것을 확인할 수 있습니다. 공유 태그에 마우스를 오버하면 대시보드를 공유한 멤버에 대한 정보를 확인할 수 있습니다. 읽기 전용으로 공유한 멤버에게는 읽기 전용 태그가 표시됩니다. 대시보드를 공유받은 경우 대시보드를 공유한 경우(대시보드 소유자) 팁 대시보드 공유 조건 대시보드 공유 기능은 홈 화면 > 통합 Flex 보드 메뉴에서만 이용할 수 있습니다. 누구나 자신의 대시보드를 공유할 수 있으며, 공유받은 대시보드를 다시 공유하거나 복사할 수 있습니다. 읽기 전용 으로 대시보드를 공유받은 멤버는 대시보드를 수정할 수 없지만 수정 모드 로 공유받은 대시보드는 수정할 수 있습니다. 대시보드 소유자가 대시보드를 삭제하면 대시보드를 공유받은 모든 멤버 계정에서도 해당 대시보드가 삭제됩니다. 대시보드를 공유받은 멤버가 대시보드를 삭제하면, 해당 멤버의 대시보드 목록 에서만 삭제됩니다. 원본 대시보드는 그대로 유지합니다. 공유 받은 대시보드의 프로젝트 중 조회 분석 권한이 없는 프로젝트는 데이터를 조회할 수 없습니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 공유하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "Flex 보드 복사하기. 사용자가 생성한 Flex 보드를 복사해 다른 멤버에게 전달할 수 있습니다. 통합 Flex 보드 메뉴의 대시보드 목록 에서 버튼을 선택하세요. 나에게 복사 또는 다른 사람에게 복사 옵션을 선택하세요. 나에게 복사 옵션을 선택하면 대시보드 목록 에 '_copied' 접미어가 붙은 항목이 추가됩니다. 다른 사람에게 복사 옵션을 선택하면 계정 을 선택하세요. 다른 멤버의 이메일을 선택한 다음 대시보드 복사하기 버튼을 클릭하세요. 복사 받은 멤버의 대시보드 목록 목록에 '_copied' 접미어가 붙은 항목이 추가됩니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 복사하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "JSON 파일로 공유하기. Flex 보드 설정을 JSON 파일로 저장하고 다른 멤버에서 전달하거나 다른 멤버의 설정을 가져올 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "JSON 파일로 공유하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "내보내기. 통합 Flex 보드 또는 프로젝트의 Flex 보드 메뉴로 이동하세요. 대시보드 목록 에서 버튼을 선택하세요. JSON 파일이 다운로드되면 공유할 다른 멤버에게 전달하세요.",
  "product": "JAVA 모니터링",
  "header": "내보내기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-share",
  "title": "Flex 보드 공유하기",
  "content": "가져오기. 통합 Flex 보드 또는 프로젝트의 Flex 보드 메뉴로 이동하세요. 화면 오른쪽 위에 가져오기 버튼을 선택하세요. 다운로드한 JSON 파일을 선택하세요. 노트 이 기능은 프로젝트의 수정 권한을 소유한 멤버만 이용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "가져오기"
},
{
  "title": "사전 템플릿 적용",
  "url": "https://docs.whatap.io/java/flexboard-template",
  "content": "사전 템플릿 적용. Flex 보드에서 사용자 정의 대시보드를 빠르게 구성할 수 있는 사전 설정된 템플릿을 안내합니다. 사용자는 초기 설정을 간편하게 진행하고, 필요에 따라 설정을 변경하여 활용할 수 있습니다. 템플릿 선택부터 이름 지정, 레이아웃 조정, 저장에 이르기까지의 단계를 확인하고, 사용자는 효과적으로 모니터링 대시보드를 만들 수 있습니다. 사전 템플릿 적용제공된 사전 구성 템플릿을 이용하세요. 초기 설정을 손쉽게 진행하고 설정을 변경해 활용할 수 있습니다. Flex 보드 메뉴를 선택하세요. 왼쪽 템플릿 목록에서 원하는 템플릿을 선택하세요. Flex 보드 관리 창이 나타나면 이름 변경에 원하는 이름을 입력하세요. 레이아웃 항목에 위젯을 마우스로 선택한 다음 원하는 위치로 드래그해 이동할 수 있습니다. 오버랩 토글 버튼을 선택해 옵션을 활성화하면 위젯을 서로 겹치게 배치할 수 있습니다. 저장 버튼을 선택하세요. 선택한 템플릿 기준의 Flex 보드를 생성합니다. Flex 보드 메뉴에서 생성한 보드 목록을 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "사전 템플릿 적용"
},
{
  "title": "Flex 보드 화면 모드",
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "content": "Flex 보드 화면 모드. Flex 보드의 화면 모드에 따라 제공하는 기능에 대해 알아보세요. Flex 보드의 화면 모드에 따라 제공하는 기능을 설명합니다. 노트 프로젝트 내 Flex 보드 메뉴에서는 대시보드 수정 권한이 있는 사용자만이 수정 모드 및 관리자 모드, 필터 기능에 접근할 수 있습니다. 접근할 수 있는 멤버 권한은 다음과 같습니다. 프로젝트 수정 권한 프로젝트 플렉스보드 편집 권한 Site Admin 권한 멤버 권한에 대한 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 화면 모드"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "화면 모드. Flex 보드 는 다음과 같은 화면 모드를 제공합니다. 화면 모드에 따라 설정할 수 있는 기능이 다릅니다. 수정 모드 : 위젯 템플릿 목록에서 Flex 보드의 레이아웃에 위젯을 배치하거나 위젯을 수정, 삭제, 위치 조정할 수 있습니다. 관리자 : 위젯의 세부 속성을 json 형태로 관리할 수 있습니다. 레이아웃에 배치한 위젯의 오른쪽 위에 위치한 버튼을 선택하세요. 뷰 모드 : 위젯 배치, 크기 조절, 세부 옵션 등의 설정을 완료한 다음 대시보드와 같이 각 위젯의 데이터를 실시간으로 모니터링할 수 있습니다. Flex 보드 에서는 다음의 공통 기능을 사용할 수 있습니다. 데이터 필터링 실시간 데이터 조회 범위 설정 인쇄 모드 Flex 보드 관리 데이터 병합 옵션",
  "product": "JAVA 모니터링",
  "header": "화면 모드"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "데이터 필터링. Flex 보드는 수백 가지의 종류의 데이터를 다룹니다. 데이터 필터링 기능을 이용해 모니터링하려는 대상을 간추려 Flex 보드를 구성하세요. 화면 위에 필터 를 선택하세요. 화면 왼쪽으로 필터 창이 나타납니다. 에이전트 옵션을 선택했다면 에이전트 종류 또는 애플리케이션 목록 기준으로 필터링 대상을 선택할 수 있습니다. 필터링 대상을 모두 선택하려면 전체 선택 을 선택하세요. 필요한 경우 검색 기능을 이용해 선택할 수 있습니다. 메트릭스 옵션을 선택했다면 카테고리 옵션에서 프로젝트, 에이전트 유형에 따라 필터링 대상을 선택할 수 있습니다. 카테고리 옵션은 + And 를 선택해 추가할 수 있습니다. 포함 , 제외 옵션을 선택하면 문자열로 필터링 대상을 자동 선택합니다. 필터링 대상 선택을 완료했다면 적용 버튼을 선택하세요. 사용자가 설정한 필터링 설정을 저장해 이용하려면 필터 저장 버튼을 선택하세요. 필터 이름을 입력하고 저장 을 선택하세요. 저장된 필터 는 필터 창 하단에 나타납니다. 필터링 조건은 에이전트 타입과 메트립스 타입으로 구분합니다. 타입 에이전트 메트릭스 선택 옵션 와탭 프로젝트 모니터링 대상 (애플리케이션, 서버, 데이터베이스, 컨테이너 및 쿠버네티스 POD와 NODE) 에이전트를 포함한 모든 메트릭스 태그 적용 범위 모든 위젯 메트릭스 데이터를 사용하는 모든 위젯 필터링 조건 체크박스 일치 , 포함 , 제외 방식 노트 에이전트 타입은 기본적인 모니터링 대상만을 선택 옵션으로 제공합니다. 메트릭스 타입은 프로젝트에서 수집 중인 모든 메트릭스 데이터의 태그를 선택 옵션으로 제공합니다. 메트릭스 타입은 클라우드 모니터링과 같이 에이전트가 아닌 형태로 데이터를 수집한 후 필터링을 적용할 때 유용합니다. 메트릭스에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "데이터 필터링"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "실시간 데이터 조회 범위 설정. Flex 보드 메뉴의 화면 오른쪽 위에 UI 요소를 이용해 위젯에 데이터를 출력하는 시간을 설정할 수 있습니다. 버튼을 선택하면 실시간 데이터 조회를 일시 정지하고 다음과 같이 조회 시간을 설정할 수 있습니다. 가장 오른쪽의 녹색 배경의 시간 버튼을 선택하세요. 다양한 시간 설정을 선택할 수 있는 옵션이 나타납니다. 원하는 시간 설정을 선택하세요. 또는 버튼을 클릭하면 설정된 시간 범위 만큼 조절할 수 있습니다. 날짜와 시간 텍스트 영역을 클릭하면 날짜와 시간을 선택할 수 있는 옵션이 나타납니다. 조회 시간 설정을 모두 완료했다면 버튼을 선택하세요. 실시간 데이터 조회를 시작합니다.",
  "product": "JAVA 모니터링",
  "header": "실시간 데이터 조회 범위 설정"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "인쇄하기. Flex 보드 화면을 PDF로 저장해 인쇄할 수 있습니다. Flex 보드 화면의 오른쪽 위에 버튼을 선택하세요. 화면을 인쇄 모드로 전환합니다. 다음의 옵션을 설정한 다음 PDF 다운로드 를 선택하세요. 필터 옵션 보기 : 화면에 필터 옵션을 켜거나 끌 수 있습니다. 가로/세로 방향으로 변환 : 화면을 가로 또는 세로로 변환할 수 있습니다. 인쇄 모드를 종료하려면 오른쪽 위에 인쇄모드 종료 를 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "인쇄하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "Flex 보드 관리. Flex 보드의 레이아웃을 변경하거나 위젯의 위치 변경, 크기 조절, 이름 변경 등의 관리 기능을 제공합니다. Flex 보드 화면의 오른쪽 위에 버튼을 선택하세요. Flex 보드 관리 창이 나타납니다. 이름 변경 : Flext 보드의 이름을 변경할 수 있습니다. 변경하려는 이름을 입력하세요. 레이아웃 : 위젯의 배치를 변경하거나 위치 및 크기를 조절할 수 있습니다. 배치한 위젯을 삭제하려면 버튼을 클릭하세요. 오버랩 토글 버튼을 선택해 옵션을 활성화하면 위젯을 서로 겹치게 배치할 수 있습니다. 다른 사용자의 수정을 제한 : 다른 사용자가 해당 Flex 보드의 수정을 할 수 없도록 설정합니다. 수정 권한이 있는 멤버만 수정 또는 삭제, 위젯을 편집할 수 있습니다. 버튼을 클릭하면 다른 사용자의 수정을 제한: on 으로 변경됩니다. 위젯 json : Flex 보드에 포함된 위젯을 json 형태로 편집해 관리할 수 있습니다. 옵션 json : Flex 보드의 설정을 json 형태로 편집해 관리할 수 있습니다. 프로젝트 정보, Flex 보드 필터, 시간 선택 등의 설정값을 편집할 수 있습니다. 모든 설정을 완료한 다음에는 화면 오른쪽 아래에 저장 버튼을 클릭하세요. 노트 위젯 json , 옵션 json 기능은 대시보드 관리자 권한의 사용자에게만 제공합니다. Flex 보드 관리 기능은 대시보드 > Flex 보드 메뉴에서 보드 목록의 버튼을 선택해 진입할 수도 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 관리"
},
{
  "url": "https://docs.whatap.io/java/flexboard-mode",
  "title": "Flex 보드 화면 모드",
  "content": "대시보드 즐겨찾기로 등록. 사용자가 생성한 Flex 보드는 대시보드 메뉴 하위에 즐겨찾는 메뉴로 등록할 수 있습니다. 대시보드 > Flex 보드 메뉴에서 대시보드 목록 의 버튼을 선택하세요. 즐겨찾기로 설정된 항목은 으로 변경됩니다.",
  "product": "JAVA 모니터링",
  "header": "대시보드 즐겨찾기로 등록"
},
{
  "title": "메트릭스 위젯",
  "url": "https://docs.whatap.io/java/flexboard-metric-widget",
  "content": "메트릭스 위젯. 프로젝트의 성능 지표를 나타내는 메트릭스 데이터를 위젯 형태로 대시보드에 추가하는 방법을 안내합니다. 메트릭스는 카테고리로 분류되고, 태그를 이용해 데이터를 탐색할 수 있으며, 테이블 위젯과 시리즈 위젯 두 가지 유형으로 제공합니다. ",
  "product": "JAVA 모니터링",
  "header": "메트릭스 위젯"
},
{
  "url": "https://docs.whatap.io/java/flexboard-metric-widget",
  "title": "메트릭스 위젯",
  "content": "메트릭스란?. 프로젝트에서 수집 중인 숫자로된 성능 지표를 메트릭스 라고 부릅니다. 메트릭스는 '카테고리'로 분류되며, 카테고리별 태그를 이용해 데이터를 탐색할 수 있습니다. 카테고리 (Category): 관련한 지표들을 묶는 단위 태그 (Tags): 수집 대상을 구분할 수 있는 고유 정보가 포함된 데이터 필드 (Fields): 에이전트로부터 수집한 지표 메트릭스에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스란?"
},
{
  "url": "https://docs.whatap.io/java/flexboard-metric-widget",
  "title": "메트릭스 위젯",
  "content": "메트릭스 위젯 종류. 모든 메트릭스 에서 추가할 수 있는 위젯 유형은 카테고리에 대한 태그와 필드 정보를 나열한 테이블 형식의 위젯, 단일 필드에 대한 추이 그래프로 나눕니다. 테이블 위젯 : 선택한 메트릭스 카테고리에 대한 데이터를 표 형식으로 제공합니다. 시리즈 위젯 : 선택한 메트릭스 카테고리의 선택 필드에 대한 데이터를 시리즈 차트 형식으로 제공합니다. 노트 메트릭스 위젯 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "메트릭스 위젯 종류"
},
{
  "title": "Flex 보드 관리하기",
  "url": "https://docs.whatap.io/java/flexboard-manage",
  "content": "Flex 보드 관리하기. Flex 보드에서 대시보드를 편집하고 관리하는 방법을 안내합니다. 대시보드의 이름 변경, 프로젝트 선택, 레이아웃 조정 등을 포함하며, 위젯의 추가, 이동, 크기 조절, 삭제 방법도 확인할 수 있습니다. 또한, 위젯의 데이터 소스를 선택하는 방법과 대시보드의 json 형식으로의 내보내기 기능도 제공합니다. ",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 관리하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-manage",
  "title": "Flex 보드 관리하기",
  "content": "Flex 보드 편집하기. Flex 보드 메뉴의 대시보드 목록 에서 버튼을 선택하세요. 화면 오른쪽에 Flex 보드 관리 창이 나타납니다. 노트 Flex 보드 편집 기능 권한 안내 홈 화면 > 통합 Flex 보드 개인 계정 대시보드로 권한에 따른 영향은 없으나 읽기 전용으로 공유된 대시보드의 경우 수정할 수 없습니다. 홈 화면 > 프로젝트 선택 > 대시보드 > Flex 보드 프로젝트 수정 권한 또는 프로젝트 플렉스보드 편집 권한, Site Admin 권한을 가진 사용자가 수정할 수 있습니다. 멤버 권한에 대한 자세한 내용은 다음 문서 를 참조하세요. 설정할 수 있는 속성은 다음과 같습니다. 이름 변경 : 대시보드의 이름을 수정할 수 있습니다. 프로젝트 : 대시보드 위젯에 데이터를 가져올 프로젝트를 선택할 수 있습니다. 노트 이 옵션은 홈 화면 > 통합 Flex 보드 메뉴에서만 설정할 수 있습니다. 레이아웃 위젯을 선택하고 드래그하여 위치를 이동할 수 있습니다. 위젯 오른쪽 아래를 마우스로 선택한 다음 드래그해 위젯의 크기를 조절할 수 있습니다. 위젯을 삭제하려면 위젯 오른쪽 위에 버튼을 선택하세요. 오버랩 토글 버튼을 활성화하면 위젯의 배치를 겹쳐진 상태로 배치할 수 있습니다. 노트 홈 화면 > 통합 Flex 보드 메뉴로 진입한 경우, 각 위젯마다 데이터를 가져올 프로젝트를 선택할 수 있습니다. 위젯 오른쪽 위에 버튼을 클릭한 다음 원하는 프로젝트를 선택하세요. 프로젝트를 검색해 선택할 수 있고, 다중 선택할 수 있습니다. 선택을 완료한 다음 적용 버튼을 선택하세요. 위젯.json : 대시보드의 위젯 설정을 json 형식으로 불러올 수 있습니다. 버튼을 선택하면 json 내용을 복사합니다. 옵션.json : 대시보드에 설정된 옵션을 json 형식으로 불러올 수 있습니다. 버튼을 선택하면 json 내용을 복사합니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 편집하기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-manage",
  "title": "Flex 보드 관리하기",
  "content": "Flex 보드 삭제하기. Flex 보드 > 대시보드 목록 에서 삭제하려는 항목의 오른쪽에 버튼을 선택하세요. 확인 메시지가 나타나면 삭제 버튼을 선택하세요. 노트 대시보드 소유자가 대시보드를 삭제하는 경우 대시보드를 공유한 모든 사용자 계정에서도 해당 대시보드를 삭제합니다. 대시보드를 공유 받은 사용자가 대시보드를 삭제하면, 해당 사용자의 대시보드 목록 에서만 삭제합니다. 원본 대시보드는 그대로 유지합니다.",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 삭제하기"
},
{
  "title": "Flex 보드 만들기",
  "url": "https://docs.whatap.io/java/flexboard-create",
  "content": "Flex 보드 만들기. Flex 보드 메뉴에서 대시보드를 생성하고, 위젯을 배치하여 사용자 정의 대시보드를 만드는 과정을 안내합니다. 고정 레이아웃과 반응형 레이아웃 중에서 선택할 수 있으며, 메트릭스 위젯 추가 및 사전 정의된 위젯 템플릿을 활용할 수 있습니다. 사용자는 위젯의 위치를 조정하고, 크기를 변경하여 자신만의 대시보드 레이아웃을 완성할 수 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Flex 보드 만들기"
},
{
  "url": "https://docs.whatap.io/java/flexboard-create",
  "title": "Flex 보드 만들기",
  "content": "대시보드 생성. Flex 보드를 생성하고 위젯을 배치해 자신만의 대시보드를 만들 수 있습니다. Flex 보드 메뉴에서 오른쪽 위에 + 대시보드 생성하기 버튼을 선택하세요. 대시보드 생성하기 창이 나타나면 이름 입력 텍스트 상자에 대시 보드 이름을 입력하세요. 위젯 배치 방법을 선택해 대시보드 생성하기 버튼을 클릭하세요. 고정 레이아웃 플렉스 보드 : 픽셀 기반으로 자유롭게 위젯을 배치할 수 있습니다. 반응형 플렉스 보드 : 브라우저 사이즈 기준으로 그리드 반응형 레이아웃을 제공합니다. 반응형 플렉스 보드 를 선택하면 그리드를 설정한 다음 대시보드 생성하기 버튼을 선택하세요. 위젯 템플릿 선택 화면에서 대시보드에 배치할 위젯을 선택하세요. 메트릭스 위젯을 추가하려면 위젯 템플릿 의 오른쪽에 모든 메트릭스 버튼을 선택하세요. 노트 위젯 템플릿 : 일반적인 모니터링 상황에서 중요하게 다뤄지는 지표를 간추려 사전 정의된 위젯 목록을 선택할 수 있습니다. 모든 메트릭스 : 사용자의 프로젝트에서 수집 중인 모든 메트릭스 데이터를 기준으로 위젯을 생성할 때 사용합니다. 메트릭스 위젯에 대한 자세한 설명은 다음 문서 를 참조하세요. 배치한 위젯의 위치를 이동하거나 크기를 조절하세요. 배치한 위젯의 위쪽으로 마우스 커서를 이동하세요. 커서 모양이 십자 형태로 변경되면 위젯을 마우스로 클릭한 상태에서 드래그하세요. 위치를 이동할 수 있습니다. 배치한 위젯의 오른쪽 아래로 마우스 커서를 이동하세요. 커서 모양이 화살표 형태로 변경되면 위젯을 마우스로 클릭한 상태로 드래그하세요. 원하는 크기로 조절할 수 있습니다. 추가할 위젯을 모두 배치를 완료한 다음 뷰 모드 를 선택해 레이아웃을 확인하세요. 레이아웃을 다시 수정하려면 수정 모드 를 선택해 위젯의 배치를 변경하세요. 모든 과정을 완료했다면 오른쪽 위에 ( 목록으로 가기 ) 버튼을 선택하세요. Flex 보드 메뉴의 보드 목록에서 생성한 보드를 확인할 수 있습니다. 생성한 보드를 선택해 새로 생성한 Flex 보드를 확인할 수 있습니다. 노트 고객의 의견을 반영해 대시보드 템플릿 또는 위젯을 추가하려고 합니다. 필요한 대시보드 템플릿 또는 위젯이 있다면 support@whatap.io 로 문의해 주세요.",
  "product": "JAVA 모니터링",
  "header": "대시보드 생성"
},
{
  "title": "Flex 보드",
  "url": "https://docs.whatap.io/java/flex-board",
  "content": "Flex 보드. 사용자 정의형 통합 대시보드를 안내합니다. 사용자는 애플리케이션, 서버, 데이터베이스, 컨테이너 등의 데이터로 실시간 대시보드를 만들 수 있습니다. 사전 구성된 템플릿을 제공하며, 다양한 데이터 위젯 추가, 데이터 필터링, 시간 범위 설정 등의 기능을 통해 사용자가 원하는 모니터링 대상을 쉽게 간추리고 중요 데이터를 확인할 수 있습니다. Flex 보드Flex 보드는 사용자 정의형 통합 대시보드입니다. 애플리케이션, 서버, 데이터베이스, 컨테이너 등 프로젝트의 데이터로 실시간 대시보드를 만들 수 있습니다. 사전 구성된 템플릿을 제공해 초기 설정을 손쉽게 진행할 수 있습니다. 이를 통해 사용자가 원하는 다양한 대시보드를 구성할 수 있습니다. 다양한 형태의 데이터 위젯을 추가할 수 있고, 개별 위젯의 속성을 수정해 사용자가 원하는 데이터 형식을 표시할 수 있습니다. 데이터 필터링을 통해 사용자가 원하는 모니터링 대상을 간추릴 수 있습니다. 시간 범위를 설정해 중요 시간의 데이터를 확인할 수 있습니다. 보조 차트를 활용해 다양한 방법으로 데이터를 확인할 수 있습니다. 대시보드를 즐겨 찾는 메뉴로 등록할 수 있습니다. 개인화된 대시보드를 타 계정에 복사해 활용할 수 있습니다. Flex 보드는 다음의 진입 경로에 따라 활용 범위가 달라집니다. 홈 화면 > 통합 Flex 보드 위젯 생성 시 조회 가능한 모든 프로젝트를 선택 옵션으로 제공합니다. 사용자 계정에 대시보드가 저장되며 다른 사용자에게 복사하기 기능을 이용해 공유할 수 있습니다. 개인 계정 대시보드로 권한에 따른 영향은 없으나 읽기 전용으로 공유된 대시보드의 경우 수정할 수 없습니다. 홈 화면 > 프로젝트 선택 > 대시보드 > Flex 보드 위젯 생성 시 해당 프로젝트 정보를 자동 입력합니다. 프로젝트 멤버들에게 생성한 Flex 보드가 자동 공유됩니다. 프로젝트 수정 권한 또는 프로젝트 플렉스보드 편집 권한, Site Admin 권한을 가진 사용자가 수정할 수 있습니다. 팁Flex 보드를 수정할 수 있는 사용자는 다음의 주요 기능을 이용할 수 있습니다. 대시보드를 json 파일 형식으로 내보내거나 가져올 수 있습니다. 대시보드 내의 데이터 요청 및 응답 내용을 확인할 수 있습니다. 위젯의 설정 옵션을 json 파일 형식으로 조회하고 수정할 수 있습니다. 노트 프로젝트 내 Flex 보드 메뉴에서는 대시보드 수정 권한이 있는 사용자만이 수정 모드 및 관리자 모드, 필터 기능에 접근할 수 있습니다. 접근할 수 있는 멤버 권한은 다음과 같습니다. 프로젝트 수정 권한 프로젝트 플렉스보드 편집 권한 Site Admin 권한 뷰 모드 및 필터 기능에 대한 자세한 내용은 다음 문서를 참조하세요. 멤버 권한에 대한 자세한 내용은 다음 문서를 참조하세요. ",
  "product": "JAVA 모니터링",
  "header": "Flex 보드"
},
{
  "title": "트랜잭션 맵",
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "content": "트랜잭션 맵. 자바(Java) 모니터링에서 개별 트랜잭션의 응답 시간을 분포도 형태로 시각화하여 제공하는 트랜잭션 맵 기능을 안내합니다. 실시간 및 과거 데이터 조회 기능을 통해 트랜잭션의 세부 정보를 분석할 수 있으며, 이를 통해 문제점을 식별하고 분석하는 데 유용합니다. 특히 히트맵과 달리 개별 트랜잭션을 표시하여 더 상세한 분석을 할 수 있습니다. 홈 화면 > 프로젝트 선택 > 대시보드 > 트랜잭션 맵 트랜잭션 맵 차트는 종료된 개별 트랜잭션의 응답시간을 분포도 형태로 표현한 차트입니다. 히트맵과 동일하게 분포 패턴에 따른 문제점을 발견하고 분석할 수 있습니다. 히트맵은 5초 단위로 트랜잭션을 그룹화해서 보여주지만 트랜잭션 맵은 트랜잭션을 개별로 표시합니다.  정보Service 2.2.0 릴리스를 통해 변경된 사항은 다음과 같습니다. 실시간 최대 5분, 과거 시점 최대 10분까지 데이터를 조회할 수 있습니다. (기존: 실시간 최대 5분 한정) 과거 시점의 데이터를 조회할 경우 서버로부터 받은 데이터를 필터링할 수 있습니다. 트레이스 분석 창을 통해 조회할 수 있는 데이터 개수가 100건에서 1000건으로 늘어났습니다. 트랜잭션 및 에러 개수를 실시간으로 표시합니다. TOP 30 목록 및 차트 영역에 키보드 이벤트를 추가했습니다. 키보드 방향 버튼을 선택하면 원하는 위치로 이동할 수 있습니다. 트랜잭션 맵 메뉴의 개편과 관련한 자세한 내용은 다음 링크를 참조하세요. 팁히트맵 분석과 다른 점은?히트맵 차트는 특정 구간 동안의 트랜잭션 발생 건을 합산하여 표시합니다. 발생 수가 많은 곳을 색상으로 차이를 표현하고 있습니다. 히트맵의 경우에는 구간별 합산 데이터를 따로 저장하고 있어 비교적 긴 시간의 추이도 확인할 수 있습니다. 하지만 트랜잭션을 합산해 표시하기 때문에 개별 트랜잭션 정보를 알기 어렵습니다. 장기간, 대용량 트랜잭션 분포도를 분석하려면 히트맵 분석(분석 > 히트맵)을 이용하세요. 성능 테스트를 하거나 장애 상황에서 1~5분 이내의 트랜잭션 분포도 분석, 수행 시간 제한 없이 트랜잭션 분포도를 확인하려면 트랜잭션 맵을 확인하세요.  노트 히트맵 메뉴에 대한 자세한 내용은 다음 문서를 참조하세요. 히트맵 트랜잭션 차트를 분석 방법에 대한 자세한 내용은 다음 문서를 참조하세요. 서버 시간보다 사용자의 PC 시간이 과거로 설정된 경우, 서버 시간과 사용자의 PC 시간이 5분 이상 차이가 날 경우 차트에 데이터가 출력되지 않을 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 맵"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "트레이스 분석하기. 트랜잭션 맵 의 차트 영역을 드래그하면 세부 트랜잭션 정보를 확인할 수 있는 트레이스 분석 창이 나타납니다. 트랜잭션 목록과 각 트랜잭션 하위의 스텝 정보를 한 번에 확인할 수 있습니다. 차트 영역을 드래그한 다음 트레이스 분석 창에서 조회할 수 있는 데이터는 최대 1,000건입니다. 노트 트레이스 분석 에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트레이스 분석하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "조회 기준 변경하기. 트랜잭션 맵 의 차트 영역, 왼쪽 위에 버튼을 선택해 데이터 조회 기준을 변경할 수 있습니다. 경과 시간 : 트랜잭션이 수행된 경과 시간 기준으로 데이터를 조회합니다. HTTP 호출 시간 : HTTP 호출에 대한 응답 시간 기준으로 데이터를 조회합니다. SQL 시간 : SQL 패치 시간을 기준으로 데이터를 조회합니다. 차트 영역, 오른쪽 위에 Error 버튼을 선택하면 에러가 발생한 트랜잭션만을 조회할 수 있습니다. 이 상태에서 차트의 트랜잭션을 드래그하면 에러 상태의 트랜잭션 목록이 표시된 트레이스 분석 창을 열 수 있습니다. 다시 전체 트랜잭션을 조회하려면 Total 버튼을 선택하세요. 팁 차트의 왼쪽 위에 또는 버튼을 선택하면 Y축의 최댓값을 쉽게 변경할 수 있습니다. 또한 키보드의 위 또는 아래 방향 버튼을 눌러 같은 기능을 이용할 수 있습니다. 노트 트랜잭션 맵 의 차트에 표시되는 트랜잭션의 최대 개수( TX Max )는 2,000,000개입니다.",
  "product": "JAVA 모니터링",
  "header": "조회 기준 변경하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "과거 데이터 조회하기. 트랜잭션 맵 은 실시간 모니터링을 기본 제공합니다. 기본값으로 5분 동안의 데이터를 실시간으로 조회할 수 있습니다. 시간 선택자의 녹색 버튼을 클릭해 원하는 조회 시간을 선택하세요. 과거 데이터를 조회하려면 시간 선택자에서 버튼을 선택하세요. 비실시간 모드로 변경되며 최대 10분까지의 트랜잭션 데이터를 조회할 수 있습니다. 원하는 날짜와 시간을 설정한 다음 적용 버튼을 선택하세요. 사용자가 설정한 시간을 기준으로 트랜잭션 맵 의 차트 데이터를 갱신합니다. 노트 과거 조회 범위는 트랜잭션의 양에 따라 달라질 수 있습니다. 과거 데이터를 조회한 다음 실시간 모드로 전환하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "과거 데이터 조회하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "필터 적용하기. 과거 데이터를 조회하게 되면 필터를 적용해 원하는 데이터를 빠르게 필터링할 수 있습니다. 시간 선택자에서 버튼을 선택하면 필터 입력 상자가 나타납니다. 필터 입력 상자를 선택하면 선택할 수 있는 필터 항목이 나타납니다. 선택할 수 있는 항목은 다음과 같습니다. 경과 시간 트랜잭션 도메인 IP 필터링할 수 있는 값이 목록으로 표시되면 원하는 항목을 선택하세요. 노트 필터 항목으로 경과 시간 을 선택하면 사용자가 직접 시간을 입력해야 합니다. 단위는 밀리초(ms)입니다. 버튼을 선택하세요. Top 30 목록과 트랜잭션 맵 차트에 필터링한 데이터를 갱신합니다. 노트 다중 조건을 설정해 필터링할 수 있습니다. 추가한 조건은 && 기준으로 적용됩니다. 예를 들어, 트랜잭션이 /account/save/employee/seoul 이면서 경과 시간이 3초 이상인 경우 다음과 같이 적용할 수 있습니다. 트랜잭션 = /account/save/employee/seoul 경과 시간 (ms) >= 3 경과 시간 은 추가로 적용할 수 없습니다.",
  "product": "JAVA 모니터링",
  "header": "필터 적용하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "에이전트 연결 상태 확인하기. 화면 왼쪽 위, 시간 선택자의 오른쪽에서는 해당 프로젝트와 연결된 에이전트의 상태를 확인할 수 있는 정보를 제공합니다. 이를 통해 모니터링 대상 서버의 동작 여부를 바로 확인할 수 있습니다. Total : 프로젝트와 연결된 모든 에이전트의 수 Active : 활성화된 에이전트의 수 Inactive : 비활성화된 에이전트의 수 : 비활성화된 에이전트를 표시하거나 감출 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 연결 상태 확인하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "에이전트별 모니터링. 기본적으로 차트에는 모든 에이전트로부터 수집한 지표들을 차트에 표시하지만 에이전트별로 데이터를 조회할 수도 있습니다. 시간 선택자 아래에 위치한 에이전트를 하나 또는 둘 이상을 선택하세요. 선택한 에이전트의 트랜잭션 데이터로 차트를 갱신합니다. 팁 에이전트를 하나 또는 둘 이상을 선택한 상태에서 다시 모든 에이전트를 선택하려면 선택을 해제하거나 Total 을 선택하세요. 노트 프로젝트에 연결된 에이전트의 수가 많을 경우 에이전트의 이름을 짧게 설정하는 것이 효율적입니다. 에이전트 이름 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트별 모니터링"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "상위 목록 확인하기. Top 30 섹션에서는 트랜잭션 및 도메인 , IP , 에이전트 기준으로 트랜잭션 수행 건수가 많은 상위 30개의 목록을 표시합니다. 트랜잭션 : 트랜잭션 URL 기준으로 집계된 상위 30개의 목록을 확인할 수 있습니다. 도메인 : 클라이언트가 접속한 IP 주소에 지정된 인터넷 주소를 기준으로 집계된 상위 30개의 목록을 확인할 수 있습니다. IP : 클라이언트의 IP 주소를 기준으로 집계된 상위 30개의 목록을 확인할 수 있습니다. 에이전트 : 해당 프로젝트에 포함된 에이전트를 기준으로 집계된 상위 30개의 목록을 확인할 수 있습니다. 목록에서 개별 항목을 선택하면 트랜잭션 맵 차트에 선택한 항목 기준으로 데이터를 반영합니다. 여러 개의 항목을 다중 선택하려면 Ctrl (Windows/Linux) 또는 CMD (Mac) 키를 누른 상태에서 원하는 항목을 클릭하세요. 팁 Top 30 섹션의 목록에서 키보드의 위 또는 아래 방향 버튼을 눌러 항목을 이동할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "상위 목록 확인하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-transactionmap",
  "title": "트랜잭션 맵",
  "content": "사용자 IP 주소 추가하기. TOP 30 섹션의 IP 기준으로 트랜잭션 수행 건수를 조회할 때 특정 IP 주소를 추가해 상시 확인할 수 있는 기능을 제공합니다. TOP 30 섹션에서 IP 를 선택하세요. 목록의 가장 위에 입력란에 특정 IP 주소를 입력하세요. 버튼을 선택하세요. 목록의 가장 위에 입력한 IP 주소가 고정되어 표시됩니다. 노트 추가한 IP 주소를 삭제하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "사용자 IP 주소 추가하기"
},
{
  "title": "대시보드",
  "url": "https://docs.whatap.io/java/dashboard-intro",
  "content": "대시보드. 와탭 모니터링 서비스에서 제공하는 자바(Java) 애플리케이션 모니터링의 대시보드 기능과 이를 통해 얻을 수 있는 정보에 대해 안내합니다. 대시보드는 프로젝트의 전체 현황을 한눈에 파악할 수 있으며, 응답 시간, 트랜잭션 상태, 시스템 자원 사용량 등을 실시간으로 시각화하여 제공합니다. 대시보드를 통해 운영자는 서비스 상태를 직관적으로 이해하고, 장애를 즉각적으로 인지할 수 있습니다. 와탭 에이전트 설치를 완료했다면 와탭 모니터링 서비스에 로그인하세요. 초기 화면은 프로젝트 목록입니다. 프로젝트 목록에서 에이전트를 설치한 애플리케이션 서버를 확인할 수 있습니다. 에이전트를 설치한 하나의 애플리케이션 서버는 프로젝트이며, 모니터링 단위입니다. 프로젝트 목록의 프로젝트를 선택하면 애플리케이션 대시보드로 진입할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "대시보드"
},
{
  "url": "https://docs.whatap.io/java/dashboard-intro",
  "title": "대시보드",
  "content": "대시보드란?. 와탭 모니터링 서비스에서 대시보드는 프로젝트의 전체 현황을 한눈에 파악할 수 있는 기능입니다. 모니터링 중인 전체 자원 규모를 확인할 수 있고 실시간 대시보드에서 모니터링 대상 자원을 필터링할 수 있습니다. 진행 중인 트랜잭션과 종료된 트랜잭션 정보를 실시간으로 업데이트하고 시각화된 차트를 제공합니다. 운영자는 서비스 및 시스템의 정확한 현재 상태를 직관적으로 파악할 수 있습니다. 또한 즉각적인 장애 인지 및 잠재적 문제 요소를 빠르게 식별할 수 있습니다. 대시보드를 통해 파악할 수 있는 정보는 다음과 같습니다. 응답시간 분포 차트를 통해 응답시간 범위를 조정하거나 에러 데이터를 필터링할 수 있습니다. 진행 중 트랜잭션을 분석하고 종료한 트랜잭션을 실시간으로 업데이트합니다. TPS, 응답시간, CPU, Memory, 실시간 사용 등의 리소스 현황을 파악할 수 있습니다. 최신의 데이터를 자동 업데이트해 실시간 모니터링 서비스를 제공합니다. 다음 동영상을 통해 애플리케이션 대시보드에 대해 알아보세요.",
  "product": "JAVA 모니터링",
  "header": "대시보드란?"
},
{
  "title": "트랜잭션 스텝 수집 방식",
  "url": "https://docs.whatap.io/java/collect-stacks",
  "content": "트랜잭션 스텝 수집 방식. 트랜잭션 스텝 수집 방식을 안내합니다. 애플리케이션 모니터링 에이전트는 선형 수집 방식과 환형 수집 방식을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 스텝 수집 방식"
},
{
  "url": "https://docs.whatap.io/java/collect-stacks",
  "title": "트랜잭션 스텝 수집 방식",
  "content": "선형 수집. 개별 트랜잭션 트레이스는 무한정 스텝을 수집할 수 없습니다. 트랜잭션별로 길이가 제한된 버퍼에 트레이스 스텝을 저장합니다. 각 트랜잭션은 최대로 수집할 수 있는 스텝의 수가 옵션으로 지정되어 있습니다. profile_step_max_count 기본값 1024 최대로 수집 가능한 스텝 수입니다. profile_step_normal_count 기본값 800 일반적으로 아무런 제약없이 수집되는 스텝 수입니다. profile_step_heavy_count 기본값 1000 normal count를 초과한 경우 스텝은 응답시간이 느린 스텝과 액티브 스택 스텝만 수집합니다. profile_step_heavy_time 기본값 100 heavy count 이내에서의 수집되는 스텝의 기준 시간은 profile_step_heavy_time 입니다. 수집되는 트레이스의 스텝 수가 heavy count를 초과하는 경우에는 액티브 스택만이 수집됩니다. 이 경우에도 최대 스텝 수는 profile_step_max_count 를 넘지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "선형 수집"
},
{
  "url": "https://docs.whatap.io/java/collect-stacks",
  "title": "트랜잭션 스텝 수집 방식",
  "content": "환형 수집. 선형 수집은 트레이스에서 앞부분을 수집하고 버퍼 사이즈를 넘으면 나중 내용을 버립니다. 반면 환형 수집은 앞부분의 스텝을 버리는 방식입니다. circular_profile_enabled = true 버퍼 사이즈는 profile_step_max_count 에 설정합니다. profile_step_max_count = 1024",
  "product": "JAVA 모니터링",
  "header": "환형 수집"
},
{
  "title": "비동기 추적",
  "url": "https://docs.whatap.io/java/async-tracking",
  "content": "비동기 추적. 자바(Java) 에이전트 설정을 통해 비동기 애플리케이션 활동을 추적하는 방법을 안내합니다. CompletableFuture 메소드 수집 방법과 사용자 애플리케이션에 해당 메소드를 hooking하는 방식을 포함합니다. 설정 예시와 함께 whatap.conf 파일에 추가해야 할 옵션을 제공하여 비동기 호출의 성능 모니터링을 강화할 수 있도록 지원합니다. 자바(Java) 에이전트 설정을 통해 비동기 애플리케이션 활동을 추적하는 방법을 안내합니다. CompletableFuture 메소드 수집 방법과 사용자 애플리케이션에 해당 메소드를 hooking하는 방식을 포함합니다. 설정 예시와 함께 whatap.conf 파일에 추가해야 할 옵션을 제공하여 비동기 호출의 성능 모니터링을 강화할 수 있도록 지원합니다.",
  "product": "JAVA 모니터링",
  "header": "비동기 추적"
},
{
  "url": "https://docs.whatap.io/java/async-tracking",
  "title": "비동기 추적",
  "content": "CompletableFuture. Java 에이전트 설정을 통해 CompletableFuture 메소드를 수집할 수 있는 방법을 안내합니다.",
  "product": "JAVA 모니터링",
  "header": "CompletableFuture"
},
{
  "url": "https://docs.whatap.io/java/async-tracking",
  "title": "비동기 추적",
  "content": "CompletableFuture 메서드 추가. 사용자의 Java 애플리케이션 프로젝트에 에이전트로 hooking할 CompletableFuture 메소드를 추가하세요. 메서드 이름: trace 로 통일 ReturnType: Supplier , Consumer , Runnable , Future package io . home . test . util ; import java . util . concurrent . Future ; import java . util . function . Consumer ; import java . util . function . Supplier ; public class W { public static < T > Supplier < T > trace ( Supplier < T > f ) { return f ; } public static < T > Consumer < T > trace ( Consumer < T > f ) { return f ; } public static < T > Runnable trace ( Runnable f ) { return f ; } public static < T > Future < T > trace ( Future < T > f ) { return f ; } }",
  "product": "JAVA 모니터링",
  "header": "CompletableFuture 메서드 추가"
},
{
  "url": "https://docs.whatap.io/java/async-tracking",
  "title": "비동기 추적",
  "content": "에이전트 설정 추가. 에이전트 설정을 위해 whatap.conf 파일에 다음 옵션을 추가하세요. whatap.conf hook_completablefuture_patterns = io.home.test.util.W.* 노트 Context가 있는 경우 trace 메소드를 추가해 트랜잭션을 연결하세요. Context가 없는 경우 hook_service_patterns 옵션으로 서비스를 시작해야 합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 설정 추가"
},
{
  "url": "https://docs.whatap.io/java/async-tracking",
  "title": "비동기 추적",
  "content": "사용 예시. 원본 public CompletableFuture < String > serviceATimeout ( ) { return CompletableFuture . supplyAsync ( ( ) -> { RestTemplate restTemplate = new RestTemplate ( ) ; return restTemplate . getForObject ( \"http://localhost:8081/api/serviceB/timeout\" , String . class ) ; } ) ; } io.home.test.util.W.trace() 적용 // io.home.test.util.W.trace() 적용 public CompletableFuture < String > serviceATimeout ( ) { return CompletableFuture . supplyAsync ( W . trace ( ( ) -> { RestTemplate restTemplate = new RestTemplate ( ) ; return restTemplate . getForObject ( \"http://localhost:8081/api/serviceB/timeout\" , String . class ) ; } ) ) ; }",
  "product": "JAVA 모니터링",
  "header": "사용 예시"
},
{
  "title": "일자별 애플리케이션 현황",
  "url": "https://docs.whatap.io/java/application-daily-stat",
  "content": "일자별 애플리케이션 현황. Java 환경의 애플리케이션에서 일별 주요 지표들의 현황을 시간대별로 확인할 수 있습니다. 일자별 애플리케이션 현황홈 화면 > 프로젝트 선택 > 분석 > 일자별 애플리케이션 현황 애플리케이션의 주요 성능 지표들의 하루 동안 추이를 시간 단위 차트를 통해 확인할 수 있습니다. 하루 동안의 애플리케이션 상태를 확인할 수 있습니다. 검색 조건(일자 선택, 구분, 애플리케이션)을 설정하고  버튼을 선택하세요. 구분 옵션의 조건은 다음과 같습니다. 분류설명에이전트프로젝트에 포함된 애플리케이션 에이전트 이름에이전트 종류에이전트 설정에서 whatap.okind 옵션으로 분류된 그룹 단위에이전트 서버에이전트 설정에서 whatap.onode 옵션으로 분류된 그룹 단위 제공하는 차트는 다음과 같습니다. 차트의 오른쪽에 위치한 수치는 하루 동안 누적된 값 또는 평균, 최댓값을 확인할 수 있습니다. 시간당 트랜잭션 수 시간당 사용자 수 노트금일 사용자는 하루 동안 누적된 사용자를 중복없이 합산한 값입니다. 단순히 합산하는 것이 아니라 HyperLogLog로 산출합니다. HyperLogLog는 매우 적은 메모리로 집합의 원소 개수를 추정하는 확률적 자료 구조를 의미합니다. 시간당 HTTP 호출 건수 시간당 SQL 건수 시간당 SQL 패치 건수 응답시간 초당 트랜잭션 액티브 트랜잭션 5분 합계 에러 건수 에러율 ",
  "product": "JAVA 모니터링",
  "header": "일자별 애플리케이션 현황"
},
{
  "title": "히트맵 - 트레이스 분석",
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "content": "히트맵 - 트레이스 분석. 자바(Java) 모니터링에서 애플리케이션 대시보드의 히트맵 위젯을 통해 트랜잭션과 그 하위 스텝 정보를 한눈에 분석하는 방법을 안내합니다. 사용자는 원하는 영역을 드래그하여 선택한 영역의 트랜잭션 목록과 상세 스텝 정보를 포함하는 분석 창을 확인할 수 있습니다. 이를 통해 에러가 발생한 트랜잭션 정보를 분류하고, 트랜잭션의 성능을 상세하게 분석할 수 있습니다. 애플리케이션 대시보드의 히트맵 위젯을 통해 트레이스 분석 창을 열어 트랜잭션 목록과 각 트랜잭션 하위의 스텝 정보를 한 번에 확인할 수 있습니다. 히트맵 위젯에서 원하는 영역을 드래그하세요. 선택한 영역의 트랜잭션 목록과 하위 스텝 정보를 포함하는 트레이스 분석 창이 나타납니다. 정보지난 2023년 7월 25일, 릴리스된 트레이스 분석 기능의 변경 사항을 확인하려면 다음 문서를 참조하세요. 팁에러가 발생한 트랜잭션 정보만 분류해 확인하려면 애플리케이션 대시보드의 히트맵 위젯의 오른쪽 위에 에러 버튼을 선택한 다음 차트 영역을 드래그하세요.",
  "product": "JAVA 모니터링",
  "header": "히트맵 - 트레이스 분석"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "기본 화면 안내. 트랜잭션 조회 건수 : 히트맵 위젯에서 드래그한 영역의 트랜잭션 목록의 개수를 확인할 수 있습니다. 최대 1000건까지 조회할 수 있습니다. 트랜잭션 분류 : 액티브 스택 과 멀티 트랜잭션 , 에러 항목을 구분하여 목록을 확인할 수 있습니다. 트랜잭션 검색 : 트랜잭션 명과 에이전트 명, 에러 메시지를 기준으로 트랜잭션 목록을 검색할 수 있습니다. 목록 정렬하기 : 테이블의 헤더 컬럼 항목을 클릭하면 선택한 항목을 기준으로 트랜잭션 목록을 정렬할 수 있습니다. 에러가 발생한 트랜잭션 항목은 목록에서 빨간색으로 표시됩니다. 팁 테이블에서 자주 보길 원하는 컬럼 항목을 앞으로 배치하거나 추가, 숨기기할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요. 히트맵 위젯에서 다른 영역을 드래그하면 새로운 트레이스 분석 창을 불러올 수 있습니다. 기존에 열린 트레이스 분석 창과 비교해 확인할 수 있습니다. 현재 사용자가 보고 있는 트랜잭션 항목을 다른 사용자에게 공유할 수 있습니다. 트랜잭션 항목을 선택한 상태에서 트레이스 분석 창의 URL 주소를 복사해 다른 사용자에게 전달하세요. URL 주소를 전달 받은 사용자는 브라우저 주소 표시줄에 URL 주소를 입력하면 같은 항목을 빠르게 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "기본 화면 안내"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "트레이스 분석하기. 트랜잭션 목록에서 상세 내용을 확인할 항목을 선택하세요. 화면 오른쪽에 선택한 트랜잭션에 대한 상세 분석 내용을 표시합니다. 이 상태에서 다른 트랜잭션 항목을 선택하면 선택한 트랜잭션 항목에 대한 상세 분석 내용으로 변경됩니다. 와탭은 트랜잭션의 성능을 분석하기 위해 이름과 클라이언트 정보 등의 속성, 트랜잭션의 처리 성능 그리고 각 구간별 상세 수행 이력을 수집하고 보여줍니다. 영역에서는 스텝 정보를 다양한 형식으로 확인할 수 있습니다. 원하는 형식의 탭을 선택하세요. 영역에서는 트랜잭션에 대한 기본 정보를 확인할 수 있습니다. 왼쪽 목록의 컬럼 항목과 일치하는 정보입니다. : 해당 URL 또는 각 수행 구간의 통계 데이터 창이 나타납니다. 통계 데이터 창에서 상세 버튼을 선택하면 통계 메뉴로 이동합니다. 왼쪽 또는 오른쪽으로 드래그해서 화면의 크기를 조절할 수 있습니다. 더 많은 정보를 보길 원할 때 이용하면 유용합니다. 노트 통계 메뉴에 대한 자세한 내용은 다음 문서 를 참조하세요. 또는 버튼을 클릭하면 트랜잭션 목록 또는 상세 분석 화면을 전체 크기로 변경할 수 있습니다. 수집하는 스텝 ( Step )의 종류는 다음과 같습니다. 다이어그램과 텍스트 색상을 구분해 표시합니다. DB Connection 스텝 START-END RDB에 대한 연결에 대한 성능을 포함합니다. 스텝 정보에는 이름, 응답시간, 에러를 포함합니다. SQL 스텝 START-END JDBC SQL에 대한 성능을 포함합니다. 스텝 정보에는 연결 정보, SQL문, 에러가 포함되어 있습니다. HTTP Call 스텝 START-END 외부 http 서비스 호출에 대한 성능을 포함합니다. 스텝 정보에는 url, host, port, 응답시간, 에러가 포함됩니다. Message 스텝 ADD 트레이스를 수집하는 과정에서 비정형적인 모든 구간에 대한 이력을 수집할 때 메시지 스텝을 사용합니다. Socket 스텝 ADD Socket 오픈을 표현하는 스텝입니다. Method 스텝 START-END 메소드 응답시간을 추적합니다. Active Stack 스텝 START-END 액티브 스텝에 대한 정보를 포함합니다. 별도 스레드가 생성하여 트레이스에 추가하는 방식으로 수집합니다. 노트 와탭 모니터링 서비스에서 스텝 ( Step )은 스팬 ( Span )과 같은 뜻으로 사용됩니다. 지난 2023년 7월 25일, 릴리스된 트레이스 분석 기능의 변경 사항을 확인하려면 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트레이스 분석하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "테이블 뷰. 테이블 뷰 탭에서는 트랜잭션의 수행 과정을 시간의 순서대로 확인할 수 있습니다. 트랜잭션을 수행 구간별로 분류해 다이어그램을 통해 확인할 수 있습니다. 전체 경과 시간 중 각 구간별 소요된 시간, 가장 오래 소요된 구간을 빠르게 파악할 수 있습니다. 다이어그램의 각 구간을 선택하면 해당 스텝이 위치한 테이블 목록으로 이동합니다. 빨간색 원( )이 위치한 영역은 액티브 스택이 수집된 순간입니다. 빨간색 원을 선택하면 액티브 스택 버튼이 위치한 테이블 목록으로 이동할 수 있습니다. 액티브 스택 버튼을 선택하면 해당 구간 동안 수행된 스텝 정보를 확인할 수 있습니다. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 액티브 스택에 대한 자세한 내용은 다음 문서 를 참조하세요. 컬럼 선택 : 테이블 목록에 컬럼으로 메모리 누적 정보 및 CPU 누적 정보를 추가하거나 감출 수 있습니다. 컬럼 정보는 다음과 같습니다. No : 스텝의 발생 순서 시간 : 각 스텝의 시작 시각 갭 : 해당 스텝의 시작 시각부터 다음 스텝으로 넘어가기까지 대기 시간, 외부 요인으로 지연될 경우 경과 시간과 차이가 있을 수 있습니다. 경과 : 각 메소드 시작부터 종료까지 총 소요 시간 내용 : 해당 스텝의 세부 수행 내용 TXT : 트랜잭션 기본 정보 및 구간별 수행 정보를 txt 형식의 파일로 다운로드할 수 있습니다. SQL : 트랜잭션 기본 정보 및 SQL 수행 정보를 txt 형식의 파일로 다운로드할 수 있습니다. : 트랜잭션 요약 정보와 다이어그램을 감추고 테이블 목록만 확인할 수 있습니다. 버튼을 선택하면 감춰진 정보를 다시 표시합니다. 테이블 목록이 긴 경우 이 기능을 이용하면 유용합니다. SQL 스텝을 선택하면 파라미터를 조회할 수 있는 SQL 창이 나타납니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "테이블 뷰"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "레코드 요약. 트랜잭션의 기본 정보를 확인하려면 레코드 요약 탭을 선택하세요. 트랜잭션의 기본 정보 및 해당 트랜잭션이 수행된 에이전트 관련 정보, 메모리 할당 사용량, 클라이언트 관련 정보를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "레코드 요약"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "트랜잭션 속성. 분류 속성 설명 에이전트 에이전트 명 ( oname ) 에이전트 오브젝트 이름 에이전트 ID (oid) 에이전트 오브젝트 아이디 에이전트 그룹 명 okind 옵션으로 설정된 에이전트 그룹 이름 에이전트 그룹 ID 에이전트 그룹 아이디 에이전트 서버 명 ondoe 옵션으로 설정한 에이전트 서버 이름 에이전트 서버 ID 에이전트 서버 아이디 프로젝트 코드 와탭 모니터링 서비스에 등록한 프로젝트의 식별 코드 트랜잭션 트랜잭션 ID 트랜잭션 아이디 시작 시간 트랜잭션 시작 시각 종료 시간 트랜잭션 종료 시각 경과 시간 트랜잭션 수행 시간 HTTP 메소드 HTTP 메소드 - GET, POST, PUT, HEAD 등 HTTP 호출 시간 외부 Http Call 시간 HTTP 호출 건수 외부 HTTP Call 건수 DB 연결 시간 DB와 연결된 시간 SQL 시간 SQL 수행 시간 SQL 건수 SQL 수행 건수 SQL 패치 시간 레코드를 조회하는 데 걸린 시간 (중첩이 발생하거나 타 로직이 포함될 수 있음) SQL 패치 건수 SQL에서 데이터를 조회한 레코드 건수 멀티 트랜잭션 CallerUrl 부모 트랜잭션의 트랜잭션 주소 CallerPcode 부모 트랜잭션이 수집된 프로젝트 코드 CallerOid 부모 트랜잭션의 에이전트 오브젝트 아이디 CallerOName 부모 트랜잭션의 에이전트 이름 CallerOkind 부모 트랜잭션의 에이전트 그룹 ID CallerOkindName 부모 트랜잭션의 에이전트 그룹 이름 자원 CPU 사용 시간 트랜잭션이 사용한 CPU 사용량 메모리 할당량 트랜잭션이 사용한 메모리 사용량 클라이언트 클라이언트 IP 클라이언트의 IP 주소 도메인 클라이언트가 접속한 IP 주소에 지정된 인터넷 주소 WClientID 클라이언트의 ID 국가 클라이언트의 국가 정보 도시 클라이언트의 국가 내 도시 정보 운영체제 브라우저가 실행되는 운영 체제 환경 클라이언트 타입 클라이언트가 이용한 브라우저 종류 클라이언트 명 클라이언트가 이용한 기기 이름 상태 클라이언트의 요청에 대한 HTTP 상태 코드 Referer 클라이언트가 브라우저에서 이전에 이용한 페이지 주소 또는 유입 경로 원본 URL/트랜잭션 트랜잭션 이름과 원본 URL의 조합 데이터 원본 URL이 있을 경우 원본 URL 표시, 원본 URL이 없을 경우 트랜잭션 표시 유저 에이전트 클라이언트 관련 정보를 추출하는데 이용하는 브라우저 정보 노트 애플리케이션 종류나 설정, 스텝의 종류에 따라 수집하는 정보는 달라질 수 있습니다. 와탭은 클라이언트와 관련한 정보를 기본 저장합니다. 사용자 데이터 수집과 관련한 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 속성"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "트리 뷰. 트랜잭션 수행 과정을 트리 형식으로 확인하려면 트리뷰 탭을 선택하세요. 각 트랜잭션과 그에 속한 트레이스의 세부 정보, 트레이스의 시작 시간 및 소요 시간, 호출 관계를 확인할 수 있습니다. 다이어그램의 각 구간을 선택하면 해당 스텝이 위치한 트리뷰로 이동합니다. 한 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 한 줄로 표시해 트리 형식을 간격하게 정리할 수 있습니다. 여러 줄 보기 : 각 구간 별 수행 정보에 표시된 텍스트를 줄바꿈해 모두 표시합니다. 최장 경로 : 가장 긴 경로로 이동할 수 있습니다. 시간바 표시 : 경과 시간을 막대 형식의 차트로 표시합니다. 시간 표시 : 각 구간별 타임 스탬프, 갭, 경과 시간을 텍스트 형식으로 표시합니다. 8초 이상: 초과 지연 상태로 빨간색 으로 표현합니다. 3초 이상 8초 미만: 지연 상태로 주황색 으로 표현합니다. 3초 미만: 정상 상태로 파란색 으로 표현합니다. 시간 숨기기 : 시간 정보를 숨깁니다. : 트랜잭션 요약 정보와 다이어그램을 감추고 트리뷰만 확인할 수 있습니다. 버튼을 선택하면 감춰진 정보를 다시 표시합니다. 트리뷰 목록이 긴 경우 이 기능을 이용하면 유용합니다. : SQL 변수와 HTTP 쿼리를 조회할 수 있는 창이 나타납니다. 자세한 내용은 다음 문서 를 참조하세요. 노트 시작 및 소요 시간의 경우 트랜잭션 호출 환경에 따라 발생하는 시차를 상위 트랜잭션 내 트레이스와 매핑을 통해 보정하여 표현하기 때문에 실제 수집된 시간 데이터와 차이가 발생할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트리 뷰"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "액티브 스택. 액티브 스택을 수집한 구간과 시간, 관련한 클래스, 메소드 정보를 확인하려면 액티브 스택 탭을 선택하세요. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 액티브 스택에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "액티브 스택"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "멀티 트랜잭션. 멀티 트랜잭션은 다른 에이전트나 프로젝트와의 연관된 트랜잭션을 의미합니다. 멀티 트랜잭션 탭에서는 와탭 모니터링 서비스에 등록한 애플리케이션 간의 호출 관계를 확인할 수 있습니다. 팁 멀티 트랜잭션을 추적하려면 관리 > 에이전트 설정 메뉴에서 mtrace_enabled 옵션을 true 로 설정하세요. 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요. 차트 : 각 트랜잭션의 호출 관계를 플로우 차트 형식으로 제공합니다. 트랜잭션 노드를 선택하면 해당 트랜잭션 노드에 대한 트레이스 분석 정보를 확인할 수 있습니다. 차트 모드에서는 마우스를 이용해 원하는 위치로 이동하거나 스크롤을 통해서 확대, 축소할 수 있습니다. 차트 뷰 설정 : 차트에 표시할 요소를 표시하거나 숨길 수 있습니다. 테이블 : 테이블 형식으로 멀티 트랜잭션 내에 포함된 각 트랜잭션 별 정보를 확인할 수 있습니다. 컬럼 선택 아이콘을 선택해 테이블 헤더 컬럼을 편집할 수 있습니다. 각 트랜잭션 항목을 선택하면 트레이스 분석 정보를 확인할 수 있습니다. 트리 : 트리 형식으로 트랜잭션 간의 호출 관계를 파악할 수 있습니다. 관련한 부가 기능은 트리뷰 탭의 기능과 같습니다. 프로젝트 선택 : 차트에 표시될 프로젝트를 선택하거나 해제할 수 있습니다. 노트 트랜잭션 목록에서 아이콘이 표시된 항목에서 확인할 수 있습니다. 멀티 트랜잭션에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "메소드 요약. 메소드 정보만을 확인하려면 메소드 요약 탭을 선택하세요. 에이전트에 추적이 설정된 메소드 이름과 소요 시간을 표시합니다. 불필요한 로직이 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 메소드 로직 개선을 위한 분석 정보로 활용할 수 있습니다. 노트 메소드(method)와 관련한 에이전트 설정 옵션에 대한 자세한 내용은 다음 문서 를 참조하세요. 이용 중인 상품에 따라 메소드 추적 지원 여부는 다를 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "메소드 요약"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "SQL 요약. SQL문에 대한 정보를 확인하려면 SQL 요약 탭을 선택하세요. 불필요하게 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 쿼리 성능 개선을 위한 분석 정보로 활용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "SQL 요약"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "HTTP Call 요약. HTTP 호출의 호출 건수, 합계 시간, 평균 시간 등을 확인하려면 HTTP Call 요약 탭을 선택하세요. 불필요한 외부 호출이 반복 실행되는 경우, 낮은 건수에 비해 실행 시간이 오래 걸리는 경우를 파악해 트랜잭션 지연 요인이 외부인지 내부인지를 파악하는 분석 정보로 활용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "HTTP Call 요약"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "트랜잭션 로그. 트랜잭션과 관련한 로그 정보를 확인하려면 트랜잭션 로그 탭을 선택하세요. 키워드 검색 : 키워드 검색란에 검색하려는 텍스트를 입력한 다음 엔터 키를 입력하거나 버튼을 선택하세요. 입력한 텍스트와 일치하는 키워드를 하이라이트 표시합니다. 키워드 하이라이트 : 키워드와 색상을 설정하면 자동으로 로그 목록에서 키워드와 일치하는 텍스트를 하이라이트 표시합니다. 테이블 설정 : 로그 목록 테이블의 헤더 컬럼을 설정할 수 있습니다. 노트 트랜잭션 로그 탭을 활성화하려면 로그와 관련한 에이전트 설정 옵션을 적용해야 합니다. 로그 설정에 대한 자세한 내용은 다음 문서 를 참조하세요. 트랜잭션 로그 탭은 로그 조회 권한이 가진 멤버만 진입할 수 있습니다. 멤버 권한에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 로그"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "키워드 하이라이트 설정하기. 하이라이트 표시할 키워드를 추가하려면 버튼을 선택하세요. 원하는 키워드를 입력하세요. 색상 아이콘을 선택한 다음 원하는 색상을 선택하세요. 엔터를 입력하세요. 추가한 키워드가 목록에 생성됩니다.",
  "product": "JAVA 모니터링",
  "header": "키워드 하이라이트 설정하기"
},
{
  "title": "액티브 트랜잭션",
  "url": "https://docs.whatap.io/java/dashboard-active-transaction",
  "content": "액티브 트랜잭션. 자바(Java) 모니터링에서 현재 진행 중인 트랜잭션을 실시간으로 모니터링하고 분석하는 액티브 트랜잭션 기능을 안내합니다. 애플리케이션의 트랜잭션 URL, SQL, HTTP 호출 정보를 조회하고, 트랜잭션의 상태를 구분하여 파악할 수 있습니다. 이를 통해 지연 구간을 식별하고 문제 해결에 필요한 상세 정보를 얻을 수 있습니다. 홈 화면 > 프로젝트 선택 > 대시보드 > 액티브 트랜잭션 현재 진행 중인 트랜잭션의 URL, SQL, HTTP 호출 정보로 이상 트랜잭션을 신속하게 파악할 수 있으며, 상세 트레이스를 통해서 지연 구간을 상세하게 분석할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "액티브 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/dashboard-active-transaction",
  "title": "액티브 트랜잭션",
  "content": "화면 구성. 에이전트 별 액티브 트랜잭션 전체 애플리케이션 서버의 목록과 진행 중인 트랜잭션의 총 개수를 표시합니다. 차트의 각 그래프에 마우스를 오버하면 트랜잭션 상태 속도를 표시합니다. 트랜잭션 상태의 속도는 Normal , Slow , Very Slow 로 분류합니다. 에이전트 목록 애플리케이션 서버의 목록과 진행 중인 트랜잭션의 총 개수를 표시합니다. 해당 애플리케이션 서버를 선택하면 트랜잭션 목록에 세부 정보가 나타납니다. 트랜잭션 목록 진행 중인 트랜잭션의 URL, SQL, HTTP 호출 정보의 상세 내용을 표시합니다. Top 10 항목 탭을 선택하면 각 항목별 경과 시간이 높은 순으로 정렬된 표를 확인할 수 있습니다. 마찬가지로 트랜잭션 상태의 속도는 Normal , Slow , Very Slow 로 분류합니다. 트랜잭션 목록에서 항목을 선택하면 선택한 트랜잭션에 대한 상세 정보를 확인할 수 있는 액티브 트랜잭션 창이 나타납니다. 실행 중인 트랜잭션에 대한 상세 정보 및 외부 호출, 쿼리, 콜 스택 등을 확인할 수 있습니다. 전체 새로고침 : 진행 중인 트랜잭션의 정보를 갱신할 수 있습니다. 스레드 중지 : 진행 중인 트랜잭션을 중지할 수 있습니다. 스레드 중지를 위해서는 시크릿키 가 필요합니다. 시크릿키 에 대한 자세한 내용은 다음 문서 를 참조하세요. 이미 종료된 트랜잭션이라면 트랜잭션 보기 버튼을 표시됩니다. 버튼을 선택하면 트랜잭션 정보 창이 나타납니다. 트랜잭션 정보 에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "화면 구성"
},
{
  "url": "https://docs.whatap.io/java/dashboard-active-transaction",
  "title": "액티브 트랜잭션",
  "content": "에이전트 목록 필터링. 에이전트 목록 에서 필터링 대상을 선택하거나 검색해 트랜잭션 목록에서 개별로 확인할 수 있습니다. 현재 활성화된 에이전트를 확인하려면 활성화 에이전트만 보기 체크박스를 선택하세요. 전체 에이전트 목록 상자를 클릭하세요. 에이전트를 카테고리 별로 분류해 확인할 수 있습니다. 진행 중인 트랜잭션 정보를 에이전트 별로 확인하려면 에이전트를 선택한 다음 아래에 적용 버튼을 클릭하세요. 선택을 취소하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 목록 필터링"
},
{
  "url": "https://docs.whatap.io/java/dashboard-active-transaction",
  "title": "액티브 트랜잭션",
  "content": "자동 갱신 설정. 진행 중인 트랜잭션을 설정한 간격마다 자동 갱신할 수 있습니다. 자동 갱신(초) 토글 버튼을 선택해 옵션을 활성화한 다음 오른쪽 텍스트 입력 상자에 갱신 간격을 입력하세요. 자동 갱신 설정을 비활성화하려면 자동 갱신(초) 토글 버튼을 다시 선택하세요. 노트 시간은 초 단위로 갱신합니다. 자동 갱신 설정을 비활성화한 상태에서 트랜잭션 목록을 갱신하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "자동 갱신 설정"
},
{
  "url": "https://docs.whatap.io/java/dashboard-active-transaction",
  "title": "액티브 트랜잭션",
  "content": "트랜잭션 목록 필터링. 트랜잭션 목록 에서 URL 또는 IP 값을 검색해 필터링할 수 있습니다. 오른쪽 위에 URL / IP 텍스트 입력 상자에 필터링할 대상을 입력한 다음 엔터를 입력하거나 버튼을 선택하세요. 입력한 텍스트 값을 포함하는 트랜잭션 목록으로 필터링합니다. 필터링한 목록을 초기화하려면 오른쪽 위에 URL / IP 텍스트 입력 상자의 텍스트를 삭제한 다음 엔터를 입력하거나 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 목록 필터링"
},
{
  "title": "애플리케이션 대시보드",
  "url": "https://docs.whatap.io/java/dashboard",
  "content": "애플리케이션 대시보드. 자바(Java) 애플리케이션의 핵심 지표를 실시간으로 모니터링하고 과거 데이터를 조회할 수 있는 방법을 안내합니다. CPU, 메모리 사용량, 트랜잭션 상태 등의 정보를 포함하여 문제를 빠르게 식별하고 분석할 수 있는 대시보드 설정과 사용법을 확인할 수 있습니다. 에이전트의 연결 상태 확인, 분류별 에이전트 모니터링, 대시보드 위젯의 편집과 프리셋 관리 방법 등을 포함하고 있습니다. 홈 화면 > 프로젝트 선택 > 대시보드 > 애플리케이션 대시보드  애플리케이션 대시보드에서는 애플리케이션의 주요 지표들을 에이전트를 통해 수집하고 차트를 구성해 실시간으로 모니터링하고 과거의 데이터를 조회할 수 있습니다. 대시보드에 배치된 위젯들을 통해 애플리케이션의 문제를 빠르게 파악하고 분석할 수 있습니다. CPU, Memory를 제외한 일반적인 차트의 경우 안정적인 데이터는 파란색 계열로 표현되고, 문제로 식별되는 요소들은 붉은색 계열로 표시되어 현황을 쉽게 인지할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 대시보드"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "과거 데이터 조회하기. 대시보드에서는 실시간 모니터링 기능을 기본 제공하지만 과거 시간의 데이터를 조회할 수도 있습니다. 실시간 모드 비실시간 모드 화면 왼쪽 위에 시간 선택자에서 버튼을 선택하세요. 날짜 및 시간 영역을 클릭해 원하는 시간대를 설정하세요. 적용 버튼을 선택하세요. 사용자가 설정한 시간을 기준으로 대시보드에 배치한 위젯의 데이터를 갱신합니다. 실시간 모드로 전환하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "과거 데이터 조회하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "에이전트 연결 상태 확인하기. 화면 왼쪽 위, 시간 선택자의 오른쪽에서는 해당 프로젝트와 연결된 에이전트의 상태를 확인할 수 있는 정보를 제공합니다. 이를 통해 모니터링 대상 서버의 동작 여부를 바로 확인할 수 있습니다. Total : 프로젝트와 연결된 모든 에이전트의 수 Active : 활성화된 에이전트의 수 Inactive : 비활성화된 에이전트의 수 : 비활성화된 에이전트를 표시하거나 감출 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 연결 상태 확인하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "에이전트별 모니터링. 기본적으로 대시보드에는 모든 에이전트로부터 수집한 지표들을 차트에 표시하지만 에이전트별로 데이터를 조회할 수도 있습니다. 시간 선택자 아래에 위치한 에이전트를 하나 또는 둘 이상을 선택하세요. 선택한 에이전트의 지표들로 대시보드에 배치된 위젯의 데이터를 갱신합니다. 팁 에이전트를 하나 또는 둘 이상을 선택한 상태에서 다시 모든 에이전트를 선택하려면 선택을 해제하거나 Total 을 선택하세요. 노트 프로젝트에 연결된 에이전트의 수가 많을 경우 에이전트의 이름을 짧게 설정하는 것이 효율적입니다. 에이전트 이름 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트별 모니터링"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "분류별 에이전트 모니터링. 에이전트 설정을 통해 분류한 그룹 단위로 에이전트를 선택해 모니터링할 수 있습니다. 에이전트 : 개별 에이전트를 선택하거나 모두 선택할 수 있습니다. 종류별 : 에이전트 설정에서 whatap.okind 로 분류된 그룹 단위로 에이전트를 모니터링합니다. 서버별 : 에이전트 설정에서 whatap.onode 로 분류된 그룹 단위로 에이전트를 모니터링합니다. 종류별 에이전트 : 에이전트 설정에서 whatap.okind 로 분류된 에이전트 목록만을 모니터링합니다. 서버별 에이전트 : 에이전트 설정에서 whatap.onode 로 분류된 에이전트 목록만을 모니터링합니다. 노트 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "분류별 에이전트 모니터링"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "대시보드 위젯 편집하기. 대시보드에 배치한 위젯은 사용자가 원하는 크기로 조절할 수 있고, 원하는 위치에 배치할 수 있습니다. 불필요하다고 생각되는 위젯은 삭제하고 다시 추가할 수도 있습니다.",
  "product": "JAVA 모니터링",
  "header": "대시보드 위젯 편집하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 크기 조절하기. 위젯의 오른쪽 아래에 요소를 마우스로 클릭한 상태에서 원하는 크기로 드래그하세요. 균일한 가로, 세로 비율의 격자가 표시되고, 격자 단위로 위젯의 크기를 조절할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 크기 조절하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 이동하기. 위젯의 윗 부분으로 마우스 커서를 이동하면 커서 모양이 모양으로 변경됩니다. 이때 마우스 왼쪽 버튼을 클릭한 상태로 원하는 위치로 드래그하여 위젯을 이동할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 이동하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 삭제하기. 삭제하길 원하는 위젯에서 마우스 오른쪽 버튼을 클릭하세요. 삭제 버튼을 선택하면 해당 위젯이 대시보드에서 삭제됩니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 추가하기. 대시보드에서 빈 공간으로 마우스 커서를 이동한 다음 마우스 오른쪽 버튼을 클릭하세요. 팝업 메뉴에서 추가하려는 위젯을 선택하세요. 원하는 위치로 위젯을 배치하고 크기를 조절하세요. 노트 대시보드에 배치할 수 있는 위젯에 대한 자세한 내용은 다음 문서 를 참조하세요. 현재 추가할 수 있는 위젯은 고정적이지만 향후 업데이트를 통해 위젯 지원을 늘려갈 계획입니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 추가하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "프리셋. 대시보드에서 사용자가 설정한 위젯의 설정과 레이아웃 상태를 저장하고 불러올 수 있습니다. 기본 프리셋( Default )은 변경할 수 없으며, 원하는 형식으로 위젯의 크기를 조절하고, 배치해 새로운 프리셋을 만들 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "프리셋"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "새로운 프리셋 만들기. 대시보드에서 원하는 형식으로 위젯을 배치해 보세요. 크기를 조절하고 자주 확인하는 위젯만 배치할 수도 있습니다. 화면 오른쪽 위에 버튼을 선택하세요. 새로운 프리셋 이름을 입력하세요. 에이전트 선택 내역을 같이 저장하려면 에이전트 선택 내역 포함 을 선택하세요. 저장 버튼을 선택하세요. 프리셋 목록에서 새로 저장한 프리셋을 확인할 수 있습니다. 노트 새로 만든 프리셋에 변경 사항이 생겼다면 다시 프리셋을 저장해야 합니다. 버튼을 선택한 다음 같은 이름으로 프리셋을 저장하세요. 기존의 프리셋에 변경 사항을 덮어쓰기합니다. 대시보드의 변경 사항을 저장하지 않고 다른 메뉴로 이동하면 변경 사항은 저장되지 않습니다. 프리셋은 사용자 계정으로 저장되며 현재는 다른 사용자와 공유할 수 없습니다. 더 나은 기능을 제공하도록 업데이트 예정입니다.",
  "product": "JAVA 모니터링",
  "header": "새로운 프리셋 만들기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "프리셋 삭제하기. 사용하지 않는 프리셋이 있다면 프리셋 목록에서 삭제할 수 있습니다. 프리셋 목록에서 삭제하려는 항목의 오른쪽에 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "프리셋 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 옵션 이용하기. 위젯에 표시된 아이콘 버튼의 기능은 다음과 같습니다. : 주요 위젯에 대한 기능 및 정보를 확인할 수 있습니다. 병합 / 개별로 보기 : 해당 위젯 항목의 에이전트 데이터를 개별 또는 병합해 그래프로 표시합니다. 상세 : 해당 위젯 항목의 데이터를 에이전트별로 구분해 조회할 수 있는 모달 창이 나타납니다. 노트 위젯에 따라 제공되는 옵션은 다를 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "위젯 옵션 이용하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "위젯 알아보기. 정보 이 문서에서는 애플리케이션 대시보드 에 배치된 위젯에 대한 설명을 주로 다룹니다. 애플리케이션 대시보드 를 통해 트랜잭션 및 사용자, 서비스, 리소스 분석 방법에 대한 자세한 내용은 다음 문서를 참조하세요. 애플리케이션 대시보드 살펴보기 히트맵 트랜잭션 DB 연결 지연과 커넥션 풀",
  "product": "JAVA 모니터링",
  "header": "위젯 알아보기"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "에이전트 관련 위젯. 애플리케이션에 설치한 에이전트를 통해서 애플리케이션의 정보를 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 관련 위젯"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "애플리케이션 요약. 프로젝트에 등록한 애플리케이션의 실행 상태 및 개수, CPU 코어 수, Hosts 수를 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "애플리케이션 요약"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "트랜잭션 관련 위젯. 트랜잭션을 통해 확인할 수 있는 장애의 현황은 우선 응답시간을 통해 알 수 있습니다. 또한 진행 중인 트랜잭션이 종료되지 않는다면 이 또한 장애로 인식해야 합니다. 와탭은 진행 중인 상태의 시간에 따라 구간을 나누어 표시합니다. 파랑색(Normal) 은 응답 시간이 정상인 트랜잭션, 주황색(Slow) 은 응답 시간이 8초 정도의 느린 트랜잭션, 빨간색(Very slow) 은 응답 시간이 보통의 2배 이상으로 느린 트랜잭션을 의미합니다. 이를 통해 사용자는 직관적으로 가장 빨리 장애를 인지할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 관련 위젯"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "액티브 트랜잭션 스피드. 현재 진행 중인 트랜잭션(가운데 영역)과 종료된 트랜잭션(오른쪽 영역) 현황을 확인할 수 있습니다. 왼쪽에서 오른쪽으로 지나가는 물방울 모양의 아이콘은 트랜잭션을 의미합니다. 액티브 트랜잭션의 상태를 속도( Normal , Slow , Very Slow )로 색상으로 분류하여 우측 상단에 개수로 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "액티브 트랜잭션 스피드"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "액티브 트랜잭션. 액티브 트랜잭션 위젯에서는 진행 중인 트랜잭션을 아크 이퀄라이저 차트로 표현합니다. 지연 발생 현황을 에이전트별로 확인할 수 있습니다. 에이전트 수만큼 아크가 분할됩니다. 5초마다 현재 서버에서 처리 중인 요청의 수를 표현해서 해당 요청이 각각 어느 정도의 시간 동안 처리 중인지 알 수 있습니다. 5초 간격의 시간에 감지된 요청들은 위험 여부를 파악할 수 있도록 다음과 같이 색으로 분류합니다. 빨간색( Very Slow ): 8초 이상 주황색( Slow ): 3초 ~ 8초 파란색( Normal ): 0초 ~ 3초 파란색이 많이 표현되는 상황은 문제가 되지 않습니다. 이 중 일부가 주황색이나 빨간색으로 변경되는지 추이를 지켜봐야 합니다. 장애 상황에는 진행 중 트랜잭션 수가 증가하고 빨간색 비율이 높아집니다. 반면, 응답이 매우 빠른 시스템의 경우 처리하는 트랜잭션 수(TPS)는 높아도 진행 중인 트랜잭션 수는 낮을 수 있습니다. 왼쪽 위에는 진행 중인 트랜잭션이 가장 많은 에이전트 이름을 표시합니다. 가운데 숫자는 전체 에이전트의 액티브 트랜잭션 수의 합계입니다. 액티브 트랜잭션 둘레에 두 개의 바는 처리량(TPS)에 따라 3단계 속도로 차트 주변을 회전합니다. 분할된 아크 영역을 선택하면 해당 에이전트에서 진행 중인 트랜잭션 목록 팝업창이 나타납니다. 상세한 트랜잭션 정보를 확인하려면 트랜잭션 목록에서 원하는 항목을 하나 선택하세요. 노트 트랜잭션 목록에서 선택한 항목이 이미 종료된 트랜잭션일 경우 트랜잭션 보기 버튼을 선택하세요. 트랜잭션 정보 창이 나타납니다. 트랜잭션 정보 창에 대한 자세한 내용은 다음 문서 를 참조하세요. 트랜잭션에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "액티브 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "에이전트 액티브 트랜잭션. 액티브 트랜잭션 위젯은 에이전트 선택 옵션에서 선택한 기준에 따라 병합된 데이터를 차트에 표시합니다. 반면 에이전트 액티브 트랜잭션 위젯은 선택한 에이전트 분류 기준에 포함된 에이전트의 현황을 개별로 확인할 수 있습니다. 대시보드에서 마우스 오른쪽 버튼을 클릭한 다음 위젯 목록에서 에이전트 액티브 트랜잭션 위젯을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 액티브 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "액티브 스테이터스. 프로젝트 내의 모든 에이전트는 5초마다 액티브 트랜잭션 수를 수집함과 동시에 진행 상태를 수집합니다. 진행 상태는 METHOD , SQL , HTTPC , DBC , SOCKET 으로 분류할 수 있습니다. METHOD : 메소드를 수행 중인 상태입니다. 일반적인 상황으로 파란색으로 표시됩니다. SQL : SQL을 수행 중인 상태입니다. SQL 수치가 증가한다면 데이터베이스 서버와의 연결에 문제를 확인해 보세요. HTTPC : 외부 API를 호출 중인 상태입니다. HTTPC 수치가 증가한다면 외부와 연결된 서버의 응답이 제대로 이루어지지 않는다고 봐야 합니다. DBC : 트랜잭션이 Connection Pool로부터 새로운 Connection을 획득(get)하려는 상태입니다. DB Connection Pool의 개수가 부족하면 새로운 연결 요청이 발생할 때마다 지연이 되면서 성능 장애의 원인이 됩니다. 이 경우 DBC 수치가 증가합니다. 노트 DB 연결 지연과 관련한 자세한 내용은 다음 문서 를 참조하세요. SOCKET : 외부 시스템과의 TCP 연결 시도를 의미합니다. SOCKET 수치가 지속적으로 증가한다는 것은 외부 시스템과의 연결이 되지 않아 장애가 발생 중일 가능성이 높습니다.",
  "product": "JAVA 모니터링",
  "header": "액티브 스테이터스"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "히트맵. 히트맵 차트는 종료된 트랜잭션 응답시간을 분포도로 표현합니다. 가로축은 트랜잭션 종료 시간입니다. 세로축은 수행 시간입니다. 수행 시간이 긴 트랜잭션은 분포도 상단에 위치합니다. 히트맵 내의 차트 영역을 드래그하면 세부 트랜잭션 정보를 확인할 수 있는 트레이스 분석 창이 나타납니다. 트레이스 분석 에 대한 자세한 내용은 다음 문서 를 참조하세요. 정상 트랜잭션은 하늘색 → 파란색 → 남색 순으로 표현됩니다. 에러 트랜잭션은 노란색 → 주황색 → 빨간색 순으로 표현됩니다. 오른쪽 위에 위치한 숫자는 차트 내 트랜잭션 건 수 / 에러 건수 를 의미합니다. Y축 자동 버튼을 선택하면 수행 시간을 나타내는 Y축을 자동 조정합니다. 에러 버튼을 선택하면 에러 트랜잭션만 표시합니다. 또는 버튼을 선택해 5초 ~ 80초까지 차트를 확대/축소할 수 있습니다. 노트 오류가 발생하지 않았고 수행 시간 500ms 이하 트랜잭션의 세부 정보는 url 당 5분에 1건만 수집됩니다. TPS나 평균 응답시간 같은 통계정보에는 영향을 미치지 않습니다. 에이전트 설정을 통해 정책을 설정할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요. 히트맵 위젯을 통해 트랜잭션을 분석하는 과정은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "히트맵"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "서비스 관련 위젯. 서비스 관련 위젯을 통해 애플리케이션 성능 튜닝을 위한 지표로 활용할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "서비스 관련 위젯"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "Apdex. Application Performance Index(Apdex) 는 애플리케이션 성능 지표입니다. 웹 애플리케이션의 고객 만족도를 측정합니다. 사용자 만족도에 대한 지표로 활용할 수 있으며, 0 ~ 1 사이의 값을 갖습니다. (만족 횟수 + (허용 횟수 * 0.5)) / 전체 요청 수 만족 (Satisfied, S): 업무처리에 전혀 문제 없음 ≤ 1.2초 (만족 S 기본값) 허용 (Tolerating, T): 사용자가 지연을 느끼나 업무처리는 가능 ≤ 4.8초 (만족 S * 4) 불만 (Frustrated, F): 업무처리가 불가능 > 4.8초 (허용 T 초과 및 오류) 노트 만족 S 기본값은 관리 > 에이전트 설정 메뉴에서 변경할 수 있습니다. 설정 키 값은 apdex_time 입니다. 에이전트 버전 2.0 이상만 지원합니다.",
  "product": "JAVA 모니터링",
  "header": "Apdex"
},
{
  "title": "큐브",
  "url": "https://docs.whatap.io/java/cube",
  "content": "큐브. 큐브를 안내합니다. 홈 화면 > 프로젝트 선택 > 분석 > 큐브 국가별 접속, 히트맵, 트랜잭션, TOP 트랜잭션, TPS, 응답 시간, 자원 사용 정보를 제공합니다.  시간 경과에 따른 애플리케이션 성능 추세를 파악할 수 있습니다. 5분 간격으로 처리된 통계 데이터를 사용해 애플리케이션 성능의 변화를 빠르게 파악할 수 있습니다. 트래픽의 지리적 분포를 파악할 수 있습니다. 애플리케이션에 대한 트래픽 데이터를 통해 트래픽의 지리적 분포를 파악하고, 지역별 성능을 비교할 수 있습니다. 리소스 사용량을 파악할 수 있습니다. 애플리케이션이 사용하는 리소스 사용량을 파악하고 성능 저하의 원인을 분석할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "큐브"
},
{
  "url": "https://docs.whatap.io/java/cube",
  "title": "큐브",
  "content": "큐브란?. 와탭은 5분 단위로 만든 성능 통계를 큐브 라고 부릅니다. 큐브 분석은 큐브에 저장된 5분 단위 성능 데이터를 활용한 분석 기능입니다.",
  "product": "JAVA 모니터링",
  "header": "큐브란?"
},
{
  "url": "https://docs.whatap.io/java/cube",
  "title": "큐브",
  "content": " 큐브 셀렉트 패널. 왼쪽 영역의 큐브 셀렉트 패널에서 특정 시간 기준으로 큐브를 선택하세요. 큐브는 5분 단위로 저장되어 있기 때문에 특정 시간을 선택해야 합니다. 패널 관심 지표 TPS 응답시간 TX Error 건수 액티브 TX 건수 동시접속 사용자 큐브 표시색 큐브는 선택된 지표의 수치에 따라 다른 색으로 표현됩니다. 남색 : 높은 수치 하늘색 : 낮은 수치",
  "product": "JAVA 모니터링",
  "header": " 큐브 셀렉트 패널"
},
{
  "url": "https://docs.whatap.io/java/cube",
  "title": "큐브",
  "content": " 애플리케이션 셀렉트. 상단 영역의 애플리케이션 셀렉트 옵션을 통해 특정 애플리케이션의 데이터를 선택할 수 있습니다. 오른쪽의 버튼을 선택하면 다음과 같이 선택 가능한 전체 애플리케이션을 확인할 수 있습니다. 전체 선택 : 모든 애플리케이션을 조회합니다. 기본은 전체 선택 과 활성 애플리케이션 이 선택되어 있습니다. 활성 애플리케이션 : 애플리케이션 중 활성화된 애플리케이션을 지정해 조회합니다. 선택된 것만 보기 : 애플리케이션 중 사용자가 지정한 해당 애플리케이션만 조회합니다. 검색 : 애플리케이션이 많은 경우 입력창을 통해 해당 애플리케이션을 검색할 수 있습니다. 숫자 / 숫자 : 지정한 애플리케이션 개수 / 전체 애플리케이션 개수 를 표시합니다.",
  "product": "JAVA 모니터링",
  "header": " 애플리케이션 셀렉트"
},
{
  "url": "https://docs.whatap.io/java/cube",
  "title": "큐브",
  "content": " 큐브 데이터. 영역에서 해당 큐브 데이터를 히트맵 , 국가 , TPS , 인스턴스 응답 시간 , CPU , 동시접속 사용자 , 상위 TX , Heap 사용량 등의 차트를 통해 확인할 수 있습니다. 히트맵 큐브 시간 동안 트랜잭션 분포를 보여줍니다. 트레이스 상세 분석이 가능합니다. 버튼을 선택하면 큐브 시간 동안 탑 스택 과 유니크 스택 을 조회할 수 있습니다. 노트 스택 분석 기능을 사용할 수 있는 애플리케이션은 Java 와 Python 입니다. 국가 클라이언트 아이피를 기준으로 국가를 매핑하여 어느 국가에서 트랜잭션이 들어오는지를 보여줍니다. 지도의 색은 트랜잭션의 양을 상대적으로 표시합니다. 노트 와탭은 클라이언트와 관련한 정보를 기본 저장합니다. 사용자 데이터 수집과 관련한 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요. TPS Tansaction Per Second( TPS )는 초당 처리한 트랜잭션 건수를 의미합니다. 인스턴스 응답 시간 트랜잭션 평균 응답시간입니다. CPU 프로젝트 내 애플리케이션(에이전트)를 IP로 정렬하여 사용량이 많은 서버의 CPU를 바 차트로 보여줍니다. 동시접속 사용자 실시간 브라우저 사용자 수를 보여줍니다. 상위 TX 호출 건수가 많은 트랜잭션 5건을 보여줍니다. 트랜잭션 통계에서는 좀 더 상세한 데이터를 확인할 수 있습니다. Heap 사용량 애플리케이션(인스턴스) 중 힙 메모리 사용량이 많은 순서대로 인스턴스를 정렬해 표시합니다. 노트 차트 상단 오른쪽의 아이콘을 선택하면 병합 선형 차트를 제공합니다. 차트 상단 오른쪽의 아이콘을 선택하면 개별 선형 차트를 제공합니다. 차트 상단 오른쪽의 아이콘을 선택하면 바형 차트를 제공합니다. 노트 WhaTap uses the IP2Location LITE database for IP geolocation .",
  "product": "JAVA 모니터링",
  "header": " 큐브 데이터"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "키워드 하이라이트 삭제하기. 하이라이트 목록에서 이용하지 않는 항목을 삭제하려면 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "키워드 하이라이트 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "테이블 컬럼 표시하거나 숨기기. 테이블 오른쪽 위에 버튼을 선택하세요. 드롭다운 메뉴에서 컬럼 설정 을 선택하세요. 컬럼 설정 창이 나타나면 컬럼 추가 섹션에서 원하는 항목을 선택하거나 선택을 해제하세요. 모든 설정을 완료한 다음 확인 버튼을 선택하세요. 설정한 내용이 테이블에 적용됩니다.",
  "product": "JAVA 모니터링",
  "header": "테이블 컬럼 표시하거나 숨기기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "테이블 컬럼 순서 바꾸기. 테이블 오른쪽 위에 버튼을 선택하세요. 드롭다운 메뉴에서 컬럼 설정 을 선택하세요. 컬럼 설정 창이 나타나면 컬럼 순서 설정 섹션에서 원하는 항목을 드래그해서 순서를 변경하세요. 모든 설정을 완료한 다음 확인 버튼을 선택하세요. 설정한 내용이 테이블에 적용됩니다.",
  "product": "JAVA 모니터링",
  "header": "테이블 컬럼 순서 바꾸기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "테이블 콘텐츠 표시 설정. 테이블 오른쪽 위에 버튼을 선택하세요. 드롭다운 메뉴에서 테이블 콘텐츠 설정 을 선택하세요. 다음 옵션을 설정하세요. 콘텐츠 표시 여부 : 테이블 목록에 표시하는 콘텐츠 표시 여부를 선택하세요. 태그 관리 : 테이블 목록에 표시하고 싶은 태그를 선택할 수 있습니다. 보이지 않도록 설정하거나 순서를 변경할 수 있습니다. 모든 설정을 완료한 다음 확인 버튼을 선택하세요. 설정한 내용이 테이블에 적용됩니다.",
  "product": "JAVA 모니터링",
  "header": "테이블 콘텐츠 표시 설정"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "HTTP 파라미터 조회. 테이블 뷰 탭에서 해당 트랜잭션의 HTTP 파라미터를 조회할 수 있습니다. 페이지 아래로 스크롤해 트랜잭션 수행의 가장 마지막 단계로 이동하세요. HTTP 파라미터 항목을 선택하세요. HTTP-PARAMETERS 창이 나타나면 비밀번호 버튼을 선택하세요. 설정한 Param Key를 입력하세요. 가려진 매개 변수를 확인할 수 있습니다. 노트 HTTP 파라미터와 관련한 에이전트 설정은 다음 문서 를 참조하세요. 비밀번호 : 복호화된 파라미터 값을 확인할 수 있습니다. 비밀번호는 WHATAP_HOME /security.conf ( paramkey.txt ) 파일 내 6자리 문자열입니다. 다른 문자열로 변경 가능합니다. SQL 변수 조회, HTTP 쿼리 조회, Thread 중지에 필요합니다. 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "HTTP 파라미터 조회"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "SQL 파라미터 조회. 테이블 뷰 탭에서 SQL 스텝을 선택하거나 트리 뷰 탭에서 버튼을 선택하세요. 파라미터를 조회할 수 있는 SQL 창이 나타납니다. 비밀번호 : 복호화된 파라미터 값을 확인할 수 있습니다. 비밀번호는 WHATAP_HOME /security.conf ( paramkey.txt ) 파일 내 6자리 문자열입니다. 다른 문자열로 변경 가능합니다. 노트 비밀번호 는 SQL 변수 조회, HTTP 쿼리 조회, Thread 중지에 필요합니다. 자세한 내용은 다음 문서 를 참조하세요. SQL 포맷팅 : SQL 문장을 들여쓰기 및 포맷팅하여 가독성을 높일 수 있습니다. : SQL 문장을 클립보드에 복사할 수 있습니다. 통계 : 통계/보고서 > 통계 메뉴의 SQL 탭으로 이동합니다. 팁 SQL 변수와 HTTP 쿼리를 조회하려면 다음 옵션을 에이전트 설정에 추가하세요. SQL 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요. HTTP 파라미터 정보 기록과 관련한 에이전트 설정은 다음 문서 를 참조하세요. whatap.conf # SQL 파라미터 조회 옵션: 옵션이 적용되면 SQL 파라미터를 암호화하여 수집합니다. profile_sql_param_enabled = true # HTTP 파라미터 조회 옵션: 옵션이 적용되면 HTTP 쿼리 파라미터를 암호화하여 수집합니다. profile_http_parameter_enabled = true",
  "product": "JAVA 모니터링",
  "header": "SQL 파라미터 조회"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "테이블 컬럼 설정하기. 트랜잭션 목록에서 테이블 헤더 컬럼을 감추거나 원하는 항목을 추가할 수 있습니다. 컬럼 순서를 변경할 수도 있습니다. 컬럼 설정 버튼을 선택하세요. 노트 설정을 완료한 다음에는 확인 버튼을 선택해야 설정 사항이 테이블에 반영됩니다. 검색란에 텍스트를 입력해 원하는 컬럼 항목을 검색할 수 있습니다. 입력한 텍스트와 매칭되는 컬럼 항목만 표시됩니다.",
  "product": "JAVA 모니터링",
  "header": "테이블 컬럼 설정하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "컬럼 추가하기. 목록에서 테이블 헤더 컬럼으로 추가할 항목을 선택하세요. 모든 항목을 추가하려면 전체 선택 을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "컬럼 추가하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "컬럼 삭제하기. 목록에서 삭제할 컬럼 항목의 체크 박스를 선택 해제하세요. 또는 목록에서 삭제할 항목의 오른쪽에 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "컬럼 삭제하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "컬럼 순서 변경하기. 목록에 순서를 변경할 항목을 드래그해서 원하는 위치로 이동할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "컬럼 순서 변경하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "설정 사항 초기화하기. 변경 사항은 모두 취소하고 초기화하려면 초기화 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "설정 사항 초기화하기"
},
{
  "url": "https://docs.whatap.io/java/dashboard-hitmap-trace",
  "title": "히트맵 - 트레이스 분석",
  "content": "조회 데이터 다운로드. 테이블에 출력된 데이터를 txt 파일 형식으로 다운로드하려면 TXT 버튼을 선택하세요.",
  "product": "JAVA 모니터링",
  "header": "조회 데이터 다운로드"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "TPS. Tansaction Per Second ( TPS )는 초당 처리한 트랜잭션 건수를 의미하며 서비스 성능 지표의 기준이 됩니다. 5초마다 처리한 트랜잭션의 수를 초당 건수로 환산해 차트로 표현합니다. 최근 10분간의 TPS를 보여줍니다. 노트 TPS, 응답시간, CPU 사용률 분석에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "TPS"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "평균 응답시간. 애플리케이션 서버가 사용자에게 요청 결과를 반환하는 데 걸리는 시간을 실시간으로 모니터링합니다. 평균 응답시간 은 튜닝 지표로서 의미를 가집니다. 와탭의 모니터링 서비스는 5초 간격으로 트랜잭션의 평균 응답 시간을 계산합니다. 노트 TPS, 응답시간, CPU 사용률 분석에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "평균 응답시간"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "시스템 CPU. 애플리케이션 서버의 CPU 사용량입니다. 실시간으로 CPU 사용량 변화 추이를 파악할 수 있습니다. 노트 TPS, 응답시간, CPU 사용률 분석에 대한 자세한 내용은 다음 문서 를 참조하세요. 각 서버당 사용할 수 있는 최대 메모리와 현재 메모리를 표시해 위험 수치에 있는 서버를 확인할 수 있습니다. 시간에 따른 메모리 사용량 변화를 실시간으로 볼 수 있습니다. 메모리 라인 차트는 보통 계속해서 물결칩니다. 애플리케이션 서버가 요청을 처리하기 위해 메모리를 사용할 때 증가합니다. GC(Garbage Collection)를 통해서 메모리를 정리할 경우에는 감소합니다. 힙 메모리 지표는 평균값을 사용해 표기합니다. 팁 힙 메모리 차트 분석에 대한 자세한 내용은 다음 링크를 참조하세요. 월간 와탭 : 모니터링에 주목해야할 지표 Java 힙 메모리 차트 분석 : Ch.1 힙차트 관찰하기 JAVA 힙메모리 차트 분석 : Ch.2 메모리 릭, 그리고 힙덤프 분석",
  "product": "JAVA 모니터링",
  "header": "시스템 CPU"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "동시접속 사용자. 실시간 브라우저 사용자 수를 보여줍니다. 5초마다 최근 5분 이내에 트랜잭션을 일으킨 사용자를 중복없이 카운팅해 표시합니다. 사용자 브라우저의 IP를 기반으로 카운팅합니다. 노트 에이전트 설정에서 사용자 구분을 위해 IP를 사용하거나 쿠키를 사용할 수 있습니다. 자세한 내용은 다음 문서 를 참조하세요. 일반적으로 접속 사용자는 현재 네트워크로 접속해 연결된 사용자를 의미합니다. 하지만 웹 시스템은 비 연결 네트워크를 사용하기 때문에 다릅니다. 접속되어 있다는 의미보다는 최근 요청을 보낸 사용자가 측정 대상이 될 수 있습니다. 실시간(동시접속) 사용자는 같은 시간대에 시스템을 사용하고 있는 사용자를 의미합니다. 실시간(동시접속) 사용자를 산정하거나 측정하는 방식은 다양합니다. 사용자 수는 단순히 합산하는 것이 아니라 HyperLogLog 로 산출합니다. HyperLogLog 는 매우 적은 메모리로 집합의 원소 개수를 추정하는 확률적 자료 구조를 의미합니다.",
  "product": "JAVA 모니터링",
  "header": "동시접속 사용자"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "1일 기준 비교 위젯. 노트 All APPS. 태그가 표시된 위젯은 항상 모든 에이전트에 대한 데이터를 표시합니다.",
  "product": "JAVA 모니터링",
  "header": "1일 기준 비교 위젯"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "금일 TPS. 금일 하루 동안의 TPS를 시간대별로 표시합니다. 어제 동시간대의 TPS(회색)와 비교해 확인할 수 있습니다. 버튼을 클릭하면 통계/보고서 > 일자별 애플리케이션 현황 메뉴로 이동합니다.",
  "product": "JAVA 모니터링",
  "header": "금일 TPS"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "금일 사용자. 하루 동안의 동시접속 사용자 수를 시간대별로 나타낸 지표입니다. 어제 동시간대의 사용자 수(회색)와 비교해 확인할 수 있습니다. 버튼을 클릭하면 통계/보고서 > 일자별 애플리케이션 현황 메뉴로 이동합니다.",
  "product": "JAVA 모니터링",
  "header": "금일 사용자"
},
{
  "url": "https://docs.whatap.io/java/dashboard",
  "title": "애플리케이션 대시보드",
  "content": "실시간 알림 확인하기. 화면 오른쪽 위에 실시간 알림 버튼을 선택하면 최근 발생한 이벤트를 확인할 수 있습니다. 토글 메뉴를 클릭해 브라우저 알림을 켜거나 끌 수 있습니다. 노트 화면 가장 위에 고정 메뉴 영역의 기본 요소들에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "실시간 알림 확인하기"
},
{
  "title": "알림 설정하기",
  "url": "https://docs.whatap.io/java/apm-set-notice",
  "content": "알림 설정하기. 이벤트 조건을 설정하고 다양한 형태로 알림을 받을 수 있습니다. 알림 설정하기이벤트 조건을 설정하고 이메일, SMS, 메신저, App Push 등 다양한 경로로 알림을 수신할 수 있습니다. 에이전트와 수집 서버의 통신 두절 및 애플리케이션 자원 사용률, 액티브 트랜잭션, 에러, 응답 지연, 응답 분포 이상에 대한 알림 설정이 가능합니다. 애플리케이션 알림에서 수용하기 어려운 조건의 알림 설정은 태그 카운트 알림 기능을 통해 제공합니다. 머신 러닝 기반 AI 알림 설정을 통해 히트맵 패턴을 감지해 알림 기능을 제공합니다. AI 모듈이 애플리케이션 실행 분포 패턴을 판단해 알림을 보냅니다. 복잡한 조건 없이 이슈 상황을 빠르고 정확하게 인지할 수 있습니다. 이벤트 설정 메뉴를 통해 임계치 기반 알림 조건 및 수신 설정을 할 수 있습니다. 이벤트 수신 설정 메뉴에서는 개인별 알림 수신 채널 및 시간대를 설정할 수 있습니다. 이벤트 기록 메뉴에서는 알림 발생 기록을 조회할 수 있습니다. 다음은 애플리케이션 모니터링에서 경고 알림에 대한 동영상 소개입니다. 노트 다른 계정에 대한 알림을 설정하려면 수정, 알림 설정, 멤버 관리 권한 중 하나가 있어야 합니다. 이벤트를 추가하거나 설정하려면 알림 설정 권한이 있어야합니다. 권한 체계에 대한 자세한 내용은 다음 문서를 참조하세요. 경고 알림과 관련해 모니터링 플랫폼별 지원되는 이벤트 종류를 확인하려면 다음 문서를 참조하세요. ",
  "product": "JAVA 모니터링",
  "header": "알림 설정하기"
},
{
  "title": "멀티 트랜잭션 추적",
  "url": "https://docs.whatap.io/java/analysis-trace-mtx",
  "content": "멀티 트랜잭션 추적. 시스템 내 또는 시스템 간에 발생하는 다양한 호출 관계를 한 눈에 파악하고 어느 부분에서 문제가 발생했는지 식별하여 개선할 수 있도록 트랜잭션과 트레이스 정보를 제공합니다. 멀티 트랜잭션은 다른 에이전트나 프로젝트와 연관된 트랜잭션을 의미합니다. 와탭 프로젝트에 등록된 애플리케이션 서비스 간의 호출을 추적하는 것이 멀티 트랜잭션 추적입니다. 정보Java 에이전트는 세 개의 HTTP 헤더 키값(x-wtap-po, x-wtap-mst, x-wtap-sp1)으로 멀티 트랜잭션을 추적합니다. 게이트웨이를 통과하는 HTTP 트랜잭션이 연계 추적이 안 된다면 HTTP 헤더 조건을 확인하세요. 노트멀티 트랜잭션 활성화멀티 트랜잭션을 추적하려면 관리 > 에이전트 설정 메뉴에서 mtrace_enabled 옵션을 true로 설정하세요. 에이전트 설정에 대한 자세한 내용은 다음 문서를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션 추적"
},
{
  "url": "https://docs.whatap.io/java/analysis-trace-mtx",
  "title": "멀티 트랜잭션 추적",
  "content": "멀티 트랜잭션 ID 확인하기. 멀티 트랜잭션 추적 메뉴를 이용하려면 MTID (Multi Transaction ID)가 필요합니다. 다음 과정을 통해 MTID 값을 확인할 수 있습니다. 분석 > 히트맵 메뉴에서 차트 영역을 드래그하세요. 드래그한 차트 영역의 트랜잭션 정보가 다음과 같이 하단 TX 트레이스 목록에 나타납니다. 아이콘이 표시된 트레이스를 선택하면 트랜잭션 정보 창이 나타납니다. 레코드 요약 탭에서 멀티 트랜잭션 ID 값을 확인할 수 있습니다. 노트 트랜잭션에서 외부 호출을 하는 경우에도 동일한 멀티 트랜잭션 ID 가 생성됩니다. 서비스별로 프로젝트가 분리되어 있더라도 처음 발급한 멀티 트랜잭션 ID 를 통해 애플리케이션 간의 모든 트랜잭션을 확인할 수 있습니다. 트랜잭션 정보 창을 활용한 트랜잭션 트레이스 상세 분석에 관한 자세한 내용은 다음 문서 를 참조하세요. 트랜잭션 정보 창에서 멀티 트랜잭션 ID 를 선택하면 멀티 트랜잭션 탭으로 이동합니다. 시스템 내 또는 시스템 간에 발생하는 다양한 호출 관계를 한 눈에 파악하고 어느 부분에서 문제가 발생했는지 식별하여 개선할 수 있도록 트랜잭션과 트레이스 정보를 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션 ID 확인하기"
},
{
  "url": "https://docs.whatap.io/java/analysis-trace-mtx",
  "title": "멀티 트랜잭션 추적",
  "content": "멀티 트랜잭션 추적 기능 이용하기. 분석 > 멀티 트랜잭션 추적 메뉴로 이동하세요. 트랜잭션 정보 창에서 확인한 MTID 값을 MTID / CUSTID 조회 항목에 입력하세요. 조회할 날짜와 프로젝트를 선택하세요. 화면 아래에 적용 버튼을 선택하세요. 오른쪽 차트 탭에 각 트랜잭션의 호출 관계를 파악할 수 있는 다이어그램이 표시됩니다.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션 추적 기능 이용하기"
},
{
  "title": "분석",
  "url": "https://docs.whatap.io/java/analysis-report-intro",
  "content": "분석. Java 환경의 애플리케이션 성능을 분석하고 발생할 수 있는 문제에 대처할 수 있습니다. 애플리케이션 환경을 다양한 관점에서 분석할 수 있는 메뉴를 제공합니다. 부하가 높거나 성능이 저하된 구간을 파악할 수 있으며, 다양한 성능 지표를 제공해 일별 현황을 확인할 수 있습니다. 또한 성능 측정을 위한 트랜잭션을 추적하고 분석할 수 있습니다. 와탭에서 제공하는 분석 기능을 통해 주요 성능을 분석하고, 문제를 파악해 발생할 수 있는 장애에 대처할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "분석"
},
{
  "title": "오픈소스 추적",
  "url": "https://docs.whatap.io/java/agent-weaving",
  "content": "오픈소스 추적. 자바(Java) 애플리케이션에서 사용하는 프레임워크나 오픈소스 라이브러리를 에이전트를 통해 추적하는 설정 방법을 제공합니다. Java 에이전트 설정 파일(whatap.conf)에 weaving 옵션을 추가하여 설정하며, 다양한 프레임워크 및 라이브러리 버전에 대응하는 방법을 안내합니다. 오픈소스 추적자바(Java) 애플리케이션에서 사용하는 프레임워크나 오픈소스 라이브러리를 에이전트를 통해 추적하는 설정 방법을 제공합니다. 이는 Java 에이전트 설정 파일(whatap.conf) 파일에 weaving 옵션을 추가하여 설정하며, 다양한 프레임워크 및 라이브러리 버전에 대응하는 방법을 안내합니다. ${WHATAP_HOME}/whatap.confweaving=   Java 에이전트를 통해 추적하고 있는 프레임워크 또는 오픈소스에 대한 설정 방법은 다음을 참조하세요. 프레임워크/오픈소스버전설정에이전트 최소 버전비고apache-camel-cxfcamel-cxf-3.15 이상weaving=camel-cxf-3.15v2.2.27-apache-camel-sedacamel-seda-2.22 이상weaving=camel-seda-2.22v2.2.20-camel-seda-3.2 이상weaving=camel-seda-3.2v2.2.20-db2db2-11.5 이상weaving=db2-11.5v2.2.18-feign-clientfeign-11 이상weaving=feign-11v2.2.6-hystrixhystrix-1.5 이상weaving=hystrix-1.5v2.0_21-kafkakafka-clients-2.4.0 이상weaving=kafka-clients-2.4.0v2.2.15-reactor-kafka-1.3 이상weaving=reactor-kafka-1.3v2.2.5-redis(jedis)jedis-2.9.3 이상weaving=jedis-2.9.3v2.0_33-jedis-3.2 이상weaving=jedis-3.2v2.0_09-redis(lettuce)lettuce-5.1 이상weaving=lettuce-5.1v2.2.7-lettuce-6.2 이상weaving=lettuce-6.2v2.2.16-mongodb, mongodb-reactivemongodb-3.8.2 이상weaving=mongodb-3.8.2v2.2.11-mongodb-4.0.3 이상weaving=mongodb-4.0.3v2.2.11-mongodb-4.4 이상weaving=mongodb-4.4v2.2.11-mongodb-4.8 이상weaving=mongodb-4.8v2.2.11-mule frameworkmule-3.9.5 이상weaving=mule-3.9.5v2.2.23-mule-4.5 이상weaving=mule-4.5v2.2.23-okhttpokhttp-2.7 이상weaving=okhttp-2.7v2.0_15-okhttp3 이상weaving=okhttp3v2.0_15-okhttp3-4.4weaving=okhttp3-4.4v2.2.9-quarkus, quarkus-reactivequarkus-reactive-1.13 이상weaving=quarkus-reactive-1.13v2.2.19-quarkus-reactive-2.10 이상weaving=quarkus-reactive-2.10v2.2.19-rabbitmqreactor-rabbitmq-1.2 이상weaving=reactor-rabbitmq-1.2v2.0_06-retrofitretrofit2-2.5 이상weaving=retrofit-2.5-(배포 예정)ribbonribbonweaving=ribbonv2.2.10-spring-bootspring-boot-2.1 이상weaving=spring-boot-2.1v2.2.23kafka-clients, r2dbc-mysql, spring-cloud-gateway, spring-webflux, tomcat9, undertow 포함spring-boot-2.5 이상weaving=spring-boot-2.5v2.2.9kafka-clients, r2dbc-mysql, redis(lettuce), spring-cloud-gateway, spring-webflux, tomcat9, undertow 포함spring-boot-2.7 이상weaving=spring-boot-2.7v2.2.9jasync-r2dbc-mysql, kafka-clients, r2dbc-mysql, redis(lettuce), spring-cloud-gateway, spring-webflux, tomcat9, undertow 포함spring-boot-3.0 이상weaving=spring-boot-3.0v2.2.9jasync-r2dbc-mysql, kafka-clients, r2dbc-mysql, redis(lettuce), spring-cloud-gateway,spring-webflux, tomcat10, undertow 포함tomcattomcat9weaving=tomcat9v2.2.5-tomcat10weaving=tomcat10v2.2.5-undertowundertow-2.3 이상weaving=undertow-2.3v2.2.14- 프레임워크나 오픈소스로 spring-boot-3.x, feign-client-11, okhttp3-4.4 사용 시 다음과 같이 옵션을 설정하세요. whatap.confweaving=spring-boot-3.0,feign-11,okhttp3-4.4",
  "product": "JAVA 모니터링",
  "header": "오픈소스 추적"
},
{
  "title": "스택",
  "url": "https://docs.whatap.io/java/analysis-apm",
  "content": "스택. 애플리케이션 분석을 안내합니다. 홈 화면 > 프로젝트 선택 > 분석 > 스택 와탭 모니터링 서비스 초기 화면에서 프로젝트를 선택한 다음 프로젝트 메뉴 하위에 분석 > 스택을 선택하세요. 탑 스택과 유니크 스택, 액티브 스택을 확인할 수 있습니다. 노트스택 분석 기능을 사용할 수 있는 애플리케이션은 Java와 Python, .NET입니다. 와탭은 10초(기본값) 간격으로 수집한 스레드 스택을 활용하여 메소드 레벨의 성능 지연 구간을 분석합니다.  예시 스택에서 탑 라인은 socketRead0 입니다. java.net.SocketInputStream.socketRead0(Native Method) 탑 라인은 덤프를 수행할 스레드가 해당 메소드를 수행 중이라는 것을 의미합니다. 순간적으로 잡혔을 가능성도 있지만 확률적으로 해당 모듈 처리 시간의 합의 비율만큼 스택에 나타납니다. 이 탑 라인 메소드의 빈도를 계산하여 메소드 레벨의 성능을 판단할 수 있습니다. 와탭은 탑 라인 빈도 통계를 탑 스택(Top Stack)이라고 합니다.  탑 스택 분석을 통해 도출된 메소드를 어떤 메소드가 호출했는지에 대한 빈도를 분석할 수 있습니다.  탑 스택 계층 분석에서는 원래 액티브 스택을 확인하기 어려웠습니다. 따라서 와탭은 액티브 스택(Active Stack)을 조회할 수 있도록 동일 스택을 모아서 유니크 스택(Unique Stack)이라는 조회 기능을 제공합니다.",
  "product": "JAVA 모니터링",
  "header": "스택"
},
{
  "title": "CPU/메모리/디스크 사용량 수집",
  "url": "https://docs.whatap.io/java/agent-usage",
  "content": "CPU/메모리/디스크 사용량 수집. 자바(Java) 에이전트가 CPU, 메모리, 디스크 사용량을 수집하는 방법을 안내합니다. 자바(Java)의 JMX 라이브러리를 기본적으로 활용하며, 필요에 따라 Linux의 proc 디렉터리나 oshi, sigar 라이브러리를 통한 성능 지표 수집 방법을 확인할 수 있습니다. CPU/메모리/디스크 사용량 수집Java 에이전트가 CPU, 메모리, 디스크 사용량을 수집하는 방법을 안내합니다. 자바(Java)의 JMX 라이브러리를 기본적으로 활용하며, 필요에 따라 Linux의 proc 디렉터리나 oshi, sigar 라이브러리를 통한 성능 지표 수집 방법을 확인할 수 있습니다. linux_proc_stat_enabled Boolean 기본값 false CPU, 메모리, 디스크 사용량을 Linux의 proc 디렉터리에서 수집할지 여부를 설정합니다. oshi_enabled Boolean Java Agent v2.1.0 or later 기본값 false CPU, 메모리, 디스크 사용량을 측정할 때 oshi 라이브러리 사용 여부를 설정합니다. oshi_netstat_enabled Boolean Java Agent v2.2.31 or later 기본값 false netstat 지표 수집 여부를 설정합니다. Maximum Transmission Unit(MTU) 지표가 추가됩니다. sigar_enabled Boolean CPU, 메모리, 디스크 사용량을 측정할 때 sigar 라이브러리 사용 여부를 설정합니다. 노트whatap.agent.2.1.0 버전 미만에서 기본값은 true이며, whatap.agent.2.1.0 버전 이상에서는 기본값이 false입니다. ",
  "product": "JAVA 모니터링",
  "header": "CPU/메모리/디스크 사용량 수집"
},
{
  "title": "설치 문제 해결",
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "content": "설치 문제 해결. 자바(Java) 에이전트 설치 시 발생할 수 있는 다양한 문제들과 이를 해결하기 위한 구체적인 지침을 제공합니다. 방화벽 설정, SpringBoot 및 Tomcat JMX 설정, OSGI 프레임워크 사용 서버 설정, Log Manager 및 MBeanServerBuilder 에러, Permission 오류, Sigar 라이브러리 문제 등 다양한 상황에 대한 해결책을 안내합니다. ",
  "product": "JAVA 모니터링",
  "header": "설치 문제 해결"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "방화벽 설정 확인. 와탭의 데이터 수집 서버에 대한 TCP 아웃바운드 정책을 설정하지 않으면 모니터링 정보를 전송할 수 없습니다. 방화벽 차단 을 해제 하세요. telnet 명령을 사용해 \"Connected to IP \"를 확인하세요. $ telnet 52.193 .60.176 6600 Trying 52.193 .60.176 .. . Connected to 52.193 .60.176. Escape character is '^]' . 노트 수집 서버 정보는 와탭 모니터링 서비스 에서 해당 프로젝트를 선택한 다음 관리 > 에이전트 설치 메뉴에서 확인할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "방화벽 설정 확인"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "SpringBoot 2.2 버전 이상, Tomcat JMX가 off 상태. SpringBoot 2.2 버전 이상에서 Embedded Tomcat을 사용하는 경우 기본값으로 JMX 관련 기능이 동작하지 않습니다. 이 경우 JMX 기능을 활성화하세요. 관련 링크 application.properties spring.jmx.enabled = true server.tomcat.mbeanregistry.enabled = true # tomcat embedded인 경우 # application.yml spring : jmx : enabled : true server : tomcat : mbeanregistry : enabled : true #tomcat embedded인 경우",
  "product": "JAVA 모니터링",
  "header": "SpringBoot 2.2 버전 이상, Tomcat JMX가 off 상태"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "OSGI 프레임워크 사용 애플리케이션 서버의 경우. OSGI 프레임워크 구조의 애플리케이션 서버인 경우 JVM 옵션에 에이전트 패키지 prefix(whatap)를 등록하세요. Jboss EAP 6.0 버전 이상, Jboss AS 7.0 버전 이상, Wildfly 8.0 버전 이상, IBM WebSphere AS 7.0 버전 이상 등이 해당합니다.",
  "product": "JAVA 모니터링",
  "header": "OSGI 프레임워크 사용 애플리케이션 서버의 경우"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "JBoss AS, Wildfly, JBoss EAP 6.0 이상. 다음 파일에 prefix를 등록하세요. $JBOSS_HOME/bin/standalone.conf(domain.conf) -Djboss.modules.system.pkgs=whatap",
  "product": "JAVA 모니터링",
  "header": "JBoss AS, Wildfly, JBoss EAP 6.0 이상"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "WebSphere. JVM 옵션으로 다음 내용을 추가하세요. -Dcom.ibm.ws.classloader.server.alwaysAllowedPackages = whatap 기본값으로 '*'로 지정된 경우 별도 설정이 필요 없습니다. 설정 위치는 WebSphere 를 참조합니다. security.policy 권한을 다음과 같이 추가하세요. $WEBSPHERE_HOME/properties/server.policy || $WEBSPHERE_PROFILE_HOME/properties/server.policy grant codeBase \"file:$WHATAP_HOME/-\" { permission java . security . AllPermission ; } ;",
  "product": "JAVA 모니터링",
  "header": "WebSphere"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "Log Manager 관련 에러. JBoss AS 7.0 버전 이상, JBoss EAP 6.0 버전 이상에서 Log Manager 관련 에러가 발생한다면 JVM 옵션을 추가합니다. -Djava.util.logging.manager 항목에 Log Manager package 명을 설정하세요. -Xbootclassloader 항목에 JBoss Log Manager JAR file을 설정하세요. (JBoss_Path)/bin/standalone.conf(domain.conf) # Specify the exact Java VM executable to use. # if [ \"x $JBOSS_MODULES_SYSTEM_PKGS \" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS= \"org.jboss.byteman,org.jboss.logmanager,whatap\" fi ... # Specify options to pass to the Java VM. # if [ \"x $JAVA_OPTS \" = \"x\" ]; then JAVA_OPTS= \"-Xms1303m -Xmx1303m -Djava.net.preferIPv4Stack=true\" JAVA_OPTS= \" $JAVA_OPTS -Djboss.modules.system.pkgs= $JBOSS_MODULES_SYSTEM_PKGS -Djava.awt.headless=true\" JAVA_OPTS= \" $JAVA_OPTS -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Xbootclasspath/p:/home/vagrant/EAP-7.0.0/modules/system/layers/base/org/jboss/logmanager/main/jboss-logmanager-2.0.3.Final-redhat-1.jar\" else echo \"JAVA_OPTS already set in environment; overriding default settings with values: $JAVA_OPTS \" fi",
  "product": "JAVA 모니터링",
  "header": "Log Manager 관련 에러"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "MBeanServerBuilder 에러가 발생하는 경우. JBoss 5.0 버전 이하에서 MBeanServerBuilder 관련 에러가 출력된 경우 JVM 옵션을 추가하세요. (JBoss_Path)/bin/run.conf # Specify options to pass to the Java VM. # if [ \"x $JAVA_OPTS \" = \"x\" ]; then JAVA_OPTS= \"-Xms128m -Xmx512m -XX:MaxPermSize=256m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000\" JAVA_OPTS= \" $JAVA_OPTS -Djboss.platform.mbeanserver\" fi",
  "product": "JAVA 모니터링",
  "header": "MBeanServerBuilder 에러가 발생하는 경우"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "Permission 오류가 발생하는 경우. Java Security Policy 관련 오류가 발생하면 $JAVA_HOME/jre/lib/security/java.policy 파일에 권한 설정을 추가하세요. 모든 권한을 일괄 적용하려면 다음과 같이 java.policy 파일에 설정을 추가하세요. $JAVA_HOME/jre/lib/security/java.policy grant { permission java . security . AllPermission ; } ;",
  "product": "JAVA 모니터링",
  "header": "Permission 오류가 발생하는 경우"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "java.io.FilePermission 오류가 발생하는 경우. 다음과 같이 java.policy 파일에 설정을 추가하세요. $JAVA_HOME/jre/lib/security/java.policy grant { . . . permission java . io . FilePermission { 오류 메시지에서 확인된 패키지 경로 } , \"read\" } ;",
  "product": "JAVA 모니터링",
  "header": "java.io.FilePermission 오류가 발생하는 경우"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "java.util.PropertyPermission 오류가 발생하는 경우. 다음과 같이 java.policy 파일에 설정을 추가하세요. $JAVA_HOME/jre/lib/security/java.policy grant { . . . permission java . util . PropertyPermission { 오류 메시지에서 확인된 패키지 경로 } , \"read\" } ;",
  "product": "JAVA 모니터링",
  "header": "java.util.PropertyPermission 오류가 발생하는 경우"
},
{
  "url": "https://docs.whatap.io/java/agent-troubleshooting",
  "title": "설치 문제 해결",
  "content": "Sigar library를 로딩하지 못하는 경우. $WHATAP_HOME/lib1/*.so 파일에 실행 권한이 있는지 확인하세요. 권한이 없다면 실행 권한을 부여하세요. $ sudo chmod +x *.so AIX 7에서 $WHATAP_HOME/lib1 하위에 libsigar-ppc64-aix-7.so 파일이 없어 오류가 발생한 경우 파일을 복사하세요. $ cp libsigar-ppc64-aix-5.so libsigar-ppc64-aix-7.so",
  "product": "JAVA 모니터링",
  "header": "Sigar library를 로딩하지 못하는 경우"
},
{
  "title": "통계",
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "content": "통계. Java 애플리케이션 환경에서 수집한 다양한 지표를 통해 통계 정보를 제공합니다. 홈 화면 > 프로젝트 선택 > 통계 와탭 모니터링 서비스 초기 화면에서 프로젝트를 선택한 다음 통계의 하위 메뉴를 선택하세요. 와탭 에이전트는 트랜잭션 정보, SQL과 같은 주요 트레이스 정보에 대해 통계 정보를 수집합니다. 5분마다 목록을 만들고 서버로 전송합니다.  각 통계 메뉴는 합계, 최대 및 평균 시간 및 건수 기준의 정렬 옵션을 제공해 원하는 관점으로 상위 목록을 조회할 수 있습니다. 컬럼 설정 버튼을 통해 기본값 외에 목록 내 조회할 컬럼을 추가하거나 제외할 수 있습니다. 통계 목록에서  상세 보기 아이콘을 선택하면 건수와 평균 시간 차트를 확인할 수 있고, 에이전트 간 건수 및 에러 건수 비교, 응답 시간 비교 차트를 추가로 제공합니다. 해당 차트에서 조회를 원하는 시점을 선택하면 트랜잭션 검색 메뉴로 이동합니다. 통계 목록에서 T 버튼을 선택하면 탑 스택 URL 메뉴로 이동합니다. 통계 목록에서 U 버튼을 선택하면 유니크 스택 URL 메뉴로 이동합니다.",
  "product": "JAVA 모니터링",
  "header": "통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "트랜잭션 통계. 홈 화면 > 프로젝트 선택 > 통계 > 트랜잭션 트랜잭션 통계를 수집합니다. 5분마다 최대 5,000개의 URL 별 수행 통계를 수집하여 서버에 전송합니다. 만약 서로 다른 URL의 수가 5분 동안 5,000개가 넘으면 무시됩니다. 컬럼 설명 트랜잭션 트랜잭션 주소 건수 수행 건수 에러 수행된 트랜잭션 중 에러 발생 건수 평균 시간 (ms) 응답시간 합계에 대한 평균 합계 시간 (ms) 응답시간의 합 최대 시간 (ms) 최대 응답시간 평균 CPU 사용 시간 CPU 사용 시간에 대한 평균 HTTP 호출 건수 HTTP Call 건수 평균 HTTP 호출 시간 (ms) HTTP Call 시간의 합계에 대한 평균 SQL 건수 SQL 수행 건수 평균 SQL 시간 (ms) 평균 SQL 수행 시간 SQL 패치 SQL 패치 건수 평균 SQL 패치 시간 (ms) SQL 패치 시간의 합계에 대한 평균 노트 평균 메모리 할당량 은 에이전트 설정( whatap.conf )에서 trace_malloc_enabled=true 옵션을 설정해야 수집합니다. 기본값은 false 입니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "트랜잭션 도메인 통계. 홈 화면 > 프로젝트 선택 > 통계 > 도메인 와탭 에이전트는 도메인별 트랜잭션 통계를 수집할 수 있습니다. 하나의 서버에 여러 개의 도메인을 분리하여 서비스하는 시스템에서는 도메인 별 분석이 필요할 수 있습니다. 다음 옵션을 설정하세요. whatap.conf stat_domain_enabled = true 수집되는 데이터는 도메인별 URL의 처리 현황을 파악할 수 있습니다. 컬럼 설명 도메인 서비스 도메인 트랜잭션 트랜잭션 주소 건수 수행 건수 에러 수행된 트랜잭션 중 에러 발생 건수 평균 시간 (ms) 응답시간 합계에 대한 평균",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 도메인 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "트랜잭션 Caller 통계. 홈 화면 > 프로젝트 선택 > 통계 > Caller 멀티 서버가 rest 호출로 연결되면 Caller 와 Callee 간의 연관 통계를 수집할 수 있습니다. 이 데이터를 수집하기 위해 다음의 옵션을 설정하세요. whatap.conf mtrace_rate = 100 mtrace_spec = v1 stat_mtrace_enabled = true 위와 같은 아키텍처에서 Caller & Callee 통계는 api1, api2에서만 조회할 수 있습니다. 사용자 브라우저에서 호출되는 시스템에서는 Caller 통계를 조회할 수 없습니다. 하지만 Caller 쪽 서버에서 데이터를 전송해야 하므로 모든 서버에 적절한 설정이 들어가야 합니다. whatap.conf of [front] mtrace_rate = 100 mtrace_spec = v1 stat_mtrace_enabled = true whatap.conf of [api1] & [api2] mtrace_spec = v1 stat_mtrace_enabled = true 수집되는 통계 데이터는 다음과 같습니다. Callee 쪽에서 조회되어야 합니다. 컬럼 설명 Caller Pcode Caller에 해당하는 프로젝트 코드 Caller 에이전트 종류 Caller에 해당하는 에이전트가 속한 그룹 단위 Caller URL Caller 트랜잭션의 트랜잭션 주소 트랜잭션 Callee 트랜잭션 주소 건수 수행 건수 에러 수행된 트랜잭션 중 에러 발생 건수 평균 시간 (ms) 응답시간 합계에 대한 평균",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 Caller 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "트랜잭션 Referer 통계. 홈 화면 > 프로젝트 선택 > 통계 > 리퍼러 와탭 에이전트는 Referer 별 트랜잭션 통계를 수집할 수 있습니다. 다음 옵션을 설정하세요. whatap.conf stat_referer_enabled = true 수집되는 데이터는 Referer 정보를 통계로 확인할 수 있습니다. 컬럼 설명 Referer Referer 주소 트랜잭션 트랜잭션 주소 건수 수행 건수 에러 수행된 트랜잭션 중 에러 발생 건수 평균 시간 (ms) 응답시간 합계에 대한 평균",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 Referer 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "에러 통계. 홈 화면 > 프로젝트 선택 > 통계 > 에러 5분 동안 발생한 서비스 에러에 대한 통계입니다. 서로 다른 에러와 트랜잭션 이름을 키로 발생 건수를 수집합니다. 에러 발생 시점의 스택을 제공합니다. 5분 당 최대 1,000 가지 서로 다른 에러를 통계화합니다. 컬럼 설명 클래스 에러 클래스 트랜잭션 트랜잭션 주소 메시지 에러 메시지 건수 에러 발생 건수",
  "product": "JAVA 모니터링",
  "header": "에러 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "SQL 수행 통계. 홈 화면 > 프로젝트 선택 > 통계 > SQL 5분 동안의 SQL 수행 통계를 수집합니다. 5분 동안 서로 다른 SQL 문장이 최대 5,000까지만 허용됩니다. 만약 하나의 Java 프로세스에서 한계를 넘는 SQL이 발생하면 통계 데이터에서는 버려집니다. 컬럼 설명 데이터베이스 데이터베이스 종류 SQL SQL 쿼리문 트랜잭션 해당 SQL을 호출한 URL 중 하나를 임의로 수집한 정보 CRUD Create, Read, Update, Delete 건수 쿼리 실행 건수 에러 건수 실행된 쿼리 중 에러 발생 건수 평균 시간 (ms) 쿼리 실행 시간 합계에 대한 평균 합계 시간 (ms) 쿼리 실행 시간의 합 표준 편차 쿼리 실행 시간에 대한 표준 편차 정보 트랜잭션 은 5분 동안 해당 SQL을 호출한 URL 중 하나(마지막 호출 URL)를 분석 활용을 위해 수집합니다.",
  "product": "JAVA 모니터링",
  "header": "SQL 수행 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "HTTP Call 수행 통계. 홈 화면 > 프로젝트 선택 > 통계 > HTTP 호출 HTTP 및 HTTPS 프로토콜을 통해 5분 동안의 애플리케이션 외부 호출 통계를 수집합니다. 5분 동안 서로 다른 Http Call 문장이 최대 5,000까지만 허용됩니다. 만약 하나의 애플리케이션 프로세스에서 한계를 넘는 외부 Http Call이 발생하면 통계 데이터에서는 버려집니다. 컬럼 설명 HTTP 호출 URL HTTP 호출 URL 해시(hash) 트랜잭션 해당 HTTP API를 요청한 URL 중 하나를 임의로 수집한 정보 호스트 Host 또는 IP 주소 포트 TCP 포트 전체 전체 수행 건수 에러 에러 발생 건수 평균 시간 (ms) 응답시간 합계에 대한 평균 합계 시간 (ms) 응답시간의 합 최소 시간 (ms) 최소 응답시간 최대 시간 (ms) 최대 응답시간",
  "product": "JAVA 모니터링",
  "header": "HTTP Call 수행 통계"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "클라이언트 IP 지역별 호출 건수. 홈 화면 > 프로젝트 선택 > 통계 > 클라이언트 IP 서버와 클라이언트의 물리적 거리는 데이터 전송 시간과 비례합니다. 클라이언트 IP의 지역별 호출 건수를 통계적으로 수집합니다. 5분당 수집할 수 있는 서로 다른 IP 수는 인스턴스 당 최대 70,000개입니다. 컬럼 설명 클라이언트 IP 클라이언트의 IP 주소 국가 사용자 접속 국가 도시 사용자 접속 도시 건수 전체 호출 건수 정보 와탭은 클라이언트와 관련한 정보를 기본 저장합니다. 사용자 데이터 수집과 관련한 에이전트 설정에 대한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "클라이언트 IP 지역별 호출 건수"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "지역별 점유 비중 차트. 점유 비중 차트는 사용자의 접속 위치를 국가와 도시 단위로 수집해 제시합니다. 국가 영역 선택 시 해당 국가의 도시와 접속 유저의 IP 등을 확인할 수 있는 상세 차트로 이동합니다. 중심 원 선택 시 기존 국가 영역 선택 차트로 돌아갑니다.",
  "product": "JAVA 모니터링",
  "header": "지역별 점유 비중 차트"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "유저 에이전트별 호출 건수. 홈 화면 > 프로젝트 선택 > 통계 > 유저 에이전트 유저 에이전트 문자열의 Hash별로 호출 건수를 수집합니다. 5분당 수집할 수 있는 서로 다른 User Agent Hash는 인스턴스 당 최대 500개입니다. 컬럼 설명 유저 에이전트 브라우저의 유저 에이전트 정보 운영체제 브라우저가 실행되는 운영 체제 환경 브라우저 브라우저 종류 건수 수집된 전체 건수",
  "product": "JAVA 모니터링",
  "header": "유저 에이전트별 호출 건수"
},
{
  "url": "https://docs.whatap.io/java/analysis-apm-trs",
  "title": "통계",
  "content": "클라이언트 브라우저 통계. 홈 화면 > 프로젝트 선택 > 통계 > 클라이언트 브라우저 유저 에이전트의 문자열을 분석하여 최종 사용자가 사용하는 브라우저의 종류, 운영체제 기준으로 집계한 통계 정보를 제공합니다. 수집한 통계 정보를 기준으로 생성된 파이 차트를 통해 점유 비중을 확인할 수 있습니다. 컬럼 설명 유저 에이전트 브라우저의 유저 에이전트 정보 운영체제 브라우저가 실행되는 운영 체제 환경 브라우저 브라우저 종류 건수 수집된 전체 건수",
  "product": "JAVA 모니터링",
  "header": "클라이언트 브라우저 통계"
},
{
  "title": "트랜잭션 에러 스택",
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "content": "트랜잭션 에러 스택. 자바(Java) 애플리케이션에서 트랜잭션 중 발생하는 에러를 감지하고 이에 대한 스택 트레이스를 표시하는 에이전트 설정 옵션을 안내합니다. 트랜잭션, 메소드, SQL, HTTP 호출, SOCKET 호출 등 다양한 영역에서 에러 정보를 수집하고, 에러 스택의 길이, 제목 길이 등을 설정하는 방법을 포함합니다. 에이전트 설정을 통해 에러 관리를 개선하고, 애플리케이션의 오류 진단을 보다 효율적으로 수행할 수 있도록 지원합니다. 자바(Java) 애플리케이션에서 트랜잭션 중 발생하는 에러를 감지하고 이에 대한 스택 트레이스를 표시하는 에이전트 설정 옵션을 안내합니다. 트랜잭션, 메소드, SQL, HTTP 호출, SOCKET 호출 등 다양한 영역에서 에러 정보를 수집하고, 에러 스택의 길이, 제목 길이 등을 설정하는 방법을 포함합니다. 에이전트 설정을 통해 에러 관리를 개선하고, 애플리케이션의 오류 진단을 보다 효율적으로 수행할 수 있도록 지원합니다. 호출 서비스의 status_code와는 무관하며, 여러 개의 에러 발생 시 에러 스택은 첫번째 에러 스택만 표시합니다. 노트이 문서에서 안내하는 에이전트 설정은 Java 에이전트 2.2.15 버전 이상에서 지원합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 에러 스택"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "전체 설정. whatap.conf # 에러 스택 표시 여부 trace_exception_stack = false # 에러 스택 길이의 기본값 trace_exception_depth = 50 # 에러 스택 메시지 제목의 길이 trace_exception_title_len = 128",
  "product": "JAVA 모니터링",
  "header": "전체 설정"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "메소드. whatap.conf # 메소드 에러 스택 표시 여부 # trace_exception_stack 값을 따라가며 별도로 true/false 값으로 기능을 켜거나 끌 수 있습니다. trace_method_error_stack = trace_exception_stack # 메소드 에러 스택 길이 # trace_exception_depth 값을 따라가며 별도로 설정할 수 있습니다. trace_method_error_depth = trace_exception_depth",
  "product": "JAVA 모니터링",
  "header": "메소드"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "SQL. whatap.conf # SQL 에러 스택 표시 여부 # trace_exception_stack 값을 따라가며 별도로 true/false 값으로 기능을 켜거나 끌 수 있습니다. trace_sql_error_stack = trace_exception_stack # sql 에러 스택 길이 # trace_exception_depth 값을 따라가며 별도로 설정할 수 있습니다. trace_sql_error_depth = trace_exception_depth",
  "product": "JAVA 모니터링",
  "header": "SQL"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "HTTP Call. whatap.conf # http call 에러 스택 표시 여부 # trace_exception_stack 값을 따라가며 별도로 true/false 값으로 기능을 켜거나 끌 수 있습니다. trace_httpc_error_stack = trace_exception_stack # http call 에러 스택 길이 # trace_exception_depth 값을 따라가며 별도로 설정할 수 있습니다. trace_httpc_error_depth = trace_exception_depth",
  "product": "JAVA 모니터링",
  "header": "HTTP Call"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "SOCKET. whatap.conf # socket 에러 스택 표시 여부 # trace_exception_stack 값을 따라가며 별도로 true/false 값으로 기능을 켜거나 끌 수 있습니다. trace_socket_error_stack = trace_exception_stack # socket 에러 스택 길이 # trace_exception_depth 값을 따라가며 별도로 설정할 수 있습니다. trace_socket_error_depth = trace_exception_depth",
  "product": "JAVA 모니터링",
  "header": "SOCKET"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction-error-stack",
  "title": "트랜잭션 에러 스택",
  "content": "트랜잭션. whatap.conf # 트랜잭션 에러 스택 표시 여부 # trace_exception_stack 값을 따라가며 별도로 true/false값으로 기능을 켜거나 끌 수 있습니다. trace_endtx_error_stack = trace_exception_stack # 트랜잭션 에러 스택 길이 # trace_exception_depth 값을 따라가며 별도로 설정할 수 있습니다. trace_endtx_error_depth = trace_exception_depth",
  "product": "JAVA 모니터링",
  "header": "트랜잭션"
},
{
  "title": "트랜잭션",
  "url": "https://docs.whatap.io/java/agent-transaction",
  "content": "트랜잭션. 자바(Java) 애플리케이션 내 각 트랜잭션의 성능 데이터를 에이전트가 추적하고 분석할 수 있는 설정 방법을 안내합니다. 트랜잭션의 요청 처리, 응답 시간, 자원 사용량 등을 추적하여 애플리케이션 성능을 평가합니다. 트랜잭션이란 사용자 브라우저의 요청을 처리하기 위한 서버 사이드의 Logical Unit of Work(LUW)를 말합니다. 개별 웹서비스(URL) 요청에 대한 처리 과정이 바로 트랜잭션입니다. 웹 애플리케이션에서 트랜잭션은 웹서비스(URL)에 대한 HTTP Request를 받아 Response를 반환하는 과정입니다. 애플리케이션의 성능은 이 트랜잭션들의 성능으로 요약할 수 있습니다. 트랜잭션 성능은 트랜잭션 시작에서부터 종료 시점, 응답시간 및 자원 사용량 혹은 트랜잭션 호출자 속성 등의 정보를 포함합니다. 기본적으로 트랜잭션 응답 분포와 트랜잭션 통계를 통해서 트랜잭션 성능을 분석할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "트랜잭션 트레이싱. profile_basetime MiliSecond 기본값 500 트레이스의 상세 정보를 수집할 최소 응답 시간을 설정합니다. 설정한 값 이하의 시간 내에 트랜잭션이 종료된 경우 트레이스 정보를 수집하지 않습니다. 단, 5분 단위로 최초 호출된 URL과 에러가 발생한 트랜잭션에 대한 트레이스 정보는 수집합니다. 노트 profile_basetime 옵션에 상관없이 에러를 수집하려면 profile_concern_error_enabled 옵션을 true 로 설정하세요. 기본값 false 로 설정하면 에러를 샘플링하게 됩니다 profile_step_normal_count Int 기본값 1000 트랜잭션 트레이스의 최대 스텝 수를 설정합니다. profile_step_heavy_count Int 기본값 1020 Heavy한 스텝의 경우 트레이스 기본 스텝 수를 초과하더라도 정해진 값만큼 기록합니다. profile_step_max_count Int 기본값 1024 트레이스 스텝의 최대 수를 설정합니다. 수집된 트레이스 스텝 수가 이 값을 초과하면 이후 수집되는 스텝들은 모두 버려집니다. profile_step_heavy_count 을 최대 1000으로 설정하면 profile_step_max_count 만큼 액티브 스택이 수집됩니다. profile_step_heavy_time MiliSecond 기본값 100 Heavy한 스텝의 기준을 설정합니다. 설정한 값보다 수행 시간이 긴 경우 profile_step_normal_count 값을 초과하더라도 profile_step_heavy_count 에 설정한 값만큼 기록합니다. active_stack_count Int 기본값 100 트랜잭션 내에서 수집하는 액티브 스택의 최대 수를 설정합니다. profile_method_resource_enabled Boolean 기본값 false 트레이스에서 method 스텝을 수집할 때 해당 스텝에서 사용한 CPU와 메모리 사용량을 추적합니다. profile_position_method String 설정한 메소드를 수행하는 시점의 StackTrace를 기록합니다. profile_position_depth Int 기본값 50 position 추적을 위해 StackTrace를 기록할 때 최대 라인 수를 설정합니다. trace_error_callstack_depth Int 기본값 50 Error 발생 시 수집하는 StackTrace의 최대 라인 수를 설정합니다. trace_active_callstack_depth Int 기본값 50 액티브 스택에서 수집하는 StackTrace의 최대 라인수를 설정합니다. trace_active_transaction_yellow_time MiliSecond 기본값 3000 액티브 트랜잭션의 아크이퀄라이저에서 노란색으로 표현할 기준을 설정합니다. trace_active_transaction_red_time MiliSecond 기본값 8000 액티브 트랜잭션의 아크이퀄라이저에서 빨간색으로 표현할 기준을 설정합니다. hook_method_patterns String 응답시간을 측정할 메소드를 설정합니다. 마지막 마침표(.)를 구분자로 클래스 FullName과 메소드로 구분되며 별표(*)를 와일드 카드로 사용할 수 있습니다. 대상이 여러 개인 경우 쉼표(,)로 구분합니다. whatap.conf hook_method_patterns = a.b.C1.* hook_method_supers String 특정 클래스를 상속받은 메소드의 응답시간을 측정하고자 할 때 Super Class를 설정합니다. 클래스 FullName을 설정하며 대상이 여러 개인 경우 쉼표(,)로 구분합니다. whatap.conf hook_method_supers = a.b.C1 hook_method_interfaces String 특정 인터페이스를 구현한 메소드의 응답시간을 측정하고자 할 때 Interface를 설정합니다. 인터페이스 FullName을 설정하며 대상이 여러 개인 경우 쉼표(,)로 구분합니다. hook_method_ignore_classes String 메소드 트레이스를 설정할 때 트레이스에서 제외하고 싶은 클래스들을 설정합니다. hook_method_access_public_enabled Boolean 기본값 true 메소드 트레이스를 설정할 때 public 메소드에 대해서만 별도 대상으로 처리할지 여부를 설정합니다. hook_method_access_private_enabled Boolean 기본값 false 메소드 트레이스를 설정할 때 private 메소드에 대해서만 별도 대상으로 처리할지 여부를 설정합니다. hook_method_access_protected_enabled Boolean 기본값 true 메소드 트레이스를 설정할 때 protected 메소드에 대해서만 별도 대상으로 처리할지 여부를 설정합니다. hook_method_access_none_enabled Boolean 기본값 true 메소드 트레이스를 설정할 때 no access indicated 메소드에 대해서만 별도 대상으로 처리할지 여부를 설정합니다. stacklog_socket_port TCP_PortNumber 기본값 0 목적지의 TCP 포트를 설정하면 Socket.connect() 시점 StackTrace를 에이전트 로그로 기록합니다. 기본 설정으로 확인되지 않는 DB 연결, HTTPC 연결 등을 추적할 때 사용할 수 있습니다. 주의 설정한 목적지로 연결 시마다 매번 StackTrace를 기록합니다. 성능 저하를 유발할 수 있습니다. 디버깅 용도로 선별한 에이전트에 한시적으로만 사용해야 합니다. DB 연결 상태 추적 예시, stacklog_socket_port=1521 trace_concern_error_enabled Boolean 기본값 true trace_basetime 또는 profile_basetime 옵션과 무관하게 에러가 있는 상세 트레이스에 대한 수집 여부를 설정합니다.",
  "product": "JAVA 모니터링",
  "header": "트랜잭션 트레이싱"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "예외 처리. biz_exceptions String Business Exception을 등록합니다. 팁 에러 클래스 수집 / 히트맵 표시 레벨: INFO (파란색) / 에러 통계 포함 노트 Java 에이전트 v2.2.20 이상에서는 등록한 비즈니스 Exception을 에러 통계로 수집합니다. v2.2.20 미만에서는 등록한 비즈니스 Exception을 에러 통계에서 제외합니다. 다만 트레이스 상세에서는 나타납니다. biz_exceptions_status String Java Agent v2.2.20 or later Business Exception 발생 시 이벤트 알림을 억제할 Business Exception과 Status를 설정합니다. 이 옵션에서 설정한 Business Exception :Status 에 대해서는 이벤트 레벨이 INFO 로 변경됩니다. Business Exception과 Status는 콜론(:)으로 구분하며, 하나의 Business Exception에 여러 개의 Status를 사용하는 경우 앰퍼샌드(&)로 구분합니다. 쉼표를 구분자로 이용해 여러 개를 설정할 수 있습니다. whatap.conf # example biz_exceptions_status = java.util.concurrent.TimeoutException:400&404&408,java.lang.Exception:200 팁 에러 클래스 수집 / 히트맵 표시 레벨: INFO (파란색) / 에러 통계 포함 ignore_exceptions String 등록한 Exception의 에러 자체를 무시합니다. 팁 에러 클래스 무시 / 히트맵 표시 레벨: INFO (파란색) / 에러 통계 미포함 transaction_status_error_enable Boolean 기본값 true HTTP 401, 403과 같이 정상 응답이 아닌 HTTP 상태 코드를 반환하는 경우 에러로 처리할지 여부를 설정합니다. status_ignore String 무시하려는 HTTP 상태 코드를 설정할 수 있습니다. 여러 값을 대상으로 할 경우 쉼표(,)를 구분자로 사용하세요. whatap.conf # example status_ignore = 408,500 팁 Status 에러 무시 / 히트맵 표시 레벨: INFO (파란색) / 에러 통계 미포함 status_ignore_set String whatap.error.STATUS_ERROR 를 무시합니다. 여러 값을 대상으로 할 경우 쉼표(,)를 구분자로 사용하세요. whatap.conf # example status_ignore_set = /api/test/timeout/{time}:408,/api/test/timeout:200,/error:500 팁 Status 에러 세트 무시 / 히트맵 표시 레벨: INFO (파란색) / 에러 통계 미포함 httpc_status_error_enable Boolean 기본값 true HTTP 상태 코드가 에러인 경우 수집 여부를 설정합니다. 클라이언트 에러 응답( 400 이상), 서버 에러 응답( 500 이상)이 해당됩니다. 노트 HTTP 상태 코드에 대한 자세한 내용은 다음 링크 를 참조하세요. httpc_status_ignore String HTTP 상태 코드가 에러( HTTPC_ERROR )인 경우 무시할 수 있습니다. 여러 값을 대상으로 할 경우 쉼표(,)를 구분자로 사용하세요. 팁 HTTP 상태 에러 코드 무시 / 에러 통계 미포함 httpc_status_url_ignore_set String whatap.error.HTTPC_ERROR 를 무시합니다. 여러 값을 대상으로 할 경우 쉼표(,)를 구분자로 사용하세요. httpc_status_url_ignore_set=/a/b/c:400,/a/ab/c:404 와 같이 설정하세요. 이때 url은 통계/에러 분석에서 HTTPC_URL 값을 입력합니다. 팁 HTTP 상태 에러 코드 무시 / 에러 통계 미포함 trace_sql_exception_enabled Boolean 기본값 true JDBC 드라이버에서 SqlException 발생 시 추적 여부를 설정합니다. 옵션 값을 false 로 설정하면 사용자 정의 예외 처리로 biz_exceptions 처리할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "예외 처리"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "HTTP 트랜잭션 추적. profile_http_header_enabled Boolean 기본값 false 트레이스 내역에 http 헤더 정보를 기록하려면 true 로 설정하세요. profile_http_parameter_enabled Boolean  기본값 false 트레이스 내역에 http 파라미터 정보를 기록하려면 true 로 설정하세요. 파라미터는 별도 보안키를 입력해야 조회할 수 있습니다. 노트 Java 에이전트 2.2.2 버전 이전 : 보안 키는 WAS 서버 ${WHATAP_AGENT_HOME} /paramkey.txt 파일 내에 6자리로 작성합니다. paramkey.txt 파일이 존재하지 않는 경우 랜덤 값으로 자동 생성합니다. Java 에이전트 2.2.2 버전 이후 : 보안 키는 WAS 서버 ${WHATAP_AGENT_HOME} /security.conf 파일 내에 paramkey 키값을 확인하세요. security.conf 파일이 존재하지 않을 경우 paramkey 키값을 WHATAP 으로 자동 생성합니다. 보안키 설정 파일에 대한 자세한 내용은 다음 문서 를 참조하세요. profile_http_header_url_prefix String 트레이스 내역에 http 헤더 정보를 기록할 대상 URL의 prefix를 정의할 때 사용합니다. profile_http_parameter_url_prefix String 트레이스 내역에 http 파라미터 정보를 기록할 대상 URL의 prefix를 정의할 때 사용합니다. trace_transaction_name_key String HTTP request parameter 값을 해당 옵션에 설정하면, 파라미터 값을 추출하여 트랜잭션의 이름 마지막에 추가합니다. 예를 들어, HTTP 파라미터로 paramKey 를 가진 /api/test URL을 호출하는 경우 다음 예제와 같이 설정하면 트레이스 내역에 /api/test$paramKey={value} 로 트랜잭션 이름을 표시합니다. 다만 여러 개의 파라미터를 등록할 수는 없습니다. whatap.conf # example trace_transaction_name_key = paramKey trace_normalize_enabled Boolean 기본값 true 트랜잭션 URL을 파싱해 정규화하는 기능을 활성화합니다. 노트 false 로 값을 변경하면 패스 파라미터 파싱을 비활성화합니다. 이 경우 통계 데이터의 의미가 약화됨으로 디버그 용도로만 잠시 사용하는 것을 권장합니다. trace_auto_normalize_enabled Boolean 기본값 true 트랜잭션 URL 정규화할 때 패턴 값을 어노테이션에서 추출해 자동으로 파싱하는 기능을 활성화합니다. trace_normalize_urls String 정규화할 트랜잭션 URL 패턴을 설정합니다. 호출 URL 패턴을 파싱해 패스 파라미터를 제거합니다. 노트 예시, /a/{v}/b 라고 선언하면 a/123/b → a/{v}/b 로 치환합니다. 여러 개를 등록할 때는 쉼표(,)를 구분자로 사용하세요. 치환 패턴 정리 후 보완이 필요합니다. web_static_content_extensions String 기본값 js, htm, html, gif, png, jpg, css, swf, ico 스태틱 콘텐츠임을 판단하는 확장자를 설정합니다. 이 옵션에 설정한 확장자를 가진 트랜잭션들은 트레이스 추적과 카운팅에서 제외합니다. trace_transaction_name_header_key String 설정한 HTTP 헤더 키에서 추출한 값을 트랜잭션의 이름 마지막에 추가합니다. recursive_max Int 기본값 1000000 트랜잭션의 재귀 호출 여부 검출을 위한 옵션입니다. 단일 트랜잭션으로부터 파생되는 재귀 호출 횟수를 카운트하여 이벤트 알림을 발행하기 위한 기준을 설정합니다. 노트 HTTP URL 재귀 호출을 대상으로 합니다. jsp :forward 를 통해 재호출하는 케이스도 카운트에 포함합니다. hook_httpservlet_classes String HTTP 트랜잭션의 END POINT를 추가로 설정합니다. 메소드의 첫 번째 2개의 파라미터는 HttpServletRequest 와 HttpServletResponse 만 설정할 수 있습니다. hook_jsp_patterns String 기본값 org.apache.jasper.servlet.JspServlet.serviceJspFile JSP 파일을 로딩하는 메소드를 설정합니다. 트랜잭션 호출 결과로 반환하는 JSP 정보를 트레이스에 표시합니다. 이 옵션을 통해 추가한 설정에 기본값이 자동 추가됩니다. trace_ignore_url_set String 트랜잭션 추적에서 제외할 URL을 설정합니다. 2개 이상의 값을 설정하려면 쉼표(,)를 구분자로 이용하세요. trace_ignore_url_prefix String 트랜잭션 추적에서 제외할 URL prefix를 설정합니다. 2개 이상의 값을 설정하려면 쉼표(,)를 구분자로 이용하세요. ignore_http_method String 기본값 PATCH,OPTIONS,HEAD,TRACE 설정한 HTTP 메소드(Method)로 요청된 트랜잭션 정보는 수집하지 않습니다. 여러 개를 설정하려면 쉼표(,)를 구분자로 이용하세요. whatap.conf # e.g. http_method가 OPTIONS, HEAD인 트랜잭션 \"추적\" ignore_http_method = PATCH,TRACE # e.g. http_method가 OPTIONS, HEAD인 트랜잭션 \"무시\" ignore_http_method = OPTIONS,HEAD trace_tx_name_with_method_enabled Boolean 기본값 false 통계 데이터에서 URL을 변경한 URL+method로 수집할 수 있습니다. 통계 또는 트랜잭션 검색 메뉴에서 URL+method로 확인할 수 있습니다. 예시, /api/user+GET, /api/user+POST",
  "product": "JAVA 모니터링",
  "header": "HTTP 트랜잭션 추적"
},
{
  "title": "토폴로지 맵",
  "url": "https://docs.whatap.io/java/agent-toplogy",
  "content": "토폴로지 맵. 자바(Java) 에이전트가 수집한 데이터를 사용하여 애플리케이션의 토폴로지 맵을 생성하는 에이전트 설정 옵션을 안내합니다. 트랜잭션 호출자, 데이터베이스 연결 정보, HTTPC 아웃바운드 정보, 액티브 트랜잭션 상태 등의 다양한 지표를 통해 시스템의 토폴로지를 시각화하고 분석할 수 있습니다. 토폴로지 맵자바(Java) 에이전트가 수집한 데이터를 사용하여 애플리케이션의 토폴로지 맵을 생성하는 에이전트 설정 옵션을 안내합니다. 트랜잭션 호출자, 데이터베이스 연결 정보, HTTPC 아웃바운드 정보, 액티브 트랜잭션 상태 등의 다양한 지표를 통해 시스템의 토폴로지를 시각화하고 분석할 수 있습니다. tx_caller_meter_enabled Boolean 기본값 false 트랜잭션 정보로 토폴로지 통계를 생성합니다. mtrace_enabled 옵션의 값이 true이면 동작합니다. sql_dbc_meter_enabled Boolean 기본값 false 데이터 베이스 연결 정보로 토폴로지 통계를 생성합니다. httpc_host_meter_enabled Boolean 기본값 false 토폴로지 맵에서 httpc outbound 정보를 표현합니다. actx_meter_enabled Boolean 기본값 false 토폴로지 맵에서 액티브 트랜잭션 상태를 표현합니다. ",
  "product": "JAVA 모니터링",
  "header": "토폴로지 맵"
},
{
  "title": "통계",
  "url": "https://docs.whatap.io/java/agent-static",
  "content": "통계. 자바(Java) 애플리케이션 모니터링을 위한 다양한 통계 수집 기능 관련 에이전트 옵션을 안내합니다. 성능 카운터 확장, 도메인별 트랜잭션 수집, 멀티 서버 트랜잭션 의존성 분석, 로그인 유형별 및 Referer 별 통계 수집 등을 포함합니다. 또한 SQL, HTTP Call, 오류 통계와 사용자 에이전트 정보 수집에 대한 최대 레코드 수 제한 설정도 확인할 수 있습니다. 통계자바(Java) 애플리케이션 모니터링을 위한 다양한 통계 수집 기능 관련 에이전트 옵션을 안내합니다. 성능 카운터 확장, 도메인별 트랜잭션 수집, 멀티 서버 트랜잭션 의존성 분석, 로그인 유형별 및 Referer 별 통계 수집 등을 포함합니다. 또한 SQL, HTTP Call, 오류 통계와 사용자 에이전트 정보 수집에 대한 최대 레코드 수 제한 설정도 확인할 수 있습니다. addin_monitor_num Int 기본값 0 성능 카운터 확장을 위해 추가 선언할 클래스 수를 설정합니다. addin_monitor_num에 설정한 값만큼 addin_monitor_x를 선언합니다. addin_monitor_0 Int 기본값 0 whatap.confaddin_monitor_num=2addin_monitor_0=a.a.Class1addin_monitor_1=a.a.Class2 stat_domain_enabled Boolean 기본값 false 클라이언트의 접속 도메인별 트랜잭션 통계 수집 기능을 활성화합니다. stat_domain_max_count Int 기본값 7000 하나의 JVM에서 5분 동안 수집할 도메인별 트랜잭션 통계의 최대 레코드 수입니다. stat_mtrace_enabled Boolean 기본값 false 멀티 서버 트랜잭션에서 Caller & Callee 간에 버전 별 의존성 통계를 수집합니다. mtrace_spec String 기본값 v1 현재 인스턴스의 애플리케이션 버전을 설정합니다. 임의의 문자열을 설정할 수 있습니다. 이 데이터는 호출 통계를 위해 사용합니다. stat_mtrace_max_count Int 기본값 7000 멀티 서버 트랜잭션에서 Caller & Callee 간에 버전별 의존성 통계의 최대 레코드 수입니다. stat_login_enabled Boolean 기본값 false 로그인별 트랜잭션 통계를 수집합니다. stat_login_max_count Int 기본값 7000 하나의 JVM에서 5분 동안 수집할 로그인 별 트랜잭션 통계의 최대 레코드 수입니다. stat_referer_enabled Boolean 기본값 false Referer별 트랜잭션 통계를 수집합니다. stat_referer_max_count Int 기본값 7000 하나의 JVM에서 5분 동안 수집할 Referer 별 트랜잭션 통계의 최대 레코드 수입니다. stat_tx_max_count Int 기본값 5000 트랜잭션 통계 정보의 개수를 제한합니다. 5분 동안 수집해 서버에 전송하는 통계 정보의 최대 레코드 수를 제한합니다. stat_sql_max_count Int 기본값 5000 SQL 통계 정보의 개수를 제한합니다. 5분 동안 수집해 서버에 전송하는 통계 정보의 최대 레코드 수를 제한합니다. stat_httpc_max_count Int 기본값 5000 Http Call 통계 정보의 개수를 제한합니다. 5분 동안 수집해 서버에 전송하는 통계 정보의 최대 레코드 수를 제한합니다. stat_error_max_count Int 기본값 1000 Error 통계 정보의 개수를 제한합니다. 5분 동안 수집해 서버에 전송하는 통계 정보의 최대 레코드 수를 제한합니다. stat_useragent_max_count Int 기본값 500 User Agent 통계 정보의 개수를 제한합니다. 5분 동안 수집해 서버에 전송하는 통계 정보의 최대 레코드 수를 제한합니다. ",
  "product": "JAVA 모니터링",
  "header": "통계"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "NON HTTP 트랜잭션 추적. trace_auto_transaction_enabled Boolean 기본값 false 트레이스 대상 메소드가 트랜잭션 시작점( Javax.http.httpservlet , hook_service_* ) 내에서 수행하는 경우가 아니라면 수집되지 않습니다. 이 경우 트레이스 대상 메소드가 트랜잭션 시작점이 되도록 설정합니다. 노트 주로 개발 환경에서 백그라운드 트랜잭션의 END POINT를 찾을 때 사용합니다. trace_auto_transaction_backstack_enabled Boolean 기본값 true trace_auto_transaction_enabled 옵션의 값이 true 인 경우 트랜잭션 시작 시 StackTrace를 기록합니다. 이를 통해 트랜잭션의 시작점을 찾아낼 수 있습니다. trace_background_socket_enabled Boolean 기본값 true 트랜잭션이 아닌 백그라운드 스레드에 의한 소켓이 오픈될 때도 이를 기록합니다. async_stack_enabled Boolean 기본값 false 백그라운드 스레드에 대한 Active Stack 기능 사용 여부를 설정합니다. async_thread_match String 액티브 스택을 덤프할 백그라운드 스레드 이름을 설정합니다. 여러 개를 설정하려면 쉼표(,)를 구분자로 사용하세요. 이름을 설정할 때 'Thread-*' 처럼 별표(*)를 사용해 비교 패턴을 사용할 수 있습니다. async_thread_parking_class String 기본값 sun.misc.Unsafe 스택의 Top 메소드가 async_thread_parking 에 등록한 클래스/메소드일 때 스레드가 파킹 상태에 있다고 판단하고 덤프를 생성하지 않습니다. hook_service_patterns String NON-Http 트랜잭션 추적을 위한 시작점 패턴을 설정합니다. 와일드카드 문자를 사용할 수 없으며, 2개 이상의 값을 설정하려면 쉼표(,)를 구분자로 이용하세요. hook_serivce_ignore_methods String hook_service_patterns 에서 설정한 내역 중 시작점으로 불필요한 메소드를 추가할 수 있습니다. hook_service_supers String NON-HTTP 트랜잭션 추적을 위한 시작점의 공통 분모가 특정 클래스의 메소드를 상속 받은 경우라면 공통 분모의 메소드를 설정합니다. 메소드 전체 경로를 입력하세요. 와일드 카드( * )를 사용할 수 있으며, 쉼표(,)를 구분자로 이용해 여러 개의 메소드를 등록할 수 있습니다. whatap.conf hook_service_supers = a.b.C.method,a.b.C.* hook_service_interfaces String NON-Http 트랜잭션 추적을 위한 시작점의 공통 분모가 특정 인터페이스를 구현한 경우라면 이를 설정합니다. hook_service_access_public_enabled Boolean 기본값 true Non Http Demon 프로세스의 트랜잭션을 설정할 때 public 메소드에 대해서만 Access 권한 기준을 on/off 설정합니다. hook_service_access_private_enabled Boolean 기본값 true Non Http Demon 프로세스의 트랜잭션을 설정할 때 private 메소드에 대해서만 Access 권한 기준을 on/off를 설정합니다. hook_service_access_protected_enabled Boolean 기본값 true Non Http Demon 프로세스의 트랜잭션을 설정할 때 protected 메소드에 대해서만 Access 권한 기준을 on/off를 설정합니다. service_name_mode String 기본값 full 트랜잭션 명으로 다음의 옵션을 사용할 수 있습니다. full : Full Class 이름 사용 class : 서비스 명칭을 Class 이름으로 사용 method : 서비스 명칭을 Method 이름으로 사용 string : 서비스 명칭을 문자열 중에서 첫 번째 파라미터로 사용 arg : 파라미터 중에서 service_name_index 옵션에 설정한 인덱스에 파라미터를 서비스 명칭으로 사용",
  "product": "JAVA 모니터링",
  "header": "NON HTTP 트랜잭션 추적"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "멀티 트랜잭션 추적. mtrace_enabled Boolean 기본값 true 멀티 트랜잭션 추적 기능(Multi Transaction ID, 이하 MTID) 사용 여부를 설정합니다. MTID를 추적하면 등록한 모든 애플리케이션 간의 호출을 확인할 수 있습니다. mtrace_rate Percentage 기본값 10 최초 트랜잭션이 발생할 때 발급하는 MTID의 발급 비율을 설정하는 옵션입니다. mtrace_caller_key String 기본값 x-wtap-mst MTID 추적에 사용할 Caller Key Name을 설정합니다. mtrace_callee_key String 기본값 x-wtap-tx MTID 추적에 사용할 Callee Key Name을 정합니다. mtrace_send_url_length Int 기본값 80 Http Caller는 Callee에게 자신의 URL을 넘겨줍니다. 이때 URL 길이를 제한하는데, 이 길이의 값을 설정합니다. mtrace_callee_id_send_enabled Boolean 기본값 false MTID 추적 시 HTTPC 호출과 함께 발행된 Callee ID를 트레이스에 표현합니다. mtrace_callee_id_recv_enabled Boolean 기본값 false MTID 추적 시 수신한 Callee ID를 트레이스에 표현합니다. mtrace_alltx_enabled Boolean 기본값 false log4j와 같은 로깅 시스템과 연계하기 위해서 모든 트랜잭션의 MTID를 추적할 수 있습니다. mtrace_basetime Miliseconds 기본값 100 mtrace_alltx_enabled 옵션의 값이 true 이면 너무 많은 로그가 남을 수 있습니다. 이때는 트레이스 로깅량을 줄일 필요가 있습니다. stat_mtrace_enabled Boolean 기본값 false Caller와 Callee의 상관관계 통계를 수집합니다. Caller에 적용하면 Caller의 상세 정보를 보내주고 Callee에 적용하면 url 단위 Caller-Callee 호출 통계를 수집 서버로 전송합니다.",
  "product": "JAVA 모니터링",
  "header": "멀티 트랜잭션 추적"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "트레이스 데이터 샘플링. Java Agent v2.2.4 or later trace_sampling_enabled Boolean 기본값 false 트레이스 데이터 샘플링 수집 여부를 설정할 수 있습니다. trace_sampling_tps Int 기본값 10000 트레이스 데이터 샘플링 수를 설정할 수 있습니다. 설정한 샘플링 수를 초과하는 데이터는 전송하지 않으며, 5초마다 초기화합니다. trace_send_enabled Boolean 기본값 true 트레이스 데이터 전송 여부를 설정할 수 있습니다. debug_trace_samling Boolean 기본값 false 트레이스 데이터 샘플링 디버그 옵션을 켜거나 끌 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "트레이스 데이터 샘플링"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "트레이스 URL 이름 수정하기. hook_tx_name_patterns / hook_tx_name_mode string Java Agent v2.2.4 or later 특정 URL 및 특정 메소드(method)를 호출 시 트레이스 URL의 이름을 수정할 수 있습니다. 예를 들어 io.home.test.TestController.test1 에 등록한 URL 호출 시 test100000() 메소드를 호출하는 경우, 서비스 화면에서 /api/100000+test1+test100000 으로 확인할 수 있습니다. hook_tx_name_mode 옵션을 통해 class , method , string , return 중 하나를 선택할 수 있습니다. whatap.conf # 호출 메소드의 전체 경로 (* 사용 가능) hook_tx_name_patterns = ab.cd.ef.GH.ij # class, method, string, return 중 택1 hook_tx_name_mode = method",
  "product": "JAVA 모니터링",
  "header": "트레이스 URL 이름 수정하기"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "특정 exception 무시하기. ignore_exception_tx_pattern String Java Agent v2.2.4 or later 특정 서비스에서 특정 exception을 무시할 수 있도록 설정할 수 있습니다. 여러 개를 등록할 때는 쉼표(,)를 구분자로 이용하세요. whatap.conf ignore_exception_tx_pattern = exception:service_url # e.g. java.util.concurrent.TimeoutException:/api/test/timeout,org.springframework.web.util.NestedServletException:/api/posts/test/cexception",
  "product": "JAVA 모니터링",
  "header": "특정 exception 무시하기"
},
{
  "url": "https://docs.whatap.io/java/agent-transaction",
  "title": "트랜잭션",
  "content": "HttpURLConnection 추적하기. HttpURLConnection Boolean 기본값 true HttpURLConnection 클래스의 메소드를 추적하기 위한 옵션입니다. hook_HttpURLConnection_startup_enabled Boolean Java Agent v2.2.4 or later 기본값 false HttpURLConnection 클래스의 메소드를 최초 호출 시에도 추적할 수 있도록 설정할 수 있습니다. HttpURLConnection_weblogic Boolean Java Agent v2.2.4 or later 기본값 true Weblogic에서 HttpURLConnection 으로 http 호출을 하는 경우 weblogic.net.http.HttpURLConnection 클래스의 메소드를 추적하기 위한 옵션입니다. hook_HttpURLConnection_weblogic_startup_enabled Boolean Java Agent v2.2.4 or later 기본값 false weblogic.net.http.HttpURLConnection 클래스의 메소드를 최초 호출 시에도 추적할 수 있도록 설정할 수 있습니다.",
  "product": "JAVA 모니터링",
  "header": "HttpURLConnection 추적하기"
},
{
  "title": "에이전트 성능",
  "url": "https://docs.whatap.io/java/agent-performance",
  "content": "에이전트 성능. 자바(Java) 에이전트의 성능 관련 옵션을 안내합니다. 동시에 처리할 수 있는 최대 트랜잭션 수와 트랜잭션 데이터를 저장하는 버퍼의 초기 크기 설정을 확인할 수 있습니다. 이는 시스템의 부하와 자원 사용을 최적화하는 데 중요한 역할을 합니다. 자바(Java) 에이전트의 성능 관련 옵션을 안내합니다. 동시에 처리할 수 있는 최대 트랜잭션 수와 트랜잭션 데이터를 저장하는 버퍼의 초기 크기 설정을 확인할 수 있습니다. 이는 시스템의 부하와 자원 사용을 최적화하는 데 중요한 역할을 합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 성능"
},
{
  "url": "https://docs.whatap.io/java/agent-performance",
  "title": "에이전트 성능",
  "content": "whatap.agent.2.1.0 버전 미만. whatap.tx_max_count Int 기본값 5000 트랜잭션을 최대 저장하는 개수입니다. 동시에 처리하는 트랜잭션이 많을 경우 해당 크기를 더 늘려주세요. whatap.tx_default_capacity Int 기본값 101 트랜잭션을 저장하는 버퍼의 시작 크기입니다.",
  "product": "JAVA 모니터링",
  "header": "whatap.agent.2.1.0 버전 미만"
},
{
  "title": "에이전트 이름 식별",
  "url": "https://docs.whatap.io/java/agent-name",
  "content": "에이전트 이름 식별. 모니터링 대상을 구별하기 위한 애플리케이션 서버의 고유 식별자 설정에 대해 안내합니다. 모니터링 대상 시스템 내에서 애플리케이션 서버를 정확히 구분하는 데 필수적입니다. 서버 유형, IP 등의 정보를 기반으로 한 자동 이름 지정 방식과 사용자가 직접 whatap.conf 파일이나 JVM 옵션을 통해 에이전트 이름을 설정하는 방법을 확인할 수 있습니다. 와탭은 모니터링 정보 수집 대상인 애플리케이션 서버 식별을 위한 정보로 기본적으로 애플리케이션 서버로부터 수집한 정보를 활용합니다. 기본 활용 정보는 애플리케이션 서버의 종류, IP 주소 등을 조합해 애플리케이션 서버를 고유 식별자로 사용합니다. 필요에 따라 사용자가 설정한 명칭을 이용하거나 패턴을 변경해 고유한 값으로 변경해 이용합니다. 에이전트의 이름은 반드시 고유한 값이어야 합니다. 애플리케이션 서버로부터 추출한 정보를 활용하는 이유는 애플리케이션 서버 정지 또는 네트워크 단절, 에이전트 문제로 인한 수집 서버와 에이전트의 통신 두절 상태가 복구되었을 경우, 재접속된 에이전트로부터 송신되는 정보가 기존 에이전트로부터 송신된 정보와의 연속성을 유지하기 위해서입니다. 주의 에이전트 이름은 프로젝트 단위로 고유해야 합니다. 에이전트 아이디/이름을 변경하면 이전 데이터와 연결되지 않습니다.  노트 와탭 모니터링 서비스에서는 모니터링 대상을 오브젝트 또는 에이전트로 혼용해서 사용합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 이름 식별"
},
{
  "url": "https://docs.whatap.io/java/agent-name",
  "title": "에이전트 이름 식별",
  "content": "기본 이름 결정 방식. JVM 옵션으로 whatap.oname 설정이 없는 경우 에이전트 이름을 다음과 같은 우선 순위로 자동 부여합니다. whatap.type 을 식별합니다. whatap.type 이 서블릿 컨테이너면 애플리케이션이 사용하는 포트를 식별합니다. 포트를 식별할 수 없다면 process ID(PID)를 검색합니다. 식별한 정보에 IPv4 주소 3, 4번째를 추가해 최종 이름을 결정합니다. 예를 들어, IP 주소가 10.11. 12 . 13 인 서버에서 Tomcat 이 8080 포트로 시작한 경우 TC-12-13-8080 명칭으로 에이전트 이름을 자동 부여합니다.",
  "product": "JAVA 모니터링",
  "header": "기본 이름 결정 방식"
},
{
  "url": "https://docs.whatap.io/java/agent-name",
  "title": "에이전트 이름 식별",
  "content": "에이전트 이름 변수. 사용할 수 있는 이름 변수를 다음과 같이 제공합니다. 변수 설명 문자열 입력한 문자열을 사용합니다. {type} 컨테이너 타입을 자동 식별해 부여합니다. 자동 식별 대상: JAVA, TOMCAT, JBOSS, RESIN, SPRINGBOOT, JETTY, JEUS, WEBLOGIC, WEBSPHERE, UNDERTOW, PLAY {ip0} IPv4 주소 중 첫 번째 단위를 사용합니다. (예시, 10 .11.12.13 중 10 ) {ip1} IPv4 주소 중 두 번째 단위를 사용합니다. (예시, 10. 11 .12.13 중 11 ) {ip2} IPv4 주소 중 세 번째 단위를 사용합니다. (예시, 10.11. 12 .13 중 12 ) {ip3} IPv4 주소 중 네 번째 단위를 사용합니다. (예시, 10.11.12. 13 중 13 ) {pid} Java의 Process ID(PID)를 사용합니다. {port} 애플리케이션이 Listen 하는 포트를 사용합니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 이름 변수"
},
{
  "url": "https://docs.whatap.io/java/agent-name",
  "title": "에이전트 이름 식별",
  "content": "에이전트 이름 설정. 시작 스크립트에 JVM 옵션을 추가해 자동으로 부여한 이름 대신 직접 이름을 설정할 수 있습니다. 옵션 설정 위치 설명 -Dwhatap.name JVM Options 에이전트 이름을 패턴으로 설정합니다. 기본값 {type}-{ip2}-{ip3}-{port} -Dwhatap.oname JVM Options 에이전트 이름을 고정값으로 설정합니다. -Dwhatap.oname=java-sales-01 옵션을 설정하지 않으면 -Dwhatap.name 옵션에 설정된 패턴으로 적용됩니다. 팁 IP 주소가 10.11.12.13이고, 포트 번호가 8000인 환경에서 -Dwhatap.oname 옵션을 적용하지 않은 경우 : whatap.oname 은 -Dwhatap.name 에 설정된 패턴에 따라 JAVA-12-13-8000 으로 기본 설정됩니다. -Dwhatap.oname 옵션을 적용한 경우 : -Dwhatap.name 옵션을 무시하고 -Dwhatap.oname 옵션에 설정한 값으로 에이전트 이름이 적용됩니다. 노트 클라우드의 Scale Out 환경에서는 VM이 복사되어 사용될 수 있습니다. 따라서 오브젝트 이름이 자동 부여되는 것이 중요합니다. 만약 2개의 VPC 환경을 만들고 동일한 private IP를 사용하도록 네트워크를 구성한 경우 두 개의 VPC가 중복되면 안 됩니다. 예를 들어, 별도의 프로젝트로 분리하거나 -Dwhatap.name 옵션과 이름 변수를 서로 다른 방식으로 조합해 설정할 수 있습니다. 다음은 whatap.conf 파일에 에이전트 이름으로 적용할 수 있는 옵션입니다. whatap.name String 기본값 {type}-{ip2}-{ip3}-{port} 에이전트 이름을 패턴으로 설정합니다. whatap.okind String 에이전트가 속한 그룹 단위를 설정합니다. 여러 에이전트를 같이 설정해 해당 그룹명으로 토폴로지를 확인할 수 있습니다. whatap.onode String 에이전트가 속한 노드 단위를 설정합니다. auto_oname_enabled Boolean 기본값 false 서버에 등록할 에이전트 이름( whatap.oname )을 서버로부터 자동 부여받는 기능을 활성화합니다. 해당 옵션 적용 시 JVM 옵션으로 설정한 -Dwhatap.name , -Dwhatap.oname 값은 무시합니다. 수집 서버와의 통신을 통해 whatap.oname 값을 부여 받은 다음 에이전트의 일반적인 동작을 시작합니다. auto_oname_prefix String 기본값 agent 에이전트 이름을 서버로부터 자동 부여할 때 에이전트 이름의 prefix, 보통 업무명을 사용합니다. prefix 일련번호 '1~)'을 부여합니다. 노트 에이전트 이름을 자동으로 부여하는 auto_oname_enabled 옵션이 활성화 상태여야( true ) 해당 옵션을 사용할 수 있습니다. auto_oname_reset Int 기본값 0 서버로부터 새로운 에이전트 이름을 부여받기 위해 수정합니다. 에이전트 이름을 자동 부여하면 whatap.oname 이라는 시스템 환경 변수로 설정됩니다. 한번 정해진 시스템 환경 변수는 자바 인스턴스가 다시 시작할 때까지 유지합니다. 리셋을 원할 때 auto_oname_reset 값을 수정하세요. 현재 설정 값과 다른 값으로 변경하면 적용됩니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 이름 설정"
},
{
  "title": "사용자 수",
  "url": "https://docs.whatap.io/java/agent-number-of-user",
  "content": "사용자 수. 자바(Java) 웹 애플리케이션 서버에 연결된 사용자 수를 에이전트 설정을 통해 집계하는 방법을 안내합니다. 실시간 사용자 집계 활성화 여부 설정, 사용자 수를 집계하기 위한 쿠키 제한 설정, IP 주소 또는 HTTP 헤더 특정 값을 기준으로 한 사용자 집계 방법, 클라이언트 IP 정보 추적을 위한 HTTP 헤더 설정 등을 포함합니다. 사용자 수자바(Java) 웹 애플리케이션 서버에 연결된 사용자 수를 에이전트 설정을 통해 집계하는 방법을 안내합니다. 실시간 사용자 집계 활성화 여부 설정, 사용자 수를 집계하기 위한 쿠키 제한 설정, IP 주소 또는 HTTP 헤더 특정 값을 기준으로 한 사용자 집계 방법, 클라이언트 IP 정보 추적을 위한 HTTP 헤더 설정 등을 포함합니다. trace_user_enabled Boolean 기본값 true 실시간 사용자 집계 여부를 설정합니다. 사용자 추적 옵션이 중복 설정된 경우 동작 우선 순위는 다음과 같습니다. trace_user_using_ip / wclient_using_ip trace_user_using_jsession user_header_ticket / wclient_header_ticket 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_using_ip, wclient_header_ticket 옵션을 이용하세요. trace_user_cookie_limit / wclient_cookie_limit Int 기본값 2048 사용자 집계를 위해 쿠키를 발행하는 경우 기존 쿠키가 너무 많다면 쿠키 오버플로어가 발생할 수 있습니다. 이를 방지하기 위해 limit을 설정합니다. 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_cookie_limit 옵션을 이용하세요. trace_user_using_ip / wclient_using_ip Boolean 기본값 true 실시간 사용자를 IP 주소 기반으로 집계합니다. IP 주소가 아닌 쿠키를 기반으로 사용자를 구분하고 싶으면 값을 false로 변경하세요. 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_using_ip 옵션을 이용하세요. user_header_ticket / wclient_header_ticket String HTTP 헤더의 특정 값으로 사용자 수를 집계하고자 하는 경우 해당 Key 값을 설정합니다. 모바일 클라이언트인 경우 사용자 구분을 위해 header를 사용한다면 다음 옵션을 이용할 수 있습니다. whatap.confuser_header_ticket=login 노트Java 에이전트 2.2.0 버전 이상의 경우 wclient_header_ticket 옵션을 이용하세요. trace_http_client_ip_header_key String ​ 클라이언트 IP(Remote IP)의 정보를 특정 HTTP 헤더의 값으로 변경해 설정하는 기능입니다. 프록시(Proxy) 환경에서 X-Forwarded-For 헤더 값을 클라이언트 IP로 설정할 수 있습니다. WEB/WAS 앞에 L4와 같은 로드밸런서가 위치한 경우 클라이언트의 IP 주소가 아닌 L4의 IP 주소가 Remote Address가 되는 경우가 있습니다. 이 상황에서 실제 클라이언트 IP 정보가 http 헤더에 특정 키 값으로 기록되는 경우라면 해당 키 값으로 대체할 수 있습니다. trace_user_using_jsession Boolean 기본값 false 실시간 사용자를 SESSIONID 기반으로 집계합니다. ",
  "product": "JAVA 모니터링",
  "header": "사용자 수"
},
{
  "title": "에이전트 알림",
  "url": "https://docs.whatap.io/java/agent-notification",
  "content": "에이전트 알림. 자바(Java) 에이전트를 통해 애플리케이션 서버에서 발생하는 다양한 이벤트에 대한 알림 설정 방법을 제공합니다. 트랜잭션 재귀 호출, 서비스 거절, HTTPC 연결 오류, 힙 및 디스크 사용량 초과, CPU 사용량 임계치 도달, DB 커넥션 중복 할당 및 예외 발생 시 이벤트 알림을 설정하는 옵션을 포함합니다. 각 이벤트별로 발행 간격, 발행 여부, 임계치 설정 등 세밀한 조정을 할 수 있습니다. 에이전트 알림자바(Java) 에이전트를 통해 애플리케이션 서버에서 발생하는 다양한 이벤트에 대한 알림 설정 방법을 제공합니다. 트랜잭션 재귀 호출, 서비스 거절, HTTPC 연결 오류, 힙 및 디스크 사용량 초과, CPU 사용량 임계치 도달, DB 커넥션 중복 할당 및 예외 발생 시 이벤트 알림을 설정하는 옵션을 포함합니다. 각 이벤트별로 발행 간격, 발행 여부, 임계치 설정 등 세밀한 조정을 할 수 있습니다. recursive_event_interval MiliSeconds 기본값 300000 트랜잭션의 재귀 호출에 대한 이벤트 알림 발행 간격을 설정합니다. reject_event_enabled Boolean 기본값 false 서비스 거절(호출 부하 제한/거절) 시 이벤트 알림 발행 여부를 설정합니다. reject_event_interval MiliSeconds 기본값 300000 서비스 거절(호출 부하 제한/거절) 시 이벤트 알림 발행 간격을 설정합니다. httpc_event_enabled Boolean 기본값 false HTTPC 연결 오류 발생 시 이벤트 알림 발행 여부를 설정합니다. httpc_event_interval MiliSeconds 기본값 300000 HTTPC 연결 오류 발생 시 이벤트 알림 발행 간격을 설정합니다. heap_event_enabled Boolean 기본값 false 힙 사용량 임계 도달 시 이벤트 알림 발행 여부를 설정합니다. heap_event_percent Percentage 기본값 90 힙 사용량 이벤트 알림 발행 기준 임계치를 설정합니다. heap_event_duration MiliSeconds 기본값 30000 힙 사용량 이벤트 알림 발행 기준 지속 시간을 설정합니다. heap_event_interval MiliSeconds 기본값 300000 힙 사용량 이벤트 알림 발행 간격을 설정합니다. heap_event_action String 기본값 NONE 힙 사용량 이벤트 발생 시 실행할 동적 로딩 코드를 설정합니다. 노트$WHATAP_HOME/plugin/ActionScript.x 파일에 작성한 Java 코드에 전달할 ID ($id로 전달함) disk_event_enabled Boolean 기본값 false 디스크 사용량 임계치 도달 시 이벤트 알림 발행 여부를 설정합니다. disk_event_percent Percentage 기본값 90 디스크 사용량 이벤트 알림 발행 기준 임계치를 설정합니다. disk_event_interval MiliSeconds 기본값 300000 디스크 사용량 이벤트 알림 발행 간격을 설정합니다. disk_event_action String 디스크 사용량 이벤트 발생 시 실행할 동적 로딩 코드를 설정합니다. 노트$WHATAP_HOME/plugin/ActionScript.x 파일에 작성한 Java 코드에 전달할 ID ($id로 전달함) cpu_event_enabled Boolean 기본값 false CPU 사용량 임계 도달 시 이벤트 알림 발행 여부를 설정합니다. cpu_event_percent Percentage 기본값 90 CPU 사용량 이벤트 알림 발행 기준 임계치를 설정합니다. cpu_event_duration MiliSeconds 기본값 30000 CPU 사용량 이벤트 알림 발행 기준 지속시간을 설정합니다. cpu_event_interval MiliSeconds 기본값 300000 CPU 사용량 이벤트 알림 발행 간격을 설정합니다. cpu_event_action String CPU 사용량 이벤트 발생 시, 실행할 동적 로딩 코드에 전달할 ID를 설정합니다. 노트$WHATAP_HOME/plugin/ActionScript.x 파일에 작성한 Java 코드에 전달할 ID ($id로 전달함) dbc_dup_event_enabled Boolean 기본값 false DB Connection이 중복 할당될 경우 이벤트 알림 발행 여부를 설정합니다. dbc_dup_event_fullstack_enabled Boolean 기본값 false DB Connection이 중복 할당될 때 Stack 확보 여부를 설정합니다. exception_event_enabled Boolean 기본값 false Exception 발생 시 이벤트 알림 발행 여부를 설정합니다. exception_event_interval MiliSeconds 기본값 60000 Exception 발생 시 이벤트 알림 발행 간격을 설정합니다. exception_event_set String 대상 Exception을 설정합니다. 여러 개인 경우 쉼표(,)를 구분자로 사용하세요. exception_event_action String 이벤트 발생 시 실행할 동적 로딩 코드를 설정합니다. 노트$WHATAP_HOME/plugin/ActionScript.x 파일에 작성한 Java 코드에 전달할 ID ($id로 전달함) ",
  "product": "JAVA 모니터링",
  "header": "에이전트 알림"
},
{
  "title": "에이전트 로그 설정",
  "url": "https://docs.whatap.io/java/agent-log",
  "content": "에이전트 로그 설정. 자바(Java) 애플리케이션 환경에서 발생하는 로그 데이터를 에이전트를 통해 관리하는 방법을 안내합니다. 로그 파일의 경로 및 이름 설정, 보관 기간 설정, 로그 모니터링, 사용자 정의 로그 추적 활성화 방법 등을 포함합니다. 로그 관리를 위한 다양한 설정 옵션을 제공해 시스템의 효율적인 로그 관리를 도와줍니다. 자바(Java) 애플리케이션 환경에서 발생하는 로그 데이터를 에이전트를 통해 관리하는 방법을 안내합니다. 로그 파일의 경로 및 이름 설정, 보관 기간 설정, 로그 모니터링, 사용자 정의 로그 추적 활성화 방법 등을 포함합니다. 로그 관리를 위한 다양한 설정 옵션을 제공해 시스템의 효율적인 로그 관리를 도와줍니다.",
  "product": "JAVA 모니터링",
  "header": "에이전트 로그 설정"
},
{
  "url": "https://docs.whatap.io/java/agent-log",
  "title": "에이전트 로그 설정",
  "content": "경로 및 이름 설정. 에이전트 로그의 경로와 이름은 whatap.conf 파일에 설정할 수 있습니다. log_root 의 기본값으로 ${WHATAP_HOME} /logs 경로를 사용합니다. whatap.conf log_root = System.getProperty(\"whatap.home\", \".\") + \"/logs\" log_name = whatap",
  "product": "JAVA 모니터링",
  "header": "경로 및 이름 설정"
},
{
  "url": "https://docs.whatap.io/java/agent-log",
  "title": "에이전트 로그 설정",
  "content": "로그 관리 옵션. whatap.conf 파일에 로그 관련 옵션을 작성해 로그 내용을 관리할 수 있습니다. whatap.conf watchlog_enabled = true log_rotation_enabled = true log_oname_enabled = true log_keep_days = 7 watchlog_enabled Boolean 기본값 false 값이 true 이면 로그 모니터링을 활성화합니다. watchlog_check_interval Int 기본값 2000 로그를 감시하는 간격입니다. 매 간격으로 로그 파일에 기록을 추가했는지 확인합니다. watchlog_read_count Int 기본값 8 로그를 읽는 최대 횟수입니다. 한 번에 watchlog_buffer_size 크기 만큼 읽습니다. watchlog_buffer_size Int 기본값 131072(128k) 로그를 한 번에 읽는 로그 사이즈입니다. watchlog.LOGKEY 하나의 로그 파일을 감시하기 위한 설정입니다. file 이름을 입력하고 감시한 word 여러 개를 쉼표(,)로 구분해 설정합니다. check_interval 간격으로 로그를 감시하다가 키워드를 발견하면 경고합니다. 한번 경고가 나가면 silent 만큼 경고를 멈춥니다. watchlog.LOGKEY.enabled Boolean 기본값 true watchlog.LOGKEY.file String watchlog.LOGKEY.words String watchlog.LOGKEY.silent Int 기본값 10000 watchlog.LOGKEY.check_interval Int 기본값 1000 log_root String 기본값 ${WHATAP_HOME} /logs 에이전트 로그 경로를 설정합니다. log_datasource_lookup_enabled Boolean 기본값 true InitialContext Lookup 시 DataSource인 경우 로그를 기록하는 기능을 활성화합니다. log_rotation_enabled Boolean 기본값 true 에이전트 로그 파일을 날짜 별로 저장하는 기능을 활성화합니다. 로그 파일명은 whatap- yyyymmdd .log 형태로 저장합니다. 값이 false 이면 로그 파일명은 whatap.log 형태로 저장합니다. log_keep_days Int 기본값 7 로그 파일 보관 기간을 설정합니다. log_rotation_enabled 값이 true 인 경우에만 동작합니다. log_oname_enabled Boolean 기본값 false 값이 true이면 각 로그마다 에이전트 이름을 추가합니다.",
  "product": "JAVA 모니터링",
  "header": "로그 관리 옵션"
},
{
  "url": "https://docs.whatap.io/java/agent-log",
  "title": "에이전트 로그 설정",
  "content": "로그싱크(LogSink). whatap.agent-2.1.0 버전 이상부터는 애플리케이션 서버를 통합 모니터링하는 로그싱크(LogSink) 기능을 제공합니다. 주의 LogSink 옵션은 whatap.agent-2.1.0 버전 이상에서 사용 가능합니다.",
  "product": "JAVA 모니터링",
  "header": "로그싱크(LogSink)"
},
{
  "url": "https://docs.whatap.io/java/agent-log",
  "title": "에이전트 로그 설정",
  "content": "로그 모니터링 기능 활성화. logsink_enabled Boolean 기본값 false 로그 모니터링 기능을 활성화합니다. logsink_trace_enabled Boolean 기본값 false Log에 트랜잭션 ID를 삽입하여, 트랜잭션 트레이스의 로그 탭을 노출할지 여부를 지정합니다.",
  "product": "JAVA 모니터링",
  "header": "로그 모니터링 기능 활성화"
},
{
  "url": "https://docs.whatap.io/java/agent-log",
  "title": "에이전트 로그 설정",
  "content": "프레임워크 로그내용 수집. 프레임워크에서 수집하는 로그를 모니터링하려면 모듈에서 로그를 가로채기 위한 설정과 플러그인을 추가해야 합니다. 프레임워크에서 수집하는 로그의 기본 카테고리 이름을 'AppLog'로 설정합니다. 기본값은 hooklog_enabled 옵션의 설정과 동일합니다. hooklog_enabled Boolean 기본값 logsink_enabled 로그 추적 활성화 여부를 설정합니다. 노트 Java 에이전트 2.2.4 버전 이상에서는 애플리케이션의 재기동 없이 옵션의 변경 사항을 적용할 수 있습니다. Java 에이전트 2.2.4 버전 미만에서는 hooklog_enabled 값을 변경하면 재기동이 필요합니다. hooklog_enabled 기본값은 logsink_enabled 입니다. 따라서 logsink_enabled=true 로 설정하고 자바 애플리케이션을 재시작하면 hooklog_enabled 는 true 로 설정됩니다. hooklog_custom_methods 사용자 정의 로그를 등록합니다. 임의의 로그 프레임워크 내용을 전달합니다. 사이트에서 개별로 만든 로그 모듈의 로그를 추적할때 사용하세요. Java package io . home . test ; public class MyLog { public void customLog ( String log ) { . . . } } whatap.conf hooklog_custom_methods = io.home.test.MyLog.customLog",
  "product": "JAVA 모니터링",
  "header": "프레임워크 로그내용 수집"
},
{
  "title": "JBoss",
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "content": "JBoss. 와탭 모니터링 솔루션을 JBoss 애플리케이션에 통합하기 위한 JVM(Java Virtual Machine) 옵션 추가 방법에 대한 상세한 안내를 제공합니다. 사용자는 본 문서를 통해 자바(Java) 에이전트 설치 후 JBoss 애플리케이션의 성능 및 가용성 모니터링을 위해 필요한 JVM 설정을 적용하는 방법을 단계별로 확인할 수 있습니다. 에이전트 설치 과정 중 필수 JVM 옵션의 구성과 JBoss와의 원활한 통합을 위한 최적의 설정 방법, 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "JBoss"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "title": "JBoss",
  "content": "환경 변수 추가. JBoss 애플리케이션 서버 환경에서 Java 모니터링 에이전트를 효과적으로 사용하기 위해 필요한 JVM 옵션을 추가하는 방법을 안내합니다. JVM 옵션에 -javaagent 및 -Djboss.modules.system.pkgs 옵션을 추가하세요.",
  "product": "JAVA 모니터링",
  "header": "환경 변수 추가"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "title": "JBoss",
  "content": "JBOSS 7.0 이상 EAP 6.0 이상. 설정 위치: (JBoss 설치 경로)/bin/standalone.conf(domain.conf) #!/bin/sh ########## WHATAP ############ WHATAP_HOME = /home/ec2-user/whatap WHATAP_JAR = ` ls $ { WHATAP_HOME } /whatap.agent-*.jar | sort -V | tail -1 ` JAVA_OPTS = \" ${JAVA_OPTS} -javaagent: ${WHATAP_JAR} -Djboss.modules.system.pkgs=whatap\" ########## WHATAP ############ 노트 JBoss 5.0 버전 이하는 (JBoss 설치 경로)/bin/run.conf 경로에서 설정하세요. 에러가 발생하면 -Djboss.platform.mbeanserver=true 옵션을 추가하세요.",
  "product": "JAVA 모니터링",
  "header": "JBOSS 7.0 이상 EAP 6.0 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "title": "JBoss",
  "content": "Java 17 버전 이상. Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED",
  "product": "JAVA 모니터링",
  "header": "Java 17 버전 이상"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "title": "JBoss",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/jboss",
  "title": "JBoss",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "에이전트 통신 설정",
  "url": "https://docs.whatap.io/java/agent-network",
  "content": "에이전트 통신 설정. 자바(Java) 에이전트가 애플리케이션 서버로부터 수집한 데이터를 서버로 전송하기 위한 네트워크 설정 방법을 안내합니다. 주요 설정 옵션으로는 수집 서버 호스트, 포트, 타임아웃 값, 네트워크 전송 크기, 데이터 전송 큐 크기 등이 있으며, 에이전트의 효율적인 데이터 관리 및 안정적인 서버 통신을 보장하는 데 중요합니다. 에이전트 통신 설정에이전트가 애플리케이션 서버로부터 수집한 데이터를 서버로 전송하기 위한 네트워크 설정 방법을 안내합니다. 주요 설정 옵션으로는 수집 서버 호스트, 포트, 타임아웃 값, 네트워크 전송 크기, 데이터 전송 큐 크기 등이 있으며, 에이전트의 효율적인 데이터 관리 및 안정적인 서버 통신을 보장하는 데 중요합니다. whatap_server_host ip_address 기본값 127.0.0.1,127.0.0.1 에이전트가 수집한 데이터를 전송할 서버를 설정합니다. 수집 서버 이중화로 2개 이상의 IP 주소를 가진 경우 쉼표(,)를 구분자로 이용하세요. 설정한 IP 주소에는 수집 서버 proxy 서버가 리스닝(Listening) 상태로 서비스돼야 합니다. whatap_server_port tcp_port 기본값 6600 수집 서버 포트를 설정합니다. 포트는 하나만 설정할 수 있으므로 whatap_server_host 옵션에 설정한 수집 서버들은 동일 포트를 사용해야 합니다. tcp_so_timeout MiliSecond 기본값 60000 수집 서버와 통신하는 TCP 세션의 Socket Timeout 값을 설정합니다. tcp_connection_timeout MiliSecond 기본값 5000 수집 서버와 통신하는 TCP 세션의 Connection Timeout 값을 설정합니다. net_send_max_bytes Byte 기본값 5242880 에이전트가 데이터를 수집하고 네트워크로 한 번에 전송할 수 있는 최대 byte 크기입니다. net_send_queue1_size Int 기본값 256 트레이스 정보와 액티브 스택을 제외한 나머지 데이터 전송에 사용할 Queue의 크기를 설정합니다. 설정한 크기가 10 이하인 경우 10으로 설정합니다. net_send_queue2_size Int 기본값 512 트레이스 정보와 액티브 스택 데이터 전송에 사용할 Queue의 크기를 설정합니다. 설정한 크기가 10 이하인 경우 10으로 설정합니다. ",
  "product": "JAVA 모니터링",
  "header": "에이전트 통신 설정"
},
{
  "title": "Java 1.6 버전 미만",
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "content": "Java 1.6 버전 미만. 자바(Java) 1.6 버전 미만에서 자바(Java) 에이전트를 적용하는 방법을 안내합니다. Java 1.5와 1.4 버전 각각에 대해 에이전트 설치 및 설정 절차, 그리고 -javaagent 옵션과 관련한 제약사항을 확인할 수 있습니다. Java 1.6 버전 미만에서 와탭 에이전트를 적용할 수 있습니다. 하지만 일부 기능에 제약이 있습니다.",
  "product": "JAVA 모니터링",
  "header": "Java 1.6 버전 미만"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "title": "Java 1.6 버전 미만",
  "content": "Java 1.5 버전. Java 1.5 버전은 -javaagent 옵션을 제공합니다. 다만 외부 스레드의 정보를 조회하는데 제약이 있어 일부 기능에 제약이 있습니다. 다음의 기능들은 동작하지 않습니다. 액티브 트랜잭션에서 실시간 트레이스 스택 분석 (탑 스택, 유니크 스택, 액티브 스택) 스레드 목록의 상세 스택",
  "product": "JAVA 모니터링",
  "header": "Java 1.5 버전"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "title": "Java 1.6 버전 미만",
  "content": "Java 1.4 버전. Java 1.4 버전은 -javaagent 옵션이 없습니다. 다른 방식으로 와탭 에이전트를 설치해야 합니다. 물론 whatap.agent.jar 파일은 Java 1.4 버전을 사용해야 합니다. whatap.java14.tracer- X.Y.Z .jar",
  "product": "JAVA 모니터링",
  "header": "Java 1.4 버전"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "title": "Java 1.6 버전 미만",
  "content": "boot.jar 생성. setup.sh 파일을 이용해 boot.jar 파일을 생성하세요. 만약 [JAVA_HOME]을 입력하지 않으면 현재 경로를 JDK의 위치를 자동으로 인식합니다. $ setup.sh [ JAVA_HOME ] setup.sh 실행 결과: whatap.java14.boot- X.Y.Z .jar",
  "product": "JAVA 모니터링",
  "header": "boot.jar 생성"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "title": "Java 1.6 버전 미만",
  "content": "bootclasspath에 설치. bootclasspath 옵션을 사용해 빌드된 jar와 tracer jar를 prepend로 추가하세요. - Xbootclasspath / p : $ { WHATAP_HOME } / whatap . java14 . boot - 1.0 .2 . jar : $ { WHATAP_HOME } / whatap . java14 . tracer - 1.0 .2 . jar",
  "product": "JAVA 모니터링",
  "header": "bootclasspath에 설치"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/java-under-ver",
  "title": "Java 1.6 버전 미만",
  "content": "제약 사항. jdk 1.4 버전에서는 다음의 기능들이 동작하지 않습니다. 액티브 트랜잭션에서 실시간 트래이스 스택 분석 (탑 스택, 유니크 스택, 액티브 스택) 컴포넌트 버전 스레드 목록, 힙히스토그램 로드된 클래스 오픈 소켓 에이전트 덤프",
  "product": "JAVA 모니터링",
  "header": "제약 사항"
},
{
  "title": "Elastic Beanstalk",
  "url": "https://docs.whatap.io/java/add-jvm-opt/elastic-beanstalk",
  "content": "Elastic Beanstalk. AWS Elastic Beanstalk 환경에서 Java 애플리케이션을 실행하는 사용자가 와탭의 자바(Java) 모니터링 에이전트를 효과적으로 적용하기 위한 JVM 옵션을 설정하는 방법을 안내합니다. Elastic Beanstalk에 맞춘 와탭 자바(Java) 에이전트의 설치 및 구성 과정, 필수 JVM 옵션의 추가 및 설정 방법을 확인할 수 있습니다. 추가로 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "Elastic Beanstalk"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/elastic-beanstalk",
  "title": "Elastic Beanstalk",
  "content": "에이전트 적용하기. Elastic Beanstalk 를 이용해 배포할 경우 와탭 에이전트를 적용하는 방법입니다. 노트 Platform as a Service ( PaaS ) 환경에서는 배포 대상 애플리케이션에 와탭 에이전트의 설정을 포함해 배포합니다. Spring Boot 결과물을 jar로 배포할 경우 .ebextensions 의 내용을 적용할 수 없습니다. 다음 파일들을 압축해 zip 형태로 배포하세요. .elasticbeanstalk/config.yml : eb 명령을 실행하는 디렉터리 하위에 자동 생성 .ebextensions/ {config_name} .config : eb 설정 파일 Procfile : JVM command line 옵션을 설정하기 위한 파일 {application} .jar : 실행할 applicaion.jar 파일 Service에 적용할 와탭 에이전트의 파일을 압축해 S3(혹은 다운로드할 수 있는 public 경로)에 업로드하세요. paramkey.txt whatap.agent-2.0_25.jar whatap.conf # 디렉터리 압축하기 zip -r whatap-agent.zip agent .ebextension/ {config_name} .config 파일에 다운로드할 와탭 에이전트 경로를 입력하세요. 다운로드할 수 있도록 압축 파일 형태로 만들어 둔 경우 eb를 실행해 자동으로 다운로드한 다음 압축을 풉니다. sources : target directory : S3경로 Example sources : /home/webapp : http : //s3.ap - northeast - 2.amazonaws.com/ { bucket - name } /whatap - agent.zip 와탭 에이전트 옵션을 추가한 JVM command를 입력해 Procfile 을 작성하세요. Procfile web : java - javaagent : $ { WHATAP_JAR_FILE_PATH } - Dwhatap.name=$ { WHATAP_NAME } - Dwhatap.okind=$ { WHATAP_OKIND_NAME } - Dwhatap.server.home=$ { APPLICAION_PATH } - Dwhatap.conf.path=$ { WHATAP_HOME } - jar $ { APPLICAIONT } .jar Example web : java - javaagent : /home/webapp/agent/whatap.agent - X.Y.Z.jar - Dwhatap.name=bootTest - Dwhatap.okind=test - Dwhatap.server.home=/var/app/current - Dwhatap.conf.path=/home/webapp/agent - jar whatap - boot - test.jar Procfile 파일과 .ebextensions 파일, {application} .jar 파일을 압축하세요. zip -r { application } .zip Procfile .ebextensions/ { application } .jar .elasticbeanstalk/config.yml 파일에 배포할 zip파일 경로를 추가하세요. deploy : artifact : /path/to/ { application } .zip eb 배포 명령어를 실행하세요. eb deploy 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED 노트 자세한 내용은 AWS 가이드 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 적용하기"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/elastic-beanstalk",
  "title": "Elastic Beanstalk",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/elastic-beanstalk",
  "title": "Elastic Beanstalk",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "IBM BlueMix",
  "url": "https://docs.whatap.io/java/add-jvm-opt/ibm-bluemix",
  "content": "IBM BlueMix. IBM Bluemix 클라우드 플랫폼에서 Java 애플리케이션을 실행하는 사용자가 와탭의 자바(Java) 모니터링 에이전트를 효과적으로 적용하기 위한 JVM 옵션을 설정하는 방법에 대해 안내합니다. 사용자는 이 문서를 통해 IBM Bluemix 환경에서 와탭의 자바(Java) 에이전트를 설치한 후 에이전를 구성하는 과정, 필요한 JVM 옵션의 추가 방법을 단계별로 확인할 수 있습니다. 추가로 힙스토그램 조회 방법을 포함하고 있습니다. ",
  "product": "JAVA 모니터링",
  "header": "IBM BlueMix"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/ibm-bluemix",
  "title": "IBM BlueMix",
  "content": "에이전트 적용하기. IBM BlueMix 를 이용해 배포할 경우 와탭 에이전트를 적용하는 방법입니다. IBM BlueMix 는 컨테이너로 WebSphere Liberty 환경을 제공합니다. Liberty 는 WebSphere Application Server 와 다른 경량화 환경으로 Spring Boot 가 동작하는 방식과 유사합니다. 노트 Platform as a Service ( PaaS ) 환경에서는 배포 대상 애플리케이션에 와탭 에이전트의 설정을 포함해 배포합니다. 다음은 설정 환경 예제입니다. 가이드 에 따른 환경을 구성할 경우 로컬 개발 환경에서 생성하는 파일들입니다. whatap@vmwas01:/apps/bluemix/java-helloworld$ ls -alrt 합계 64 drwxrwxr-x 3 whatap whatap 4096 10 월 29 13 :13 .. -rw-rw-r-- 1 whatap whatap 1079 10 월 29 13 :13 .classpath -rw-rw-r-- 1 whatap whatap 1184 10 월 29 13 :13 .project -rw-rw-r-- 1 whatap whatap 39 10 월 29 13 :13 .gitignore -rw-rw-r-- 1 whatap whatap 151 10 월 29 13 :13 CONTRIBUTING.md drwxrwxr-x 2 whatap whatap 4096 10 월 29 13 :13 .settings -rw-rw-r-- 1 whatap whatap 2823 10 월 29 13 :13 pom.xml -rw-rw-r-- 1 whatap whatap 122 10 월 29 13 :13 manifest.yml -rw-rw-r-- 1 whatap whatap 3522 10 월 29 13 :13 README.md -rw-rw-r-- 1 whatap whatap 11323 10 월 29 13 :13 LICENSE drwxrwxr-x 3 whatap whatap 4096 10 월 29 13 :13 src drwxrwxr-x 2 whatap whatap 4096 10 월 29 13 :13 target drwxrwxr-x 8 whatap whatap 4096 10 월 29 13 :13 .git drwxrwxr-x 6 whatap whatap 4096 10 월 29 15 :26 . ${APP_HOME} 에서 src/main/resources/whatap-agent/ 디렉터리를 생성하고 jar 파일, conf 파일을 복사하세요. $ mkdir -p src/main/resources/whatap-agent/ $ cp /apps/whatap/whatap.agent.tracer-1.5.4.jar src/main/resources/whatap-agent/ $ cp /apps/whatap/whatap.conf src/main/resources/whatap-agent/ ${APP_HOME} /manifest.yml 파일에 옵션을 추가하세요. yml 파일이므로 공백, 들여쓰기 기준을 잘 맞춰 작성하세요. --- applications : - name : sample - java - helloworld random-route : true memory : 256M path : target/JavaHelloWorldApp.war # 여기서부터 추가합니다. env : JAVA_OPTS : \"-javaagent:/{APPLICATION_DIR}/WEB-INF/classes/whatap-agent/whatap.agent-X.Y.Z.jar -Dorg.osgi.framework.bootdelegation=whatap.* \" 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED 노트 whatap.conf 설정은 PaaS가 아닌 환경과 동일하게 적용합니다. 적용 후 에이전트 명 식별에 어려울 수 있으니 상황에 맞는 에이전트 명을 적용하세요. 에이전트 네이밍에 관한 자세한 내용은 다음 문서 를 참조하세요.",
  "product": "JAVA 모니터링",
  "header": "에이전트 적용하기"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/ibm-bluemix",
  "title": "IBM BlueMix",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/ibm-bluemix",
  "title": "IBM BlueMix",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "Docker",
  "url": "https://docs.whatap.io/java/add-jvm-opt/docker",
  "content": "Docker. 도커(Docker) 환경에서 Java 애플리케이션에 와탭 자바(Java) 모니터링 에이전트를 적용하는 방법을 단계별로 안내합니다. 사용자는 기존 Docker 이미지에 와탭 자바(Java) 에이전트 설정을 추가하여 새로운 이미지를 빌드하는 과정, whatap.conf 파일 생성, Dockerfile 작성, JAVA_OPT 수정 방법 등을 확인할 수 있습니다. 또한, Java 17 이상의 버전에서 필요한 추가 JVM 옵션과 다양한 Java 버전에 따른 힙 히스토그램 조회 설정 방법도 제공합니다. ",
  "product": "JAVA 모니터링",
  "header": "Docker"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/docker",
  "title": "Docker",
  "content": "에이전트 적용하기. 기존 Docker 이미지를 바탕으로 와탭 에이전트 설정을 추가한 이미지를 빌드하세요. 노트 이 문서에서는 Java 에이전트를 설치하는 경우만을 다룹니다. 와탭 쿠버네티스 모니터링과 함께 적용하는 경우 다음 문서 를 참조하세요. Docker 빌드 디렉터리를 생성하세요. mkdir -p { Docker build dir } whatap.conf 파일을 생성하세요. cat >{Docker build Dir}/whatap.conf <<EOL # 액세스 키를 입력하세요. license=XXXXXXXXXXXXXX-XXXXXXXXXXXXXX-XXXXXXXXXXXXXX # 수집 서버 IP 정보를 입력하세요. whatap.server.host=xx.xx.xx.xx/yy.yy.yy.yy EOL Dockerfile을 생성하세요. 이미지를 빌드할 경우 와탭 이미지에서 -javaagent 옵션에 적용할 jar 파일을 복사할 수 있습니다. cat >/home/silver/whatap/docker/Dockerfile <<EOL FROM whatap/kube_mon as build ## 실제 이미지 생성 (기존 이미지에 Whatap 추가) ## $Image_Name(이미지명) FROM $Image_Name RUN mkdir -p /whatap COPY --from = build /data/agent/micro/whatap.agent-*.jar /whatap COPY ./whatap.conf /whatap/ #... EOL JAVA_OPT 에 다음 내용을 추가하세요. WHATAP_HOME = /whatap WHATAP_JAR = ls ${WHATAP_HOME} /whatap.agent-*.jar | sort -V | tail -1 export JAVA_OPTS = \"-javaagent: ${WHATAP_JAR} \" Docker를 빌드하세요. cd docker docker build -t $Image_Name 노트 Java 17 버전 이상의 경우 reflection 관련한 다음 옵션을 추가하세요. --add-opens = java.base/java.lang = ALL-UNNAMED 노트 Java 에이전트 파일 이름은 Rename 기능을 활용해 수정할 수 있습니다. Java 에이전트의 이름을 수정했다면 JAVA_OPTS 에 새로운 Java 에이전트 이름을 등록하세요. Java 에이전트 이름 수정 방법 예시 java -cp whatap.agent-X.Y.Z.jar whatap.agent.setup.Rename -from whatap.agent-X.Y.Z.jar -to whatap.agent.jar",
  "product": "JAVA 모니터링",
  "header": "에이전트 적용하기"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/docker",
  "title": "Docker",
  "content": "힙 히스토그램 조회. 와탭의 Java 모니터링에서는 JVM 메모리에 올라가 있는 Heap 점유 객체 현황(힙 메모리상의 객체별 사이즈)을 조회할 수 있는 기능을 기본으로 제공합니다. 애플리케이션 > 인스턴스 성능 분석 메뉴에서 힙 히스토그램 탭을 선택하세요. Java 6 ~ 8 버전에서는 JVM 옵션 없이 기본 지원하지만, 일부 Java 버전에 따라 다음과 같이 JVM 옵션을 적용해야 합니다. Java 9 ~ Java 15 버전 -Djdk.attach.allowAttachSelf = true example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true -jar { application.jar } Java 16 버전 이상 -Djdk.attach.allowAttachSelf = true --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED example java -javaagent: { WHATAP_HOME } /whatap.agent-X.Y.Z.jar -Djdk.attach.allowAttachSelf = true --add-opens = java.base/java.lang = ALL-UNNAMED --add-opens = jdk.attach/sun.tools.attach = ALL-UNNAMED -jar { application.jar } 노트 Java 5 버전 이하, IBM Java는 지원하지 않습니다.",
  "product": "JAVA 모니터링",
  "header": "힙 히스토그램 조회"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/docker",
  "title": "Docker",
  "content": "모니터링 시작하기. 모든 설정을 완료한 다음 애플리케이션 서버를 다시 시작하면 에이전트가 정보를 수집하기 시작합니다. 다음 문서 를 확인하세요.",
  "product": "JAVA 모니터링",
  "header": "모니터링 시작하기"
},
{
  "title": "배치 애플리케이션",
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "content": "배치 애플리케이션. 와탭의 자바(Java) 에이전트를 배치 애플리케이션에 적용하는 방법을 안내합니다. 배치 애플리케이션의 독특한 시작 및 중지 반복 동작으로 인한 웹 애플리케이션과의 차이점을 설명하고, 필요한 에이전트 다운로드, 에이전트 및 배치 호스트 구성, 에이전트와 함께 배치 작업 실행, time_limit 설정 등을 통한 실행 시간 모니터링 방법을 제공합니다. 배치 애플리케이션에서 와탭 에이전트를 적용하는 방법입니다. 배치 애플리케이션은 WAS와는 다르게 애플리케이션이 실행과 중단을 반복하는 특성이 있습니다. 따라서 일반적인 웹 애플리케이션과 다르게 모니터링해야 합니다.",
  "product": "JAVA 모니터링",
  "header": "배치 애플리케이션"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "에이전트 다운로드. 다음 명령어를 실행해 배치 애플리케이션 모니터링을 위한 에이전트를 다운로드할 수 있습니다. wget https://api.whatap.io/agent/whatap.agent.batch.tar.gz 배치 에이전트 파일 구성 whatap.agent.batch.tar.gz ⎿ whatap.agent-x.y.z.jar : 자바 에이전트 ⎿ whatap.agent.batch.host-x.y.z.jar : 배치 호스트(Batch Host) - 수집 서버로 데이터 전송 ⎿ whatap.conf : 배치 호스트(Batch Host) 설정 파일(파일이 없는 경우 새로 생성하여 설정 > 에이전트 설치 메뉴의 license , whatap.server.host 항목을 추가하세요.) ⎿ agent/whatap.agent.batch-x.y.z.jar : 배치 에이전트 - 애플리케이션 데이터를 수집하여 배치 호스트로 전송 ⎿ agent/whatap.conf : 배치 에이전트 설정 파일",
  "product": "JAVA 모니터링",
  "header": "에이전트 다운로드"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 호스트(Batch Host) 설정. license , whatap.server.host 옵션값은 해당 프로젝트의 설정 > 에이전트 설치 메뉴에서 확인할 수 있습니다. whatap.conf # default setting license = whatap.server.host = # 스텝을 나누어서 전송 split_trace_enabled = true # 하나의 트레이스에 표시할 최대 스텝 개수 trace_step_max_count = 1024",
  "product": "JAVA 모니터링",
  "header": "배치 호스트(Batch Host) 설정"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 에이전트 설정. agent/whatap.conf # default setting net_udp_listen_ip = 0.0.0.0 net_udp_listen_port = 6611 # 배치 호스트와 통신 설정 net_udp_listen_ip = 0.0.0.0 net_udp_listen_port = 6611 # 배치 잡에서 http call 최대 개수 trace_httpc_limit = 1000000 # 배치 잡에서 sql 최대 개수 trace_sql_limit = 1000000 # 엑티브 스택 표시 여부 active_stack_enabled = true # 5회 이내 active_stack_time1 = 5000 # 5회 이후 active_stack_time2 = 10000 # 최초 스택 시작시간 active_stack_start_wait_time = 1000",
  "product": "JAVA 모니터링",
  "header": "배치 에이전트 설정"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 잡(Batch Job) 실행하기. 배치 잡(Batch Job)을 하나의 트랜잭션 관점에서 모니터링해야 합니다. 그래서 와탭의 Java 에이전트는 Job 프로세스를 위한 Job 에이전트와 이 정보를 서버로 중계하기 위한 Host 에이전트로 분리된 두 개의 에이전트를 실행해야 합니다.",
  "product": "JAVA 모니터링",
  "header": "배치 잡(Batch Job) 실행하기"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 호스트(Batch Host) 실행 명령어. Batch Host Agent java -cp { BATCH_HOST_HOME } /whatap.agent.batch.host-x.y.z.jar ; { BATCH_HOST_HOME } /whatap.agent-x.y.z.jar -Dwhatap.name = batch whatap.agent.batch.App Batch Host Agent, Java 17 or later java --add-opens = java.base/java.lang = ALL-UNNAMED -cp { BATCH_HOST_HOME } /whatap.agent.batch.host-x.y.z.jar ; { BATCH_HOST_HOME } /whatap.agent-x.y.z.jar -Dwhatap.name = batch whatap.agent.batch.App",
  "product": "JAVA 모니터링",
  "header": "배치 호스트(Batch Host) 실행 명령어"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 에이전트(Batch Agent) 실행 명령어. Batch Agent java -javaagent: { BATCH_AGENT_HOME } /whatap.agent.batch-x.y.z.jar -jar { APP_PATH } /batch-application.jar Batch Agent, Java 17 or later java -javaagent: { BATCH_AGENT_HOME } /whatap.agent.batch-x.x.x.jar --add-opens = java.base/java.lang = ALL-UNNAMED -jar { APP_PATH } /batch-application.jar 노트 배치 잡(Batch Job) 에이전트와 배치 호스트(Batch Host) 에이전트는 배치 잡(Batch Job)을 수행하는 호스트와 같이 설치 및 실행하세요.",
  "product": "JAVA 모니터링",
  "header": "배치 에이전트(Batch Agent) 실행 명령어"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "Time Limit 설정. 배치 잡(Batch Job) 에이전트와 배치 호스트(Batch Host) 에이전트 사이는 UDP를 이용해 통신합니다. 배치 잡(Batch Job)은 일반적으로 장시간 수행합니다. 수십초가 넘을 수도 있습니다. 따라서 배치 잡(Batch Job) 별로 time_limit 의 값은 다를 수 있습니다. 배치 잡(Batch Job)이 실행되는 예상 처리 시간을 time_limit 옵션에 설정하세요. time_limit = 300000 warning_time = 70% of time_limit step_interval = 5000",
  "product": "JAVA 모니터링",
  "header": "Time Limit 설정"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "액티브 이퀄라이저 컬러 설정. 배치 잡(Batch Job)의 실행 시간이 time_limit 의 70%를 지나면 노란색으로 표시하고, time_limit 을 초과하면 빨간색으로 표시하도록 다음과 같이 설정하세요. whatap.conf ## 기대 종료시간의 70% yellow_time = time_limit * 0.7; ## 기대 종료 시간을 초과 red_time = time_limit; 노트 서버 운영자는 배치 잡(Batch Job)의 지연 여부를 실시간으로 확인하려면 time_limit 값을 적절하게 설정하세요.",
  "product": "JAVA 모니터링",
  "header": "액티브 이퀄라이저 컬러 설정"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "액티브 스택 수집 간격 설정. 배치 잡(Batch Job) 에이전트는 step_interval 옵션값의 간격으로 액티브 스택을 수집할 수 있습니다. step_interval = 5000",
  "product": "JAVA 모니터링",
  "header": "액티브 스택 수집 간격 설정"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "배치 에이전트의 메트릭 지표 수집. 대시보드에는 배치 호스트(Batch Host)의 Heap Memory를 수집하고, 배치 애플리케이션의 성능 지표는 메트릭(TagCount: batch_job_counter )으로 수집합니다.",
  "product": "JAVA 모니터링",
  "header": "배치 에이전트의 메트릭 지표 수집"
},
{
  "url": "https://docs.whatap.io/java/add-jvm-opt/batch-app",
  "title": "배치 애플리케이션",
  "content": "batch_job_counter. batch job: pid , hostname , job_name gc: gc_count , gc_time_sum , gc_oldgen_count heap: heap_tot , heap_use , heap_max , heap_pending_final , heap_perm cpu: cputime thread count: thread_total_started , thread_count , thread_daemon , thread_peak_count",
  "product": "JAVA 모니터링",
  "header": "batch_job_counter"
},
{
  "title": "액티브 트랜잭션",
  "url": "https://docs.whatap.io/java/active-transactions",
  "content": "액티브 트랜잭션. 액티브 트랜잭션을 안내합니다. 진행 중인 트랜잭션을 액티브 트랜잭션이라고 합니다. 액티브 트랜잭션에서 정기적으로 덤프한 스택을 액티브 스택이라 합니다. 노트와탭 에이전트는 매 10초(옵션 가능)마다 액티브 트랜잭션에 대해서 액티브 스택을 덤프하고 이것을 서버에 전송합니다. active_stack_second=10",
  "product": "JAVA 모니터링",
  "header": "액티브 트랜잭션"
},
{
  "url": "https://docs.whatap.io/java/active-transactions",
  "title": "액티브 트랜잭션",
  "content": "컴팩트한 액티브 스택 수집. 액티브 스택은 스레드 덤프를 정기적으로 수행하기 때문에 잘못 구현되면 에이전트에 오버헤드가 커질 수 있습니다. 와탭은 에이전트 부하를 최소화하면서 액티브 스택을 수집하기 위해 다양한 옵션들을 가지고 있습니다. 팁 사이트맵 > 스레드 목록/덤프 메뉴에서 스레드 목록 중에 WhaTap-ActiveStackDump 스레드의 CPU Time 을 확인하면 오버헤드를 판단할 수 있습니다. 액티브 스택 예시 JAVA java . lang . StringBuffer . append ( StringBuffer . java : 309 ) java . util . regex . Matcher . appendReplacement ( Matcher . java : 839 ) java . util . regex . Matcher . replaceAll ( Matcher . java : 906 ) java . lang . String . replaceAll ( String . java : 2162 ) core . log . triggers . TriggerRegister . changeNotify ( TriggerRegister . java : 114 ) core . log . aop . handler . DaoInfo . log ( DaoInfo . java : 141 ) core . log . aop . handler . DaoInfo . doAround ( DaoInfo . java : 102 ) core . log . aop . reflection . profiler . AroundProfiler . invoke ( AroundProfiler . java : 19 ) com . sun . proxy . $ Proxy39 . getUpdateCount ( Unknown Source ) org . apache . ibatis . executor . resultset . DefaultResultSetHandler . getNextResultSet ( DefaultResultSetHandler . java : 256 ) org . apache . ibatis . executor . resultset . DefaultResultSetHandler . handleResultSets ( DefaultResultSetHandler . java : 193 ) org . apache . ibatis . executor . statement . PreparedStatementHandler . query ( PreparedStatementHandler . java : 64 ) * * * sun . reflect . GeneratedMethodAccessor140 . invoke ( Unknown Source ) sun . reflect . DelegatingMethodAccessorImpl . invoke ( DelegatingMethodAccessorImpl . java : 43 ) java . lang . reflect . Method . invoke ( Method . java : 606 ) org . springframework . web . method . support . InvocableHandlerMethod . doInvoke ( InvocableHandlerMethod . java : 221 ) org . springframework . web . method . support . InvocableHandlerMethod . invokeForRequest ( InvocableHandlerMethod . java : 136 ) org . springframework . web . servlet . mvc . method . annotation . ServletInvocableHandlerMethod . invokeAndHandle ( ServletInvocableHandlerMethod . java : 114 ) org . springframework . web . servlet . mvc . method . annotation . RequestMappingHandlerAdapter . invokeHandlerMethod ( RequestMappingHandlerAdapter . java : 827 ) 최적화된 데이터 수집 트랜잭션을 수행 중인 스레드에 대해서만 스택을 덤프합니다. 액티브 스택 덤프 시간 간격을 조정할 수 있습니다. active_stack_second=10 액티브 스택의 최대 라인에 제한되어 있습니다. Top 라인에서부터 기본 50라인을 수집합니다. trace_active_callstack_depth=50 액티브 스택의 각 라인은 해시 처리되어 수집됩니다. text는 한 번만 수집됩니다. 한 타임에 수집되는 최대 액티브 스택 개수도 제한되어 있습니다. active_stack_count=100",
  "product": "JAVA 모니터링",
  "header": "컴팩트한 액티브 스택 수집"
},
{
  "url": "https://docs.whatap.io/java/active-transactions",
  "title": "액티브 트랜잭션",
  "content": "Background Thread에 대한 액티브 스택. 기본적으로 액티브 스택은 트랜잭션이 수행되고 있는 스레드의 스택을 말합니다. 하지만 일부 백그라운드 스레드에 대해서도 스택을 분석할 필요가 있을 수 있습니다. 이때 옵션을 통해서 백그라운드 스레드에 대한 액티브 스택을 확보할 수 있습니다. 1.6.2 버전 이후부터 가능합니다. async_stack_enabled 의 값을 true 로 설정하면 활성화됩니다. async_stack_enabled = false 스택 덤프 간격은 포그라운드 액티브 스택 설정에 따라갑니다. active_stack_second = 10 대상 스레드 이름을 지정할 때는 * 를 사용하여 문자열 패턴을 지정합니다. async_thread_match = http*,abc* 스레드 이름으로 스택 덤프 대상을 식별합니다. , 를 사용하여 match를 여러 개 지정할 수 있습니다. 스택의 Top 메소드가 async_thread_parking 에 등록된 클래스 / 메소드일 때 스레드가 파킹 상태에 있다고 판단하고 덤프를 생성하지 않습니다. async_thread_parking_class = sun.misc.Unsafe async_thread_parking_method = park",
  "product": "JAVA 모니터링",
  "header": "Background Thread에 대한 액티브 스택"
},
{
  "url": "https://docs.whatap.io/java/active-transactions",
  "title": "액티브 트랜잭션",
  "content": "참고 자료. 액티브 트랜잭션 장애를 가장 빠르게 알아내는 액티브 트랜잭션",
  "product": "JAVA 모니터링",
  "header": "참고 자료"
}
]